// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at Fri 20 Jun 2014 21:45:18

#include "NE6SSM_two_scale_model.hpp"
#include "wrappers.hpp"
#include "linalg2.hpp"
#include "logger.hpp"
#include "error.hpp"
#include "root_finder.hpp"
#include "gsl_utils.hpp"
#include "config.h"
#include "pv.hpp"

#include "sfermions.hpp"
#include "nmssm_twoloophiggs.h"

#include <cmath>
#include <iostream>

#ifdef ENABLE_THREADS
#include <thread>
#endif

namespace flexiblesusy {

using namespace NE6SSM_info;

#define CLASSNAME NE6SSM<Two_scale>

#define PHYSICAL(parameter) physical.parameter
#define INPUT(parameter) model->get_input().parameter
#define LOCALINPUT(parameter) input.parameter

#ifdef ENABLE_THREADS
std::mutex CLASSNAME::mtx_fortran;
#endif

#ifdef ENABLE_THREADS
#define LOCK_MUTEX() mtx_fortran.lock()
#define UNLOCK_MUTEX() mtx_fortran.unlock()
#else
#define LOCK_MUTEX()
#define UNLOCK_MUTEX()
#endif

CLASSNAME::NE6SSM(const NE6SSM_input_parameters& input_)
   : Two_scale_model()
   , NE6SSM_soft_parameters(input_)
   , number_of_ewsb_iterations(100)
   , number_of_mass_iterations(20)
   , ewsb_loop_order(2)
   , pole_mass_loop_order(2)
   , calculate_sm_pole_masses(false)
   , precision(1.0e-3)
   , ewsb_iteration_precision(1.0e-5)
   , physical()
   , problems(NE6SSM_info::particle_names)
   , thread_exception()
   , MGlu(0), MFv(Eigen::Array<double,3,1>::Zero()), MChaP(0), MVZ(0), MVZp(0),
      MSd(Eigen::Array<double,6,1>::Zero()), MSv(Eigen::Array<double,3,1>::Zero()
      ), MSu(Eigen::Array<double,6,1>::Zero()), MSe(Eigen::Array<double,6,1>::Zero
      ()), MSDX(Eigen::Array<double,6,1>::Zero()), Mhh(Eigen::Array<double,5,1>
      ::Zero()), MAh(Eigen::Array<double,5,1>::Zero()), MHpm(Eigen::Array<double,2
      ,1>::Zero()), MChi(Eigen::Array<double,8,1>::Zero()), MCha(Eigen::Array<
      double,2,1>::Zero()), MFe(Eigen::Array<double,3,1>::Zero()), MFd(
      Eigen::Array<double,3,1>::Zero()), MFu(Eigen::Array<double,3,1>::Zero()),
      MFDX(Eigen::Array<double,3,1>::Zero()), MSHp0(Eigen::Array<double,2,1>::Zero
      ()), MSHpp(Eigen::Array<double,2,1>::Zero()), MChiP(Eigen::Array<double,2,1>
      ::Zero()), MVG(0), MVP(0), MVWm(0)

   , ZD(Eigen::Matrix<double,6,6>::Zero()), ZV(Eigen::Matrix<double,3,3>::Zero(
      )), ZU(Eigen::Matrix<double,6,6>::Zero()), ZE(Eigen::Matrix<double,6,6>
      ::Zero()), ZDX(Eigen::Matrix<double,6,6>::Zero()), ZH(Eigen::Matrix<double,5
      ,5>::Zero()), ZA(Eigen::Matrix<double,5,5>::Zero()), ZP(Eigen::Matrix<double
      ,2,2>::Zero()), ZN(Eigen::Matrix<std::complex<double>,8,8>::Zero()), UM(
      Eigen::Matrix<std::complex<double>,2,2>::Zero()), UP(Eigen::Matrix<
      std::complex<double>,2,2>::Zero()), ZEL(Eigen::Matrix<std::complex<double>,3
      ,3>::Zero()), ZER(Eigen::Matrix<std::complex<double>,3,3>::Zero()), ZDL(
      Eigen::Matrix<std::complex<double>,3,3>::Zero()), ZDR(Eigen::Matrix<
      std::complex<double>,3,3>::Zero()), ZUL(Eigen::Matrix<std::complex<double>,3
      ,3>::Zero()), ZUR(Eigen::Matrix<std::complex<double>,3,3>::Zero()), ZDXL(
      Eigen::Matrix<std::complex<double>,3,3>::Zero()), ZDXR(Eigen::Matrix<
      std::complex<double>,3,3>::Zero()), UHp0(Eigen::Matrix<double,2,2>::Zero()),
      UHpp(Eigen::Matrix<double,2,2>::Zero()), ZNp(Eigen::Matrix<std::complex<
      double>,2,2>::Zero())

   , PhaseGlu(1,0)

{
}

CLASSNAME::~NE6SSM()
{
}

void CLASSNAME::do_calculate_sm_pole_masses(bool flag)
{
   calculate_sm_pole_masses = flag;
}

bool CLASSNAME::do_calculate_sm_pole_masses() const
{
   return calculate_sm_pole_masses;
}

void CLASSNAME::set_ewsb_loop_order(unsigned loop_order)
{
   ewsb_loop_order = loop_order;
}

void CLASSNAME::set_number_of_ewsb_iterations(std::size_t iterations)
{
   number_of_ewsb_iterations = iterations;
}

void CLASSNAME::set_number_of_mass_iterations(std::size_t iterations)
{
   number_of_mass_iterations = iterations;
}

void CLASSNAME::set_precision(double precision_)
{
   precision = precision_;
   ewsb_iteration_precision = precision_;
}

void CLASSNAME::set_pole_mass_loop_order(unsigned loop_order)
{
   pole_mass_loop_order = loop_order;
}

void CLASSNAME::set_ewsb_iteration_precision(double precision)
{
   ewsb_iteration_precision = precision;
}

double CLASSNAME::get_ewsb_iteration_precision() const
{
   return ewsb_iteration_precision;
}

double CLASSNAME::get_ewsb_loop_order() const
{
   return ewsb_loop_order;
}

const NE6SSM_physical& CLASSNAME::get_physical() const
{
   return physical;
}

const Problems<NE6SSM_info::NUMBER_OF_PARTICLES>& CLASSNAME::get_problems() const
{
   return problems;
}

Problems<NE6SSM_info::NUMBER_OF_PARTICLES>& CLASSNAME::get_problems()
{
   return problems;
}

int CLASSNAME::tadpole_equations(const gsl_vector* x, void* params, gsl_vector* f)
{
   if (contains_nan(x, number_of_ewsb_equations)) {
      for (std::size_t i = 0; i < number_of_ewsb_equations; ++i)
         gsl_vector_set(f, i, std::numeric_limits<double>::max());
      return GSL_EDOM;
   }

   const CLASSNAME::Ewsb_parameters* ewsb_parameters
      = static_cast<CLASSNAME::Ewsb_parameters*>(params);
   NE6SSM* model = ewsb_parameters->model;
   const unsigned ewsb_loop_order = ewsb_parameters->ewsb_loop_order;

   double tadpole[number_of_ewsb_equations];
   
   model->set_mHd2(gsl_vector_get(x, 0));
   model->set_mHu2(gsl_vector_get(x, 1));
   model->set_ms2(gsl_vector_get(x, 2));
   model->set_msbar2(gsl_vector_get(x, 3));
   model->set_mphi2(gsl_vector_get(x, 4));

   tadpole[0] = model->get_ewsb_eq_hh_1();
   tadpole[1] = model->get_ewsb_eq_hh_2();
   tadpole[2] = model->get_ewsb_eq_hh_3();
   tadpole[3] = model->get_ewsb_eq_hh_4();
   tadpole[4] = model->get_ewsb_eq_hh_5();
  
   if (ewsb_loop_order > 0) {
      model->calculate_DRbar_parameters();
      tadpole[0] -= Re(model->tadpole_hh(0));
      tadpole[1] -= Re(model->tadpole_hh(1));
      tadpole[2] -= Re(model->tadpole_hh(2));
      tadpole[3] -= Re(model->tadpole_hh(3));
      tadpole[4] -= Re(model->tadpole_hh(4));
      
     if (ewsb_loop_order > 1) {
         double two_loop_tadpole[3];
         model->tadpole_hh_2loop(two_loop_tadpole);
         tadpole[0] -= two_loop_tadpole[0];
         tadpole[1] -= two_loop_tadpole[1];
         tadpole[2] -= two_loop_tadpole[2];
        
     }
   }

   for (std::size_t i = 0; i < number_of_ewsb_equations; ++i)
      gsl_vector_set(f, i, tadpole[i]);

   return GSL_SUCCESS;
}

int CLASSNAME::solve_ewsb_iteratively()
{
   const gsl_multiroot_fsolver_type* solvers[] = {
      gsl_multiroot_fsolver_hybrid, gsl_multiroot_fsolver_hybrids,
         gsl_multiroot_fsolver_broyden

   };

   double x_init[number_of_ewsb_equations];
   ewsb_initial_guess(x_init);

#ifdef ENABLE_VERBOSE
   std::cout << "Solving EWSB equations ...\n"
      "\tInitial guess: x_init =";
   for (std::size_t i = 0; i < number_of_ewsb_equations; ++i)
      std::cout << " " << x_init[i];
   std::cout << '\n';
#endif

   int status;
   for (std::size_t i = 0; i < sizeof(solvers)/sizeof(*solvers); ++i) {
      VERBOSE_MSG("\tStarting EWSB iteration using solver " << i);
      std::cout << "Starting EWSB iteration using solver " << i << std::endl;;
      status = solve_ewsb_iteratively_with(solvers[i], x_init);
      std::cout << "after calling ewb solver status = " << status << std::endl;
      if (status == GSL_SUCCESS) {
         VERBOSE_MSG("\tSolver " << i << " finished successfully!");
         break;
      }
#ifdef ENABLE_VERBOSE
      else {
         WARNING("\tSolver " << i << " could not find a solution!"
                 " (requested precision: " << ewsb_iteration_precision << ")");
      }
#endif
   }

   if (status != GSL_SUCCESS) {
      problems.flag_no_ewsb();
#ifdef ENABLE_VERBOSE
      WARNING("\tCould not find a solution to the EWSB equations!"
              " (requested precision: " << ewsb_iteration_precision << ")");
#endif
   } else {
      problems.unflag_no_ewsb();
   }

   return status;
}

int CLASSNAME::solve_ewsb_iteratively(unsigned loop_order)
{
     
   // temporarily set `ewsb_loop_order' to `loop_order' and do
   // iteration 
   const unsigned old_loop_order = ewsb_loop_order;
   ewsb_loop_order = loop_order;
   
   const int status = solve_ewsb_iteratively();
   ewsb_loop_order = old_loop_order;
   return status;
}

int CLASSNAME::solve_ewsb_tree_level()
{
   int error = 0;
  
   const auto QS = LOCALINPUT(QS);

   const double old_mHu2 = mHu2;
   const double old_mHd2 = mHd2;
   const double old_ms2 = ms2;
   const double old_msbar2 = msbar2;
   const double old_mphi2 = mphi2;

   mHu2 = (0.025*(14.142135623730951*vd*vs*Conj(TLambdax) - 10*vd*vphi*vsb*Conj
      (Sigmax)*Lambdax - 10*vd*vphi*vsb*Conj(Lambdax)*Sigmax - 3*Power(vu,3)*Sqr(
      g1) - 2*Power(vu,3)*Sqr(g1p) - 5*Power(vu,3)*Sqr(g2) - 20*vu*AbsSqr(Lambdax)
      *Sqr(vd) + 3*vu*Sqr(g1)*Sqr(vd) - 3*vu*Sqr(g1p)*Sqr(vd) + 5*vu*Sqr(g2)*Sqr(
      vd) - 20*vu*AbsSqr(Lambdax)*Sqr(vs) + QS*vu*Sqr(g1p)*Sqr(vs) - QS*vu*Sqr(g1p
      )*Sqr(vsb) + 14.142135623730951*vd*vs*TLambdax))/vu;
   mHd2 = (0.0125*(28.284271247461902*vs*vu*Conj(TLambdax) - 20*vphi*vsb*vu*
      Conj(Sigmax)*Lambdax - 20*vphi*vsb*vu*Conj(Lambdax)*Sigmax - 6*Power(vd,3)*
      Sqr(g1) - 9*Power(vd,3)*Sqr(g1p) - 10*Power(vd,3)*Sqr(g2) - 40*vd*AbsSqr(
      Lambdax)*Sqr(vs) + 3*QS*vd*Sqr(g1p)*Sqr(vs) - 3*QS*vd*Sqr(g1p)*Sqr(vsb) - 40
      *vd*AbsSqr(Lambdax)*Sqr(vu) + 6*vd*Sqr(g1)*Sqr(vu) - 6*vd*Sqr(g1p)*Sqr(vu) +
      10*vd*Sqr(g2)*Sqr(vu) + 28.284271247461902*vs*vu*TLambdax))/vd;
   ms2 = (0.0125*(28.284271247461902*MuPhi*vphi*vsb*Conj(Sigmax) +
      28.284271247461902*vd*vu*Conj(TLambdax) + 28.284271247461902*vphi*vsb*Conj(
      TSigmax) + 40*vsb*Conj(Sigmax)*XiF + 28.284271247461902*vphi*vsb*Conj(MuPhi)
      *Sigmax + 40*vsb*Conj(XiF)*Sigmax - Power(vs,3)*Sqr(g1p)*Sqr(QS) - 40*vs*
      AbsSqr(Lambdax)*Sqr(vd) + 3*QS*vs*Sqr(g1p)*Sqr(vd) - 40*vs*AbsSqr(Sigmax)*
      Sqr(vphi) + 20*vsb*Conj(Sigmax)*KappaPr*Sqr(vphi) + 20*vsb*Conj(KappaPr)*
      Sigmax*Sqr(vphi) - 40*vs*AbsSqr(Sigmax)*Sqr(vsb) + vs*Sqr(g1p)*Sqr(QS)*Sqr(
      vsb) - 40*vs*AbsSqr(Lambdax)*Sqr(vu) + 2*QS*vs*Sqr(g1p)*Sqr(vu) +
      28.284271247461902*vd*vu*TLambdax + 28.284271247461902*vphi*vsb*TSigmax))/vs
      ;
   msbar2 = (0.0125*(28.284271247461902*MuPhi*vphi*vs*Conj(Sigmax) +
      28.284271247461902*vphi*vs*Conj(TSigmax) - 20*vd*vphi*vu*Conj(Sigmax)*
      Lambdax + 40*vs*Conj(Sigmax)*XiF + 28.284271247461902*vphi*vs*Conj(MuPhi)*
      Sigmax - 20*vd*vphi*vu*Conj(Lambdax)*Sigmax + 40*vs*Conj(XiF)*Sigmax - Power
      (vsb,3)*Sqr(g1p)*Sqr(QS) - 3*QS*vsb*Sqr(g1p)*Sqr(vd) - 40*vsb*AbsSqr(Sigmax)
      *Sqr(vphi) + 20*vs*Conj(Sigmax)*KappaPr*Sqr(vphi) + 20*vs*Conj(KappaPr)*
      Sigmax*Sqr(vphi) - 40*vsb*AbsSqr(Sigmax)*Sqr(vs) + vsb*Sqr(g1p)*Sqr(QS)*Sqr(
      vs) - 2*QS*vsb*Sqr(g1p)*Sqr(vu) + 28.284271247461902*vphi*vs*TSigmax))/vsb;
   mphi2 = (0.25*(-4*vphi*AbsSqr(MuPhi) - 4*Power(vphi,3)*AbsSqr(KappaPr) - 2*
      vphi*BMuPhi - 2*vphi*Conj(BMuPhi) - 2.8284271247461903*MuPhi*Conj(XiF) +
      1.4142135623730951*MuPhi*vs*vsb*Conj(Sigmax) - 2.8284271247461903*Conj(LXiF)
      + 1.4142135623730951*vs*vsb*Conj(TSigmax) - 4*vphi*Conj(XiF)*KappaPr + 2*
      vphi*vs*vsb*Conj(Sigmax)*KappaPr - vd*vsb*vu*Conj(Sigmax)*Lambdax -
      2.8284271247461903*Conj(MuPhi)*XiF - 4*vphi*Conj(KappaPr)*XiF +
      1.4142135623730951*vs*vsb*Conj(MuPhi)*Sigmax + 2*vphi*vs*vsb*Conj(KappaPr)*
      Sigmax - vd*vsb*vu*Conj(Lambdax)*Sigmax - 2.8284271247461903*LXiF -
      4.242640687119286*MuPhi*Conj(KappaPr)*Sqr(vphi) - 1.4142135623730951*Conj(
      TKappaPr)*Sqr(vphi) - 4.242640687119286*Conj(MuPhi)*KappaPr*Sqr(vphi) - 2*
      vphi*AbsSqr(Sigmax)*Sqr(vs) - 2*vphi*AbsSqr(Sigmax)*Sqr(vsb) -
      1.4142135623730951*Sqr(vphi)*TKappaPr + 1.4142135623730951*vs*vsb*TSigmax))
      /vphi;

   const bool is_finite = std::isfinite(mHu2) && std::isfinite(mHd2) &&
      std::isfinite(ms2) && std::isfinite(msbar2) && std::isfinite(mphi2);

   if (!is_finite) {
      mHu2 = old_mHu2;
      mHd2 = old_mHd2;
      ms2 = old_ms2;
      msbar2 = old_msbar2;
      mphi2 = old_mphi2;
      error = 1;
   }


   return error;
}

int CLASSNAME::solve_ewsb_tree_level_via_soft_higgs_masses()
{
   int error = 0;

   const auto QS = LOCALINPUT(QS);

   const double new_mHd2 = (0.0125*(28.284271247461902*vs*vu*Conj(TLambdax) -
      20*vphi*vsb*vu*Conj(Sigmax)*Lambdax - 20*vphi*vsb*vu*Conj(Lambdax)*Sigmax -
      6*Power(vd,3)*Sqr(g1) - 9*Power(vd,3)*Sqr(g1p) - 10*Power(vd,3)*Sqr(g2) - 40
      *vd*AbsSqr(Lambdax)*Sqr(vs) + 3*QS*vd*Sqr(g1p)*Sqr(vs) - 3*QS*vd*Sqr(g1p)*
      Sqr(vsb) - 40*vd*AbsSqr(Lambdax)*Sqr(vu) + 6*vd*Sqr(g1)*Sqr(vu) - 6*vd*Sqr(
      g1p)*Sqr(vu) + 10*vd*Sqr(g2)*Sqr(vu) + 28.284271247461902*vs*vu*TLambdax))
      /vd;
   const double new_mHu2 = (0.025*(14.142135623730951*vd*vs*Conj(TLambdax) - 10
      *vd*vphi*vsb*Conj(Sigmax)*Lambdax - 10*vd*vphi*vsb*Conj(Lambdax)*Sigmax - 3*
      Power(vu,3)*Sqr(g1) - 2*Power(vu,3)*Sqr(g1p) - 5*Power(vu,3)*Sqr(g2) - 20*vu
      *AbsSqr(Lambdax)*Sqr(vd) + 3*vu*Sqr(g1)*Sqr(vd) - 3*vu*Sqr(g1p)*Sqr(vd) + 5*
      vu*Sqr(g2)*Sqr(vd) - 20*vu*AbsSqr(Lambdax)*Sqr(vs) + QS*vu*Sqr(g1p)*Sqr(vs)
      - QS*vu*Sqr(g1p)*Sqr(vsb) + 14.142135623730951*vd*vs*TLambdax))/vu;
   const double new_ms2 = (0.0125*(28.284271247461902*MuPhi*vphi*vsb*Conj(
      Sigmax) + 28.284271247461902*vd*vu*Conj(TLambdax) + 28.284271247461902*vphi*
      vsb*Conj(TSigmax) + 40*vsb*Conj(Sigmax)*XiF + 28.284271247461902*vphi*vsb*
      Conj(MuPhi)*Sigmax + 40*vsb*Conj(XiF)*Sigmax - Power(vs,3)*Sqr(g1p)*Sqr(QS)
      - 40*vs*AbsSqr(Lambdax)*Sqr(vd) + 3*QS*vs*Sqr(g1p)*Sqr(vd) - 40*vs*AbsSqr(
      Sigmax)*Sqr(vphi) + 20*vsb*Conj(Sigmax)*KappaPr*Sqr(vphi) + 20*vsb*Conj(
      KappaPr)*Sigmax*Sqr(vphi) - 40*vs*AbsSqr(Sigmax)*Sqr(vsb) + vs*Sqr(g1p)*Sqr(
      QS)*Sqr(vsb) - 40*vs*AbsSqr(Lambdax)*Sqr(vu) + 2*QS*vs*Sqr(g1p)*Sqr(vu) +
      28.284271247461902*vd*vu*TLambdax + 28.284271247461902*vphi*vsb*TSigmax))/vs
      ;
   const double new_msbar2 = (0.0125*(28.284271247461902*MuPhi*vphi*vs*Conj(
      Sigmax) + 28.284271247461902*vphi*vs*Conj(TSigmax) - 20*vd*vphi*vu*Conj(
      Sigmax)*Lambdax + 40*vs*Conj(Sigmax)*XiF + 28.284271247461902*vphi*vs*Conj(
      MuPhi)*Sigmax - 20*vd*vphi*vu*Conj(Lambdax)*Sigmax + 40*vs*Conj(XiF)*Sigmax
      - Power(vsb,3)*Sqr(g1p)*Sqr(QS) - 3*QS*vsb*Sqr(g1p)*Sqr(vd) - 40*vsb*AbsSqr(
      Sigmax)*Sqr(vphi) + 20*vs*Conj(Sigmax)*KappaPr*Sqr(vphi) + 20*vs*Conj(
      KappaPr)*Sigmax*Sqr(vphi) - 40*vsb*AbsSqr(Sigmax)*Sqr(vs) + vsb*Sqr(g1p)*Sqr
      (QS)*Sqr(vs) - 2*QS*vsb*Sqr(g1p)*Sqr(vu) + 28.284271247461902*vphi*vs*
      TSigmax))/vsb;
   const double new_mphi2 = (0.25*(-4*vphi*AbsSqr(MuPhi) - 4*Power(vphi,3)*
      AbsSqr(KappaPr) - 2*vphi*BMuPhi - 2*vphi*Conj(BMuPhi) - 2.8284271247461903*
      MuPhi*Conj(XiF) + 1.4142135623730951*MuPhi*vs*vsb*Conj(Sigmax) -
      2.8284271247461903*Conj(LXiF) + 1.4142135623730951*vs*vsb*Conj(TSigmax) - 4*
      vphi*Conj(XiF)*KappaPr + 2*vphi*vs*vsb*Conj(Sigmax)*KappaPr - vd*vsb*vu*Conj
      (Sigmax)*Lambdax - 2.8284271247461903*Conj(MuPhi)*XiF - 4*vphi*Conj(KappaPr)
      *XiF + 1.4142135623730951*vs*vsb*Conj(MuPhi)*Sigmax + 2*vphi*vs*vsb*Conj(
      KappaPr)*Sigmax - vd*vsb*vu*Conj(Lambdax)*Sigmax - 2.8284271247461903*LXiF -
      4.242640687119286*MuPhi*Conj(KappaPr)*Sqr(vphi) - 1.4142135623730951*Conj(
      TKappaPr)*Sqr(vphi) - 4.242640687119286*Conj(MuPhi)*KappaPr*Sqr(vphi) - 2*
      vphi*AbsSqr(Sigmax)*Sqr(vs) - 2*vphi*AbsSqr(Sigmax)*Sqr(vsb) -
      1.4142135623730951*Sqr(vphi)*TKappaPr + 1.4142135623730951*vs*vsb*TSigmax))
      /vphi;

   if (std::isfinite(new_mHd2))
      mHd2 = new_mHd2;
   else
      error = 1;
   if (std::isfinite(new_mHu2))
      mHu2 = new_mHu2;
   else
      error = 1;
   if (std::isfinite(new_ms2))
      ms2 = new_ms2;
   else
      error = 1;
   if (std::isfinite(new_msbar2))
      msbar2 = new_msbar2;
   else
      error = 1;
   if (std::isfinite(new_mphi2))
      mphi2 = new_mphi2;
   else
      error = 1;


   return error;
}

int CLASSNAME::solve_ewsb_one_loop()
{
   return solve_ewsb_iteratively(1);
}

int CLASSNAME::solve_ewsb()
{
   VERBOSE_MSG("\tSolving EWSB at " << ewsb_loop_order << "-loop order");

   if (ewsb_loop_order == 0)
      return solve_ewsb_tree_level();
   return solve_ewsb_iteratively(ewsb_loop_order);
}

void CLASSNAME::ewsb_initial_guess(double x_init[number_of_ewsb_equations])
{
   x_init[0] = mHd2;
   x_init[1] = mHu2;
   x_init[2] = ms2;
   x_init[3] = msbar2;
   x_init[4] = mphi2;

}

int CLASSNAME::solve_ewsb_iteratively_with(const gsl_multiroot_fsolver_type* solver,
                                           const double x_init[number_of_ewsb_equations])
{
   Ewsb_parameters params = {this, ewsb_loop_order};
   Root_finder<number_of_ewsb_equations> root_finder(CLASSNAME::tadpole_equations,
                              &params,
                              number_of_ewsb_iterations,
                              ewsb_iteration_precision);
   root_finder.set_solver_type(solver);
   const int status = root_finder.find_root(x_init);
  
   return status;
}

void CLASSNAME::print(std::ostream& ostr) const
{
   ostr << "========================================\n"
           "NE6SSM\n"
           "========================================\n";
   NE6SSM_soft_parameters::print(ostr);
   ostr << "----------------------------------------\n"
           "tree-level DRbar masses:\n"
           "----------------------------------------\n";
   ostr << "MGlu = " << MGlu << '\n';
   ostr << "MFv = " << MFv.transpose() << '\n';
   ostr << "MChaP = " << MChaP << '\n';
   ostr << "MVZ = " << MVZ << '\n';
   ostr << "MVZp = " << MVZp << '\n';
   ostr << "MSd = " << MSd.transpose() << '\n';
   ostr << "MSv = " << MSv.transpose() << '\n';
   ostr << "MSu = " << MSu.transpose() << '\n';
   ostr << "MSe = " << MSe.transpose() << '\n';
   ostr << "MSDX = " << MSDX.transpose() << '\n';
   ostr << "Mhh = " << Mhh.transpose() << '\n';
   ostr << "MAh = " << MAh.transpose() << '\n';
   ostr << "MHpm = " << MHpm.transpose() << '\n';
   ostr << "MChi = " << MChi.transpose() << '\n';
   ostr << "MCha = " << MCha.transpose() << '\n';
   ostr << "MFe = " << MFe.transpose() << '\n';
   ostr << "MFd = " << MFd.transpose() << '\n';
   ostr << "MFu = " << MFu.transpose() << '\n';
   ostr << "MFDX = " << MFDX.transpose() << '\n';
   ostr << "MSHp0 = " << MSHp0.transpose() << '\n';
   ostr << "MSHpp = " << MSHpp.transpose() << '\n';
   ostr << "MChiP = " << MChiP.transpose() << '\n';
   ostr << "MVG = " << MVG << '\n';
   ostr << "MVP = " << MVP << '\n';
   ostr << "MVWm = " << MVWm << '\n';

   ostr << "----------------------------------------\n"
           "tree-level DRbar mixing matrices:\n"
           "----------------------------------------\n";
   ostr << "ZD = " << ZD << '\n';
   ostr << "ZV = " << ZV << '\n';
   ostr << "ZU = " << ZU << '\n';
   ostr << "ZE = " << ZE << '\n';
   ostr << "ZDX = " << ZDX << '\n';
   ostr << "ZH = " << ZH << '\n';
   ostr << "ZA = " << ZA << '\n';
   ostr << "ZP = " << ZP << '\n';
   ostr << "ZN = " << ZN << '\n';
   ostr << "UM = " << UM << '\n';
   ostr << "UP = " << UP << '\n';
   ostr << "ZEL = " << ZEL << '\n';
   ostr << "ZER = " << ZER << '\n';
   ostr << "ZDL = " << ZDL << '\n';
   ostr << "ZDR = " << ZDR << '\n';
   ostr << "ZUL = " << ZUL << '\n';
   ostr << "ZUR = " << ZUR << '\n';
   ostr << "ZDXL = " << ZDXL << '\n';
   ostr << "ZDXR = " << ZDXR << '\n';
   ostr << "UHp0 = " << UHp0 << '\n';
   ostr << "UHpp = " << UHpp << '\n';
   ostr << "ZNp = " << ZNp << '\n';

   physical.print(ostr);
}

double CLASSNAME::A0(double m) const
{
   return passarino_veltman::ReA0(m*m, Sqr(get_scale()));
}

double CLASSNAME::B0(double p, double m1, double m2) const
{
   return passarino_veltman::ReB0(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CLASSNAME::B1(double p, double m1, double m2) const
{
   return passarino_veltman::ReB1(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CLASSNAME::B00(double p, double m1, double m2) const
{
   return passarino_veltman::ReB00(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CLASSNAME::B22(double p, double m1, double m2) const
{
   return passarino_veltman::ReB22(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CLASSNAME::H0(double p, double m1, double m2) const
{
   return passarino_veltman::ReH0(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CLASSNAME::F0(double p, double m1, double m2) const
{
   return passarino_veltman::ReF0(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CLASSNAME::G0(double p, double m1, double m2) const
{
   return passarino_veltman::ReG0(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

void CLASSNAME::calculate_DRbar_parameters()
{
   const auto old_mHd2 = mHd2;
   const auto old_mHu2 = mHu2;
   const auto old_ms2 = ms2;
   const auto old_msbar2 = msbar2;
   const auto old_mphi2 = mphi2;

   solve_ewsb_tree_level_via_soft_higgs_masses();

   calculate_MVZ();
   calculate_MVZp();
   calculate_MVG();
   calculate_MVP();
   calculate_MVWm();
   calculate_MGlu();
   calculate_MFv();
   calculate_MChaP();
   calculate_MSd();
   calculate_MSv();
   calculate_MSu();
   calculate_MSe();
   calculate_MSDX();
   calculate_Mhh();
   calculate_MAh();
   calculate_MHpm();
   calculate_MChi();
   calculate_MCha();
   calculate_MFe();
   calculate_MFd();
   calculate_MFu();
   calculate_MFDX();
   calculate_MSHp0();
   calculate_MSHpp();
   calculate_MChiP();
   mHd2 = old_mHd2;
   mHu2 = old_mHu2;
   ms2 = old_ms2;
   msbar2 = old_msbar2;
   mphi2 = old_mphi2;
   
}

void CLASSNAME::calculate_pole_masses()
{
#ifdef ENABLE_THREADS
   thread_exception = 0;
   std::thread thread_MGlu(Thread(this, &CLASSNAME::calculate_MGlu_pole));
   std::thread thread_MChaP(Thread(this, &CLASSNAME::calculate_MChaP_pole));
   std::thread thread_MVZp(Thread(this, &CLASSNAME::calculate_MVZp_pole));
   std::thread thread_MSd(Thread(this, &CLASSNAME::calculate_MSd_pole));
   std::thread thread_MSv(Thread(this, &CLASSNAME::calculate_MSv_pole));
   std::thread thread_MSu(Thread(this, &CLASSNAME::calculate_MSu_pole));
   std::thread thread_MSe(Thread(this, &CLASSNAME::calculate_MSe_pole));
   std::thread thread_MSDX(Thread(this, &CLASSNAME::calculate_MSDX_pole));
   std::thread thread_Mhh(Thread(this, &CLASSNAME::calculate_Mhh_pole));
   std::thread thread_MAh(Thread(this, &CLASSNAME::calculate_MAh_pole));
   std::thread thread_MHpm(Thread(this, &CLASSNAME::calculate_MHpm_pole));
   std::thread thread_MChi(Thread(this, &CLASSNAME::calculate_MChi_pole));
   std::thread thread_MCha(Thread(this, &CLASSNAME::calculate_MCha_pole));
   std::thread thread_MFDX(Thread(this, &CLASSNAME::calculate_MFDX_pole));
   std::thread thread_MSHp0(Thread(this, &CLASSNAME::calculate_MSHp0_pole));
   std::thread thread_MSHpp(Thread(this, &CLASSNAME::calculate_MSHpp_pole));
   std::thread thread_MChiP(Thread(this, &CLASSNAME::calculate_MChiP_pole));

   if (calculate_sm_pole_masses) {
      std::thread thread_MFd(Thread(this, &CLASSNAME::calculate_MFd_pole));
      std::thread thread_MFe(Thread(this, &CLASSNAME::calculate_MFe_pole));
      std::thread thread_MFu(Thread(this, &CLASSNAME::calculate_MFu_pole));
      std::thread thread_MFv(Thread(this, &CLASSNAME::calculate_MFv_pole));
      std::thread thread_MVG(Thread(this, &CLASSNAME::calculate_MVG_pole));
      std::thread thread_MVP(Thread(this, &CLASSNAME::calculate_MVP_pole));
      std::thread thread_MVWm(Thread(this, &CLASSNAME::calculate_MVWm_pole));
      std::thread thread_MVZ(Thread(this, &CLASSNAME::calculate_MVZ_pole));
      thread_MFd.join();
      thread_MFe.join();
      thread_MFu.join();
      thread_MFv.join();
      thread_MVG.join();
      thread_MVP.join();
      thread_MVWm.join();
      thread_MVZ.join();
   }

   thread_MGlu.join();
   thread_MChaP.join();
   thread_MVZp.join();
   thread_MSd.join();
   thread_MSv.join();
   thread_MSu.join();
   thread_MSe.join();
   thread_MSDX.join();
   thread_Mhh.join();
   thread_MAh.join();
   thread_MHpm.join();
   thread_MChi.join();
   thread_MCha.join();
   thread_MFDX.join();
   thread_MSHp0.join();
   thread_MSHpp.join();
   thread_MChiP.join();


   if (thread_exception != 0)
      std::rethrow_exception(thread_exception);
#else
   calculate_MGlu_pole();
   calculate_MChaP_pole();
   calculate_MVZp_pole();
   calculate_MSd_pole();
   calculate_MSv_pole();
   calculate_MSu_pole();
   calculate_MSe_pole();
   calculate_MSDX_pole();
   calculate_Mhh_pole();
   calculate_MAh_pole();
   calculate_MHpm_pole();
   calculate_MChi_pole();
   calculate_MCha_pole();
   calculate_MFDX_pole();
   calculate_MSHp0_pole();
   calculate_MSHpp_pole();
   calculate_MChiP_pole();

   if (calculate_sm_pole_masses) {
      calculate_MFd_pole();
      calculate_MFe_pole();
      calculate_MFu_pole();
      calculate_MFv_pole();
      calculate_MVG_pole();
      calculate_MVP_pole();
      calculate_MVWm_pole();
      calculate_MVZ_pole();
   }

#endif
}

void CLASSNAME::copy_DRbar_masses_to_pole_masses()
{
   PHYSICAL(MGlu) = MGlu;
   PHYSICAL(MFv) = MFv;
   PHYSICAL(MChaP) = MChaP;
   PHYSICAL(MVZ) = MVZ;
   PHYSICAL(MVZp) = MVZp;
   PHYSICAL(MSd) = MSd;
   PHYSICAL(ZD) = ZD;
   PHYSICAL(MSv) = MSv;
   PHYSICAL(ZV) = ZV;
   PHYSICAL(MSu) = MSu;
   PHYSICAL(ZU) = ZU;
   PHYSICAL(MSe) = MSe;
   PHYSICAL(ZE) = ZE;
   PHYSICAL(MSDX) = MSDX;
   PHYSICAL(ZDX) = ZDX;
   PHYSICAL(Mhh) = Mhh;
   PHYSICAL(ZH) = ZH;
   PHYSICAL(MAh) = MAh;
   PHYSICAL(ZA) = ZA;
   PHYSICAL(MHpm) = MHpm;
   PHYSICAL(ZP) = ZP;
   PHYSICAL(MChi) = MChi;
   PHYSICAL(ZN) = ZN;
   PHYSICAL(MCha) = MCha;
   PHYSICAL(UM) = UM;
   PHYSICAL(UP) = UP;
   PHYSICAL(MFe) = MFe;
   PHYSICAL(ZEL) = ZEL;
   PHYSICAL(ZER) = ZER;
   PHYSICAL(MFd) = MFd;
   PHYSICAL(ZDL) = ZDL;
   PHYSICAL(ZDR) = ZDR;
   PHYSICAL(MFu) = MFu;
   PHYSICAL(ZUL) = ZUL;
   PHYSICAL(ZUR) = ZUR;
   PHYSICAL(MFDX) = MFDX;
   PHYSICAL(ZDXL) = ZDXL;
   PHYSICAL(ZDXR) = ZDXR;
   PHYSICAL(MSHp0) = MSHp0;
   PHYSICAL(UHp0) = UHp0;
   PHYSICAL(MSHpp) = MSHpp;
   PHYSICAL(UHpp) = UHpp;
   PHYSICAL(MChiP) = MChiP;
   PHYSICAL(ZNp) = ZNp;
   PHYSICAL(MVG) = MVG;
   PHYSICAL(MVP) = MVP;
   PHYSICAL(MVWm) = MVWm;

}

void CLASSNAME::reorder_DRbar_masses()
{
   move_goldstone_to(0, MVZ, MAh, ZA);
   move_goldstone_to(1, MVZp, MAh, ZA);
   move_goldstone_to(0, MVWm, MHpm, ZP);

}

void CLASSNAME::reorder_pole_masses()
{
   move_goldstone_to(0, MVZ, PHYSICAL(MAh), PHYSICAL(ZA));
   move_goldstone_to(1, MVZp, PHYSICAL(MAh), PHYSICAL(ZA));
   move_goldstone_to(0, MVWm, PHYSICAL(MHpm), PHYSICAL(ZP));
}

void CLASSNAME::calculate_spectrum()
{
   calculate_DRbar_parameters();
   if (pole_mass_loop_order > 0)
      calculate_pole_masses();
 
   // move goldstone bosons to the front
   reorder_DRbar_masses();
    if(pole_mass_loop_order == 0) 
       copy_DRbar_masses_to_pole_masses();
    if (pole_mass_loop_order > 0){
       reorder_pole_masses();
    }
   if (problems.have_serious_problem()) {
      clear_DRbar_parameters();
      physical.clear();
   }
}

void CLASSNAME::clear_DRbar_parameters()
{
   MGlu = 0.0;
   MFv = Eigen::Array<double,3,1>::Zero();
   MChaP = 0.0;
   MVZ = 0.0;
   MVZp = 0.0;
   MSd = Eigen::Array<double,6,1>::Zero();
   ZD = Eigen::Matrix<double,6,6>::Zero();
   MSv = Eigen::Array<double,3,1>::Zero();
   ZV = Eigen::Matrix<double,3,3>::Zero();
   MSu = Eigen::Array<double,6,1>::Zero();
   ZU = Eigen::Matrix<double,6,6>::Zero();
   MSe = Eigen::Array<double,6,1>::Zero();
   ZE = Eigen::Matrix<double,6,6>::Zero();
   MSDX = Eigen::Array<double,6,1>::Zero();
   ZDX = Eigen::Matrix<double,6,6>::Zero();
   Mhh = Eigen::Array<double,5,1>::Zero();
   ZH = Eigen::Matrix<double,5,5>::Zero();
   MAh = Eigen::Array<double,5,1>::Zero();
   ZA = Eigen::Matrix<double,5,5>::Zero();
   MHpm = Eigen::Array<double,2,1>::Zero();
   ZP = Eigen::Matrix<double,2,2>::Zero();
   MChi = Eigen::Array<double,8,1>::Zero();
   ZN = Eigen::Matrix<std::complex<double>,8,8>::Zero();
   MCha = Eigen::Array<double,2,1>::Zero();
   UM = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   UP = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   MFe = Eigen::Array<double,3,1>::Zero();
   ZEL = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   ZER = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   MFd = Eigen::Array<double,3,1>::Zero();
   ZDL = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   ZDR = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   MFu = Eigen::Array<double,3,1>::Zero();
   ZUL = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   ZUR = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   MFDX = Eigen::Array<double,3,1>::Zero();
   ZDXL = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   ZDXR = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   MSHp0 = Eigen::Array<double,2,1>::Zero();
   UHp0 = Eigen::Matrix<double,2,2>::Zero();
   MSHpp = Eigen::Array<double,2,1>::Zero();
   UHpp = Eigen::Matrix<double,2,2>::Zero();
   MChiP = Eigen::Array<double,2,1>::Zero();
   ZNp = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   MVG = 0.0;
   MVP = 0.0;
   MVWm = 0.0;

   PhaseGlu = std::complex<double>(1.,0.);

}

void CLASSNAME::clear()
{
   NE6SSM_soft_parameters::clear();
   clear_DRbar_parameters();
   physical.clear();
   problems.clear();
}

std::string CLASSNAME::name() const
{
   return "NE6SSM";
}

void CLASSNAME::run_to(double scale, double eps)
{
   if (eps < 0.0)
      eps = precision;
   NE6SSM_soft_parameters::run_to(scale, eps);
}



void CLASSNAME::calculate_MGlu()
{
   MGlu = MassG;

   if (MGlu < 0.) {
      MGlu *= -1;
      PhaseGlu = std::complex<double>(0., 1.);
   }
}

void CLASSNAME::calculate_MFv()
{
   MFv.setConstant(0);
}

void CLASSNAME::calculate_MChaP()
{
   MChaP = MuPr;
}

void CLASSNAME::calculate_MVZ()
{
   const auto QS = LOCALINPUT(QS);

   MVZ = 0.25*(0.9797958971132712*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin
      (ThetaWp())*Sqr(vu) + 0.31622776601683794*g1p*g2*Cos(ThetaW())*Sin(2*
      ThetaWp())*(-3*Sqr(vd) + 2*Sqr(vu)) + 0.7745966692414834*g1*Sin(ThetaW())
      *(2*g2*Cos(ThetaW()) + 0.7745966692414834*g1*Sin(ThetaW()))*(Sqr(vd) +
      Sqr(vu))*Sqr(Cos(ThetaWp())) + Sqr(g2)*(Sqr(vd) + Sqr(vu))*Sqr(Cos(ThetaW
      ()))*Sqr(Cos(ThetaWp())) + 0.31622776601683794*g1p*(-2.32379000772445*g1*
      Sin(ThetaW())*Sin(2*ThetaWp())*Sqr(vd) + 0.31622776601683794*g1p*(9*Sqr(
      vd) + Sqr(QS)*(Sqr(vs) + Sqr(vsb)) + 4*Sqr(vu))*Sqr(Sin(ThetaWp()))));

   if (MVZ < 0.)
      problems.flag_tachyon(VZ);
   else
      problems.unflag_tachyon(VZ);

   MVZ = AbsSqrt(MVZ);
}

void CLASSNAME::calculate_MVZp()
{
   const auto QS = LOCALINPUT(QS);

   MVZp = 0.25*((g2*Cos(ThetaW()) + 0.7745966692414834*g1*Sin(ThetaW()))*
      Sin(ThetaWp())*(0.6324555320336759*g1p*Cos(ThetaWp())*(3*Sqr(vd) - 2*Sqr(
      vu)) + (g2*Cos(ThetaW()) + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(
      ThetaWp())*(Sqr(vd) + Sqr(vu))) + 0.1*Sqr(g1p)*(9*Sqr(vd) + Sqr(QS)*(Sqr(
      vs) + Sqr(vsb)) + 4*Sqr(vu))*Sqr(Cos(ThetaWp())));

   if (MVZp < 0.)
      problems.flag_tachyon(VZp);
   else
      problems.unflag_tachyon(VZp);

   MVZp = AbsSqrt(MVZp);
}

Eigen::Matrix<double,6,6> CLASSNAME::get_mass_matrix_Sd() const
{
   const auto QS = LOCALINPUT(QS);

   Eigen::Matrix<double,6,6> mass_matrix_Sd;
   mass_matrix_Sd(0,0) = mq2(0,0) + 0.5*AbsSqr(Yd(0,0))*Sqr(vd) - 0.025*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) +
      0.0125*QS*Sqr(g1p)*Sqr(vs) - 0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.025*Sqr(g1)*
      Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Sd(0,1) = mq2(0,1);
   mass_matrix_Sd(0,2) = mq2(0,2);
   mass_matrix_Sd(0,3) = 0.7071067811865475*vd*Conj(TYd(0,0)) - 0.5*vs*vu
      *Conj(Yd(0,0))*Lambdax;
   mass_matrix_Sd(0,4) = 0;
   mass_matrix_Sd(0,5) = 0;
   mass_matrix_Sd(1,0) = Conj(mass_matrix_Sd(0,1));
   mass_matrix_Sd(1,1) = mq2(1,1) + 0.5*AbsSqr(Yd(1,1))*Sqr(vd) - 0.025*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) +
      0.0125*QS*Sqr(g1p)*Sqr(vs) - 0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.025*Sqr(g1)*
      Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Sd(1,2) = mq2(1,2);
   mass_matrix_Sd(1,3) = 0;
   mass_matrix_Sd(1,4) = 0.7071067811865475*vd*Conj(TYd(1,1)) - 0.5*vs*vu
      *Conj(Yd(1,1))*Lambdax;
   mass_matrix_Sd(1,5) = 0;
   mass_matrix_Sd(2,0) = Conj(mass_matrix_Sd(0,2));
   mass_matrix_Sd(2,1) = Conj(mass_matrix_Sd(1,2));
   mass_matrix_Sd(2,2) = mq2(2,2) + 0.5*AbsSqr(Yd(2,2))*Sqr(vd) - 0.025*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) +
      0.0125*QS*Sqr(g1p)*Sqr(vs) - 0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.025*Sqr(g1)*
      Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Sd(2,3) = 0;
   mass_matrix_Sd(2,4) = 0;
   mass_matrix_Sd(2,5) = 0.7071067811865475*vd*Conj(TYd(2,2)) - 0.5*vs*vu
      *Conj(Yd(2,2))*Lambdax;
   mass_matrix_Sd(3,0) = Conj(mass_matrix_Sd(0,3));
   mass_matrix_Sd(3,1) = Conj(mass_matrix_Sd(1,3));
   mass_matrix_Sd(3,2) = Conj(mass_matrix_Sd(2,3));
   mass_matrix_Sd(3,3) = md2(0,0) + 0.5*AbsSqr(Yd(0,0))*Sqr(vd) - 0.05*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs) -
      0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.05*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu)
      ;
   mass_matrix_Sd(3,4) = md2(0,1);
   mass_matrix_Sd(3,5) = md2(0,2);
   mass_matrix_Sd(4,0) = Conj(mass_matrix_Sd(0,4));
   mass_matrix_Sd(4,1) = Conj(mass_matrix_Sd(1,4));
   mass_matrix_Sd(4,2) = Conj(mass_matrix_Sd(2,4));
   mass_matrix_Sd(4,3) = Conj(mass_matrix_Sd(3,4));
   mass_matrix_Sd(4,4) = md2(1,1) + 0.5*AbsSqr(Yd(1,1))*Sqr(vd) - 0.05*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs) -
      0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.05*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu)
      ;
   mass_matrix_Sd(4,5) = md2(1,2);
   mass_matrix_Sd(5,0) = Conj(mass_matrix_Sd(0,5));
   mass_matrix_Sd(5,1) = Conj(mass_matrix_Sd(1,5));
   mass_matrix_Sd(5,2) = Conj(mass_matrix_Sd(2,5));
   mass_matrix_Sd(5,3) = Conj(mass_matrix_Sd(3,5));
   mass_matrix_Sd(5,4) = Conj(mass_matrix_Sd(4,5));
   mass_matrix_Sd(5,5) = md2(2,2) + 0.5*AbsSqr(Yd(2,2))*Sqr(vd) - 0.05*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs) -
      0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.05*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu)
      ;

   return mass_matrix_Sd;
}

void CLASSNAME::calculate_MSd()
{
   const auto mass_matrix_Sd(get_mass_matrix_Sd());
   fs_diagonalize_hermitian(mass_matrix_Sd, MSd, ZD);

   if (MSd.minCoeff() < 0.)
      problems.flag_tachyon(Sd);
   else
      problems.unflag_tachyon(Sd);

   MSd = AbsSqrt(MSd);
}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_Sv() const
{
   const auto QS = LOCALINPUT(QS);

   Eigen::Matrix<double,3,3> mass_matrix_Sv;
   mass_matrix_Sv(0,0) = ml2(0,0) + 0.075*Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p
      )*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*
      Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu) - 0.125
      *Sqr(g2)*Sqr(vu);
   mass_matrix_Sv(0,1) = ml2(0,1);
   mass_matrix_Sv(0,2) = ml2(0,2);
   mass_matrix_Sv(1,0) = Conj(mass_matrix_Sv(0,1));
   mass_matrix_Sv(1,1) = ml2(1,1) + 0.075*Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p
      )*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*
      Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu) - 0.125
      *Sqr(g2)*Sqr(vu);
   mass_matrix_Sv(1,2) = ml2(1,2);
   mass_matrix_Sv(2,0) = Conj(mass_matrix_Sv(0,2));
   mass_matrix_Sv(2,1) = Conj(mass_matrix_Sv(1,2));
   mass_matrix_Sv(2,2) = ml2(2,2) + 0.075*Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p
      )*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*
      Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu) - 0.125
      *Sqr(g2)*Sqr(vu);

   return mass_matrix_Sv;
}

void CLASSNAME::calculate_MSv()
{
   const auto mass_matrix_Sv(get_mass_matrix_Sv());
   fs_diagonalize_hermitian(mass_matrix_Sv, MSv, ZV);

   if (MSv.minCoeff() < 0.)
      problems.flag_tachyon(Sv);
   else
      problems.unflag_tachyon(Sv);

   MSv = AbsSqrt(MSv);
}

Eigen::Matrix<double,6,6> CLASSNAME::get_mass_matrix_Su() const
{
   const auto QS = LOCALINPUT(QS);

   Eigen::Matrix<double,6,6> mass_matrix_Su;
   mass_matrix_Su(0,0) = mq2(0,0) - 0.025*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(
      g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) -
      0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.5*AbsSqr(Yu(0,0))*Sqr(vu) + 0.025*Sqr(g1)
      *Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Su(0,1) = mq2(0,1);
   mass_matrix_Su(0,2) = mq2(0,2);
   mass_matrix_Su(0,3) = 0.7071067811865475*vu*Conj(TYu(0,0)) - 0.5*vd*vs
      *Conj(Yu(0,0))*Lambdax;
   mass_matrix_Su(0,4) = 0;
   mass_matrix_Su(0,5) = 0;
   mass_matrix_Su(1,0) = Conj(mass_matrix_Su(0,1));
   mass_matrix_Su(1,1) = mq2(1,1) - 0.025*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(
      g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) -
      0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.5*AbsSqr(Yu(1,1))*Sqr(vu) + 0.025*Sqr(g1)
      *Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Su(1,2) = mq2(1,2);
   mass_matrix_Su(1,3) = 0;
   mass_matrix_Su(1,4) = 0.7071067811865475*vu*Conj(TYu(1,1)) - 0.5*vd*vs
      *Conj(Yu(1,1))*Lambdax;
   mass_matrix_Su(1,5) = 0;
   mass_matrix_Su(2,0) = Conj(mass_matrix_Su(0,2));
   mass_matrix_Su(2,1) = Conj(mass_matrix_Su(1,2));
   mass_matrix_Su(2,2) = mq2(2,2) - 0.025*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(
      g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) -
      0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.5*AbsSqr(Yu(2,2))*Sqr(vu) + 0.025*Sqr(g1)
      *Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Su(2,3) = 0;
   mass_matrix_Su(2,4) = 0;
   mass_matrix_Su(2,5) = 0.7071067811865475*vu*Conj(TYu(2,2)) - 0.5*vd*vs
      *Conj(Yu(2,2))*Lambdax;
   mass_matrix_Su(3,0) = Conj(mass_matrix_Su(0,3));
   mass_matrix_Su(3,1) = Conj(mass_matrix_Su(1,3));
   mass_matrix_Su(3,2) = Conj(mass_matrix_Su(2,3));
   mass_matrix_Su(3,3) = mu2(0,0) + 0.1*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)
      *Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) - 0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.5
      *AbsSqr(Yu(0,0))*Sqr(vu) - 0.1*Sqr(g1)*Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu);
   mass_matrix_Su(3,4) = mu2(0,1);
   mass_matrix_Su(3,5) = mu2(0,2);
   mass_matrix_Su(4,0) = Conj(mass_matrix_Su(0,4));
   mass_matrix_Su(4,1) = Conj(mass_matrix_Su(1,4));
   mass_matrix_Su(4,2) = Conj(mass_matrix_Su(2,4));
   mass_matrix_Su(4,3) = Conj(mass_matrix_Su(3,4));
   mass_matrix_Su(4,4) = mu2(1,1) + 0.1*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)
      *Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) - 0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.5
      *AbsSqr(Yu(1,1))*Sqr(vu) - 0.1*Sqr(g1)*Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu);
   mass_matrix_Su(4,5) = mu2(1,2);
   mass_matrix_Su(5,0) = Conj(mass_matrix_Su(0,5));
   mass_matrix_Su(5,1) = Conj(mass_matrix_Su(1,5));
   mass_matrix_Su(5,2) = Conj(mass_matrix_Su(2,5));
   mass_matrix_Su(5,3) = Conj(mass_matrix_Su(3,5));
   mass_matrix_Su(5,4) = Conj(mass_matrix_Su(4,5));
   mass_matrix_Su(5,5) = mu2(2,2) + 0.1*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)
      *Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) - 0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.5
      *AbsSqr(Yu(2,2))*Sqr(vu) - 0.1*Sqr(g1)*Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu);

   return mass_matrix_Su;
}

void CLASSNAME::calculate_MSu()
{
   const auto mass_matrix_Su(get_mass_matrix_Su());
   fs_diagonalize_hermitian(mass_matrix_Su, MSu, ZU);

   if (MSu.minCoeff() < 0.)
      problems.flag_tachyon(Su);
   else
      problems.unflag_tachyon(Su);

   MSu = AbsSqrt(MSu);
}

Eigen::Matrix<double,6,6> CLASSNAME::get_mass_matrix_Se() const
{
   const auto QS = LOCALINPUT(QS);

   Eigen::Matrix<double,6,6> mass_matrix_Se;
   mass_matrix_Se(0,0) = ml2(0,0) + 0.5*AbsSqr(Ye(0,0))*Sqr(vd) + 0.075*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.025*
      QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu)
      - 0.05*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Se(0,1) = ml2(0,1);
   mass_matrix_Se(0,2) = ml2(0,2);
   mass_matrix_Se(0,3) = 0.7071067811865475*vd*Conj(TYe(0,0)) - 0.5*vs*vu
      *Conj(Ye(0,0))*Lambdax;
   mass_matrix_Se(0,4) = 0;
   mass_matrix_Se(0,5) = 0;
   mass_matrix_Se(1,0) = Conj(mass_matrix_Se(0,1));
   mass_matrix_Se(1,1) = ml2(1,1) + 0.5*AbsSqr(Ye(1,1))*Sqr(vd) + 0.075*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.025*
      QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu)
      - 0.05*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Se(1,2) = ml2(1,2);
   mass_matrix_Se(1,3) = 0;
   mass_matrix_Se(1,4) = 0.7071067811865475*vd*Conj(TYe(1,1)) - 0.5*vs*vu
      *Conj(Ye(1,1))*Lambdax;
   mass_matrix_Se(1,5) = 0;
   mass_matrix_Se(2,0) = Conj(mass_matrix_Se(0,2));
   mass_matrix_Se(2,1) = Conj(mass_matrix_Se(1,2));
   mass_matrix_Se(2,2) = ml2(2,2) + 0.5*AbsSqr(Ye(2,2))*Sqr(vd) + 0.075*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.025*
      QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu)
      - 0.05*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Se(2,3) = 0;
   mass_matrix_Se(2,4) = 0;
   mass_matrix_Se(2,5) = 0.7071067811865475*vd*Conj(TYe(2,2)) - 0.5*vs*vu
      *Conj(Ye(2,2))*Lambdax;
   mass_matrix_Se(3,0) = Conj(mass_matrix_Se(0,3));
   mass_matrix_Se(3,1) = Conj(mass_matrix_Se(1,3));
   mass_matrix_Se(3,2) = Conj(mass_matrix_Se(2,3));
   mass_matrix_Se(3,3) = me2(0,0) + 0.5*AbsSqr(Ye(0,0))*Sqr(vd) - 0.15*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)*Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) -
      0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.15*Sqr(g1)*Sqr(vu) - 0.025*Sqr(g1p)*Sqr(
      vu);
   mass_matrix_Se(3,4) = me2(0,1);
   mass_matrix_Se(3,5) = me2(0,2);
   mass_matrix_Se(4,0) = Conj(mass_matrix_Se(0,4));
   mass_matrix_Se(4,1) = Conj(mass_matrix_Se(1,4));
   mass_matrix_Se(4,2) = Conj(mass_matrix_Se(2,4));
   mass_matrix_Se(4,3) = Conj(mass_matrix_Se(3,4));
   mass_matrix_Se(4,4) = me2(1,1) + 0.5*AbsSqr(Ye(1,1))*Sqr(vd) - 0.15*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)*Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) -
      0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.15*Sqr(g1)*Sqr(vu) - 0.025*Sqr(g1p)*Sqr(
      vu);
   mass_matrix_Se(4,5) = me2(1,2);
   mass_matrix_Se(5,0) = Conj(mass_matrix_Se(0,5));
   mass_matrix_Se(5,1) = Conj(mass_matrix_Se(1,5));
   mass_matrix_Se(5,2) = Conj(mass_matrix_Se(2,5));
   mass_matrix_Se(5,3) = Conj(mass_matrix_Se(3,5));
   mass_matrix_Se(5,4) = Conj(mass_matrix_Se(4,5));
   mass_matrix_Se(5,5) = me2(2,2) + 0.5*AbsSqr(Ye(2,2))*Sqr(vd) - 0.15*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)*Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) -
      0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.15*Sqr(g1)*Sqr(vu) - 0.025*Sqr(g1p)*Sqr(
      vu);

   return mass_matrix_Se;
}

void CLASSNAME::calculate_MSe()
{
   const auto mass_matrix_Se(get_mass_matrix_Se());
   fs_diagonalize_hermitian(mass_matrix_Se, MSe, ZE);

   if (MSe.minCoeff() < 0.)
      problems.flag_tachyon(Se);
   else
      problems.unflag_tachyon(Se);

   MSe = AbsSqrt(MSe);
}

Eigen::Matrix<double,6,6> CLASSNAME::get_mass_matrix_SDX() const
{
   const auto QS = LOCALINPUT(QS);

   Eigen::Matrix<double,6,6> mass_matrix_SDX;
   mass_matrix_SDX(0,0) = mDx2(0,0) + 0.05*Sqr(g1)*Sqr(vd) + 0.075*Sqr(
      g1p)*Sqr(vd) + 0.5*AbsSqr(Kappa(0,0))*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vs)
      + 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.05*Sqr(g1)*Sqr(vu) + 0.05*Sqr(g1p)*Sqr(
      vu);
   mass_matrix_SDX(0,1) = 0;
   mass_matrix_SDX(0,2) = 0;
   mass_matrix_SDX(0,3) = 0.7071067811865475*vs*Conj(TKappa(0,0)) - 0.5*
      vd*vu*Conj(Kappa(0,0))*Lambdax - 0.5*vphi*vsb*Conj(Kappa(0,0))*Sigmax;
   mass_matrix_SDX(0,4) = 0;
   mass_matrix_SDX(0,5) = 0;
   mass_matrix_SDX(1,0) = Conj(mass_matrix_SDX(0,1));
   mass_matrix_SDX(1,1) = mDx2(1,1) + 0.05*Sqr(g1)*Sqr(vd) + 0.075*Sqr(
      g1p)*Sqr(vd) + 0.5*AbsSqr(Kappa(1,1))*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vs)
      + 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.05*Sqr(g1)*Sqr(vu) + 0.05*Sqr(g1p)*Sqr(
      vu);
   mass_matrix_SDX(1,2) = 0;
   mass_matrix_SDX(1,3) = 0;
   mass_matrix_SDX(1,4) = 0.7071067811865475*vs*Conj(TKappa(1,1)) - 0.5*
      vd*vu*Conj(Kappa(1,1))*Lambdax - 0.5*vphi*vsb*Conj(Kappa(1,1))*Sigmax;
   mass_matrix_SDX(1,5) = 0;
   mass_matrix_SDX(2,0) = Conj(mass_matrix_SDX(0,2));
   mass_matrix_SDX(2,1) = Conj(mass_matrix_SDX(1,2));
   mass_matrix_SDX(2,2) = mDx2(2,2) + 0.05*Sqr(g1)*Sqr(vd) + 0.075*Sqr(
      g1p)*Sqr(vd) + 0.5*AbsSqr(Kappa(2,2))*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vs)
      + 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.05*Sqr(g1)*Sqr(vu) + 0.05*Sqr(g1p)*Sqr(
      vu);
   mass_matrix_SDX(2,3) = 0;
   mass_matrix_SDX(2,4) = 0;
   mass_matrix_SDX(2,5) = 0.7071067811865475*vs*Conj(TKappa(2,2)) - 0.5*
      vd*vu*Conj(Kappa(2,2))*Lambdax - 0.5*vphi*vsb*Conj(Kappa(2,2))*Sigmax;
   mass_matrix_SDX(3,0) = Conj(mass_matrix_SDX(0,3));
   mass_matrix_SDX(3,1) = Conj(mass_matrix_SDX(1,3));
   mass_matrix_SDX(3,2) = Conj(mass_matrix_SDX(2,3));
   mass_matrix_SDX(3,3) = mDxbar2(0,0) - 0.05*Sqr(g1)*Sqr(vd) + 0.1125*
      Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr(Kappa(0,0))*Sqr(vs) - 0.0375*QS*Sqr(g1p)*
      Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) + 0.05*Sqr(g1)*Sqr(vu) + 0.075*Sqr(
      g1p)*Sqr(vu);
   mass_matrix_SDX(3,4) = 0;
   mass_matrix_SDX(3,5) = 0;
   mass_matrix_SDX(4,0) = Conj(mass_matrix_SDX(0,4));
   mass_matrix_SDX(4,1) = Conj(mass_matrix_SDX(1,4));
   mass_matrix_SDX(4,2) = Conj(mass_matrix_SDX(2,4));
   mass_matrix_SDX(4,3) = Conj(mass_matrix_SDX(3,4));
   mass_matrix_SDX(4,4) = mDxbar2(1,1) - 0.05*Sqr(g1)*Sqr(vd) + 0.1125*
      Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr(Kappa(1,1))*Sqr(vs) - 0.0375*QS*Sqr(g1p)*
      Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) + 0.05*Sqr(g1)*Sqr(vu) + 0.075*Sqr(
      g1p)*Sqr(vu);
   mass_matrix_SDX(4,5) = 0;
   mass_matrix_SDX(5,0) = Conj(mass_matrix_SDX(0,5));
   mass_matrix_SDX(5,1) = Conj(mass_matrix_SDX(1,5));
   mass_matrix_SDX(5,2) = Conj(mass_matrix_SDX(2,5));
   mass_matrix_SDX(5,3) = Conj(mass_matrix_SDX(3,5));
   mass_matrix_SDX(5,4) = Conj(mass_matrix_SDX(4,5));
   mass_matrix_SDX(5,5) = mDxbar2(2,2) - 0.05*Sqr(g1)*Sqr(vd) + 0.1125*
      Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr(Kappa(2,2))*Sqr(vs) - 0.0375*QS*Sqr(g1p)*
      Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) + 0.05*Sqr(g1)*Sqr(vu) + 0.075*Sqr(
      g1p)*Sqr(vu);

   return mass_matrix_SDX;
}

void CLASSNAME::calculate_MSDX()
{
   const auto mass_matrix_SDX(get_mass_matrix_SDX());
   fs_diagonalize_hermitian(mass_matrix_SDX, MSDX, ZDX);

   if (MSDX.minCoeff() < 0.)
      problems.flag_tachyon(SDX);
   else
      problems.unflag_tachyon(SDX);

   MSDX = AbsSqrt(MSDX);
}

Eigen::Matrix<double,5,5> CLASSNAME::get_mass_matrix_hh() const
{
   const auto QS = LOCALINPUT(QS);

   Eigen::Matrix<double,5,5> mass_matrix_hh;
   mass_matrix_hh(0,0) = mHd2 + 0.225*Sqr(g1)*Sqr(vd) + 0.3375*Sqr(g1p)*
      Sqr(vd) + 0.375*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambdax)*Sqr(vs) - 0.0375*QS
      *Sqr(g1p)*Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) + 0.5*AbsSqr(Lambdax)*Sqr
      (vu) - 0.075*Sqr(g1)*Sqr(vu) + 0.075*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr
      (vu);
   mass_matrix_hh(0,1) = vd*vu*AbsSqr(Lambdax) - 0.35355339059327373*vs*
      Conj(TLambdax) + 0.25*vphi*vsb*Conj(Sigmax)*Lambdax + 0.25*vphi*vsb*Conj(
      Lambdax)*Sigmax - 0.15*vd*vu*Sqr(g1) + 0.15*vd*vu*Sqr(g1p) - 0.25*vd*vu*
      Sqr(g2) - 0.35355339059327373*vs*TLambdax;
   mass_matrix_hh(0,2) = vd*vs*AbsSqr(Lambdax) - 0.35355339059327373*vu*
      Conj(TLambdax) - 0.075*QS*vd*vs*Sqr(g1p) - 0.35355339059327373*vu*
      TLambdax;
   mass_matrix_hh(0,3) = 0.25*vphi*vu*Conj(Sigmax)*Lambdax + 0.25*vphi*vu
      *Conj(Lambdax)*Sigmax + 0.075*QS*vd*vsb*Sqr(g1p);
   mass_matrix_hh(0,4) = 0.25*vsb*vu*Conj(Sigmax)*Lambdax + 0.25*vsb*vu*
      Conj(Lambdax)*Sigmax;
   mass_matrix_hh(1,0) = mass_matrix_hh(0,1);
   mass_matrix_hh(1,1) = mHu2 + 0.5*AbsSqr(Lambdax)*Sqr(vd) - 0.075*Sqr(
      g1)*Sqr(vd) + 0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr
      (Lambdax)*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vs) + 0.025*QS*Sqr(g1p)*Sqr(vsb
      ) + 0.225*Sqr(g1)*Sqr(vu) + 0.15*Sqr(g1p)*Sqr(vu) + 0.375*Sqr(g2)*Sqr(vu)
      ;
   mass_matrix_hh(1,2) = vs*vu*AbsSqr(Lambdax) - 0.35355339059327373*vd*
      Conj(TLambdax) - 0.05*QS*vs*vu*Sqr(g1p) - 0.35355339059327373*vd*TLambdax
      ;
   mass_matrix_hh(1,3) = 0.25*vd*vphi*Conj(Sigmax)*Lambdax + 0.25*vd*vphi
      *Conj(Lambdax)*Sigmax + 0.05*QS*vsb*vu*Sqr(g1p);
   mass_matrix_hh(1,4) = 0.25*vd*vsb*Conj(Sigmax)*Lambdax + 0.25*vd*vsb*
      Conj(Lambdax)*Sigmax;
   mass_matrix_hh(2,0) = mass_matrix_hh(0,2);
   mass_matrix_hh(2,1) = mass_matrix_hh(1,2);
   mass_matrix_hh(2,2) = ms2 + 0.5*AbsSqr(Lambdax)*Sqr(vd) - 0.0375*QS*
      Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr(Sigmax)*Sqr(vphi) + 0.0375*Sqr(g1p)*Sqr(QS)
      *Sqr(vs) + 0.5*AbsSqr(Sigmax)*Sqr(vsb) - 0.0125*Sqr(g1p)*Sqr(QS)*Sqr(vsb)
      + 0.5*AbsSqr(Lambdax)*Sqr(vu) - 0.025*QS*Sqr(g1p)*Sqr(vu);
   mass_matrix_hh(2,3) = vs*vsb*AbsSqr(Sigmax) - 0.35355339059327373*
      MuPhi*vphi*Conj(Sigmax) - 0.35355339059327373*vphi*Conj(TSigmax) - 0.5*
      Conj(Sigmax)*XiF - 0.35355339059327373*vphi*Conj(MuPhi)*Sigmax - 0.5*Conj
      (XiF)*Sigmax - 0.025*vs*vsb*Sqr(g1p)*Sqr(QS) - 0.25*Conj(Sigmax)*KappaPr*
      Sqr(vphi) - 0.25*Conj(KappaPr)*Sigmax*Sqr(vphi) - 0.35355339059327373*
      vphi*TSigmax;
   mass_matrix_hh(2,4) = vphi*vs*AbsSqr(Sigmax) - 0.35355339059327373*
      MuPhi*vsb*Conj(Sigmax) - 0.35355339059327373*vsb*Conj(TSigmax) - 0.5*vphi
      *vsb*Conj(Sigmax)*KappaPr - 0.35355339059327373*vsb*Conj(MuPhi)*Sigmax -
      0.5*vphi*vsb*Conj(KappaPr)*Sigmax - 0.35355339059327373*vsb*TSigmax;
   mass_matrix_hh(3,0) = mass_matrix_hh(0,3);
   mass_matrix_hh(3,1) = mass_matrix_hh(1,3);
   mass_matrix_hh(3,2) = mass_matrix_hh(2,3);
   mass_matrix_hh(3,3) = msbar2 + 0.0375*QS*Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr
      (Sigmax)*Sqr(vphi) + 0.5*AbsSqr(Sigmax)*Sqr(vs) - 0.0125*Sqr(g1p)*Sqr(QS)
      *Sqr(vs) + 0.0375*Sqr(g1p)*Sqr(QS)*Sqr(vsb) + 0.025*QS*Sqr(g1p)*Sqr(vu);
   mass_matrix_hh(3,4) = vphi*vsb*AbsSqr(Sigmax) - 0.35355339059327373*
      MuPhi*vs*Conj(Sigmax) - 0.35355339059327373*vs*Conj(TSigmax) - 0.5*vphi*
      vs*Conj(Sigmax)*KappaPr + 0.25*vd*vu*Conj(Sigmax)*Lambdax -
      0.35355339059327373*vs*Conj(MuPhi)*Sigmax - 0.5*vphi*vs*Conj(KappaPr)*
      Sigmax + 0.25*vd*vu*Conj(Lambdax)*Sigmax - 0.35355339059327373*vs*TSigmax
      ;
   mass_matrix_hh(4,0) = mass_matrix_hh(0,4);
   mass_matrix_hh(4,1) = mass_matrix_hh(1,4);
   mass_matrix_hh(4,2) = mass_matrix_hh(2,4);
   mass_matrix_hh(4,3) = mass_matrix_hh(3,4);
   mass_matrix_hh(4,4) = mphi2 + AbsSqr(MuPhi) + 0.5*BMuPhi + 0.5*Conj(
      BMuPhi) + 2.1213203435596424*MuPhi*vphi*Conj(KappaPr) +
      0.7071067811865475*vphi*Conj(TKappaPr) + 2.1213203435596424*vphi*Conj(
      MuPhi)*KappaPr + Conj(XiF)*KappaPr - 0.5*vs*vsb*Conj(Sigmax)*KappaPr +
      Conj(KappaPr)*XiF - 0.5*vs*vsb*Conj(KappaPr)*Sigmax + 3*AbsSqr(KappaPr)*
      Sqr(vphi) + 0.5*AbsSqr(Sigmax)*Sqr(vs) + 0.5*AbsSqr(Sigmax)*Sqr(vsb) +
      0.7071067811865475*vphi*TKappaPr;

   return mass_matrix_hh;
}

void CLASSNAME::calculate_Mhh()
{
   const auto mass_matrix_hh(get_mass_matrix_hh());
   fs_diagonalize_hermitian(mass_matrix_hh, Mhh, ZH);

   if (Mhh.minCoeff() < 0.)
      problems.flag_tachyon(hh);
   else
      problems.unflag_tachyon(hh);

   Mhh = AbsSqrt(Mhh);
}

Eigen::Matrix<double,5,5> CLASSNAME::get_mass_matrix_Ah() const
{
   const auto QS = LOCALINPUT(QS);

   Eigen::Matrix<double,5,5> mass_matrix_Ah;
   mass_matrix_Ah(0,0) = mHd2 + 0.075*Sqr(g1)*Sqr(vd) + 0.1125*Sqr(g1p)*
      Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambdax)*Sqr(vs) - 0.0375*QS
      *Sqr(g1p)*Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) + 0.5*AbsSqr(Lambdax)*Sqr
      (vu) - 0.075*Sqr(g1)*Sqr(vu) + 0.075*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr
      (vu) + 0.3872983346207417*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(vd)*Sqr(
      Cos(ThetaWp())) + 0.225*Sqr(g1p)*Sqr(vd)*Sqr(Cos(ThetaWp())) + 0.25*Sqr(
      g2)*Sqr(vd)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + 0.15*Sqr(g1)*Sqr(vd)
      *Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 0.3872983346207417*g1*g2*Cos(
      ThetaW())*Sin(ThetaW())*Sqr(vd)*Sqr(Sin(ThetaWp())) + 0.225*Sqr(g1p)*Sqr(
      vd)*Sqr(Sin(ThetaWp())) + 0.25*Sqr(g2)*Sqr(vd)*Sqr(Cos(ThetaW()))*Sqr(Sin
      (ThetaWp())) + 0.15*Sqr(g1)*Sqr(vd)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())
      );
   mass_matrix_Ah(0,1) = 0.35355339059327373*vs*Conj(TLambdax) - 0.25*
      vphi*vsb*Conj(Sigmax)*Lambdax - 0.25*vphi*vsb*Conj(Lambdax)*Sigmax -
      0.3872983346207417*g1*g2*vd*vu*Cos(ThetaW())*Sin(ThetaW())*Sqr(Cos(
      ThetaWp())) + 0.15*vd*vu*Sqr(g1p)*Sqr(Cos(ThetaWp())) - 0.25*vd*vu*Sqr(g2
      )*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) - 0.15*vd*vu*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW())) - 0.3872983346207417*g1*g2*vd*vu*Cos(
      ThetaW())*Sin(ThetaW())*Sqr(Sin(ThetaWp())) + 0.15*vd*vu*Sqr(g1p)*Sqr(Sin
      (ThetaWp())) - 0.25*vd*vu*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()))
      - 0.15*vd*vu*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())) +
      0.35355339059327373*vs*TLambdax;
   mass_matrix_Ah(0,2) = 0.35355339059327373*vu*Conj(TLambdax) - 0.075*QS
      *vd*vs*Sqr(g1p)*Sqr(Cos(ThetaWp())) - 0.075*QS*vd*vs*Sqr(g1p)*Sqr(Sin(
      ThetaWp())) + 0.35355339059327373*vu*TLambdax;
   mass_matrix_Ah(0,3) = 0.25*vphi*vu*Conj(Sigmax)*Lambdax + 0.25*vphi*vu
      *Conj(Lambdax)*Sigmax + 0.075*QS*vd*vsb*Sqr(g1p)*Sqr(Cos(ThetaWp())) +
      0.075*QS*vd*vsb*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   mass_matrix_Ah(0,4) = 0.25*vsb*vu*Conj(Sigmax)*Lambdax + 0.25*vsb*vu*
      Conj(Lambdax)*Sigmax;
   mass_matrix_Ah(1,0) = mass_matrix_Ah(0,1);
   mass_matrix_Ah(1,1) = mHu2 + 0.5*AbsSqr(Lambdax)*Sqr(vd) - 0.075*Sqr(
      g1)*Sqr(vd) + 0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr
      (Lambdax)*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vs) + 0.025*QS*Sqr(g1p)*Sqr(vsb
      ) + 0.075*Sqr(g1)*Sqr(vu) + 0.05*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu)
      + 0.3872983346207417*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(vu)*Sqr(Cos(
      ThetaWp())) + 0.1*Sqr(g1p)*Sqr(vu)*Sqr(Cos(ThetaWp())) + 0.25*Sqr(g2)*Sqr
      (vu)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + 0.15*Sqr(g1)*Sqr(vu)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 0.3872983346207417*g1*g2*Cos(ThetaW(
      ))*Sin(ThetaW())*Sqr(vu)*Sqr(Sin(ThetaWp())) + 0.1*Sqr(g1p)*Sqr(vu)*Sqr(
      Sin(ThetaWp())) + 0.25*Sqr(g2)*Sqr(vu)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp
      ())) + 0.15*Sqr(g1)*Sqr(vu)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()));
   mass_matrix_Ah(1,2) = 0.35355339059327373*vd*Conj(TLambdax) - 0.05*QS*
      vs*vu*Sqr(g1p)*Sqr(Cos(ThetaWp())) - 0.05*QS*vs*vu*Sqr(g1p)*Sqr(Sin(
      ThetaWp())) + 0.35355339059327373*vd*TLambdax;
   mass_matrix_Ah(1,3) = 0.25*vd*vphi*Conj(Sigmax)*Lambdax + 0.25*vd*vphi
      *Conj(Lambdax)*Sigmax + 0.05*QS*vsb*vu*Sqr(g1p)*Sqr(Cos(ThetaWp())) +
      0.05*QS*vsb*vu*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   mass_matrix_Ah(1,4) = 0.25*vd*vsb*Conj(Sigmax)*Lambdax + 0.25*vd*vsb*
      Conj(Lambdax)*Sigmax;
   mass_matrix_Ah(2,0) = mass_matrix_Ah(0,2);
   mass_matrix_Ah(2,1) = mass_matrix_Ah(1,2);
   mass_matrix_Ah(2,2) = ms2 + 0.5*AbsSqr(Lambdax)*Sqr(vd) - 0.0375*QS*
      Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr(Sigmax)*Sqr(vphi) + 0.0125*Sqr(g1p)*Sqr(QS)
      *Sqr(vs) + 0.5*AbsSqr(Sigmax)*Sqr(vsb) - 0.0125*Sqr(g1p)*Sqr(QS)*Sqr(vsb)
      + 0.5*AbsSqr(Lambdax)*Sqr(vu) - 0.025*QS*Sqr(g1p)*Sqr(vu) + 0.025*Sqr(
      g1p)*Sqr(QS)*Sqr(vs)*Sqr(Cos(ThetaWp())) + 0.025*Sqr(g1p)*Sqr(QS)*Sqr(vs)
      *Sqr(Sin(ThetaWp()));
   mass_matrix_Ah(2,3) = 0.35355339059327373*MuPhi*vphi*Conj(Sigmax) +
      0.35355339059327373*vphi*Conj(TSigmax) + 0.5*Conj(Sigmax)*XiF +
      0.35355339059327373*vphi*Conj(MuPhi)*Sigmax + 0.5*Conj(XiF)*Sigmax + 0.25
      *Conj(Sigmax)*KappaPr*Sqr(vphi) + 0.25*Conj(KappaPr)*Sigmax*Sqr(vphi) -
      0.025*vs*vsb*Sqr(g1p)*Sqr(QS)*Sqr(Cos(ThetaWp())) - 0.025*vs*vsb*Sqr(g1p)
      *Sqr(QS)*Sqr(Sin(ThetaWp())) + 0.35355339059327373*vphi*TSigmax;
   mass_matrix_Ah(2,4) = -0.35355339059327373*MuPhi*vsb*Conj(Sigmax) +
      0.35355339059327373*vsb*Conj(TSigmax) - 0.5*vphi*vsb*Conj(Sigmax)*KappaPr
      - 0.35355339059327373*vsb*Conj(MuPhi)*Sigmax - 0.5*vphi*vsb*Conj(KappaPr
      )*Sigmax + 0.35355339059327373*vsb*TSigmax;
   mass_matrix_Ah(3,0) = mass_matrix_Ah(0,3);
   mass_matrix_Ah(3,1) = mass_matrix_Ah(1,3);
   mass_matrix_Ah(3,2) = mass_matrix_Ah(2,3);
   mass_matrix_Ah(3,3) = msbar2 + 0.0375*QS*Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr
      (Sigmax)*Sqr(vphi) + 0.5*AbsSqr(Sigmax)*Sqr(vs) - 0.0125*Sqr(g1p)*Sqr(QS)
      *Sqr(vs) + 0.0125*Sqr(g1p)*Sqr(QS)*Sqr(vsb) + 0.025*QS*Sqr(g1p)*Sqr(vu) +
      0.025*Sqr(g1p)*Sqr(QS)*Sqr(vsb)*Sqr(Cos(ThetaWp())) + 0.025*Sqr(g1p)*Sqr
      (QS)*Sqr(vsb)*Sqr(Sin(ThetaWp()));
   mass_matrix_Ah(3,4) = -0.35355339059327373*MuPhi*vs*Conj(Sigmax) +
      0.35355339059327373*vs*Conj(TSigmax) - 0.5*vphi*vs*Conj(Sigmax)*KappaPr -
      0.25*vd*vu*Conj(Sigmax)*Lambdax - 0.35355339059327373*vs*Conj(MuPhi)*
      Sigmax - 0.5*vphi*vs*Conj(KappaPr)*Sigmax - 0.25*vd*vu*Conj(Lambdax)*
      Sigmax + 0.35355339059327373*vs*TSigmax;
   mass_matrix_Ah(4,0) = mass_matrix_Ah(0,4);
   mass_matrix_Ah(4,1) = mass_matrix_Ah(1,4);
   mass_matrix_Ah(4,2) = mass_matrix_Ah(2,4);
   mass_matrix_Ah(4,3) = mass_matrix_Ah(3,4);
   mass_matrix_Ah(4,4) = mphi2 + AbsSqr(MuPhi) - 0.5*BMuPhi - 0.5*Conj(
      BMuPhi) + 0.7071067811865475*MuPhi*vphi*Conj(KappaPr) -
      0.7071067811865475*vphi*Conj(TKappaPr) + 0.7071067811865475*vphi*Conj(
      MuPhi)*KappaPr - Conj(XiF)*KappaPr + 0.5*vs*vsb*Conj(Sigmax)*KappaPr -
      Conj(KappaPr)*XiF + 0.5*vs*vsb*Conj(KappaPr)*Sigmax + AbsSqr(KappaPr)*Sqr
      (vphi) + 0.5*AbsSqr(Sigmax)*Sqr(vs) + 0.5*AbsSqr(Sigmax)*Sqr(vsb) -
      0.7071067811865475*vphi*TKappaPr;

   return mass_matrix_Ah;
}

void CLASSNAME::calculate_MAh()
{
   const auto mass_matrix_Ah(get_mass_matrix_Ah());
   fs_diagonalize_hermitian(mass_matrix_Ah, MAh, ZA);

   if (MAh.minCoeff() < 0.)
      problems.flag_tachyon(Ah);
   else
      problems.unflag_tachyon(Ah);

   MAh = AbsSqrt(MAh);
}

Eigen::Matrix<double,2,2> CLASSNAME::get_mass_matrix_Hpm() const
{
   const auto QS = LOCALINPUT(QS);

   Eigen::Matrix<double,2,2> mass_matrix_Hpm;
   mass_matrix_Hpm(0,0) = mHd2 + 0.075*Sqr(g1)*Sqr(vd) + 0.1125*Sqr(g1p)*
      Sqr(vd) + 0.375*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambdax)*Sqr(vs) - 0.0375*QS
      *Sqr(g1p)*Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu) +
      0.075*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Hpm(0,1) = -0.5*vd*vu*AbsSqr(Lambdax) + 0.7071067811865475
      *vs*Conj(TLambdax) - 0.5*vphi*vsb*Conj(Lambdax)*Sigmax;
   mass_matrix_Hpm(1,0) = Conj(mass_matrix_Hpm(0,1));
   mass_matrix_Hpm(1,1) = mHu2 - 0.075*Sqr(g1)*Sqr(vd) + 0.075*Sqr(g1p)*
      Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambdax)*Sqr(vs) - 0.025*QS*
      Sqr(g1p)*Sqr(vs) + 0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.075*Sqr(g1)*Sqr(vu) +
      0.05*Sqr(g1p)*Sqr(vu) + 0.375*Sqr(g2)*Sqr(vu);
   
   return mass_matrix_Hpm;
}

void CLASSNAME::calculate_MHpm()
{
   const auto mass_matrix_Hpm(get_mass_matrix_Hpm());
   fs_diagonalize_hermitian(mass_matrix_Hpm, MHpm, ZP);

   if (MHpm.minCoeff() < 0.)
      problems.flag_tachyon(Hpm);
   else
      problems.unflag_tachyon(Hpm);

   MHpm = AbsSqrt(MHpm);
  
}

Eigen::Matrix<double,8,8> CLASSNAME::get_mass_matrix_Chi() const
{
   const auto QS = LOCALINPUT(QS);

   Eigen::Matrix<double,8,8> mass_matrix_Chi;
   mass_matrix_Chi(0,0) = MassB;
   mass_matrix_Chi(0,1) = 0;
   mass_matrix_Chi(0,2) = -0.3872983346207417*g1*vd;
   mass_matrix_Chi(0,3) = 0.3872983346207417*g1*vu;
   mass_matrix_Chi(0,4) = 0;
   mass_matrix_Chi(0,5) = 0;
   mass_matrix_Chi(0,6) = 0;
   mass_matrix_Chi(0,7) = 0;
   mass_matrix_Chi(1,0) = mass_matrix_Chi(0,1);
   mass_matrix_Chi(1,1) = MassWB;
   mass_matrix_Chi(1,2) = 0.5*g2*vd;
   mass_matrix_Chi(1,3) = -0.5*g2*vu;
   mass_matrix_Chi(1,4) = 0;
   mass_matrix_Chi(1,5) = 0;
   mass_matrix_Chi(1,6) = 0;
   mass_matrix_Chi(1,7) = 0;
   mass_matrix_Chi(2,0) = mass_matrix_Chi(0,2);
   mass_matrix_Chi(2,1) = mass_matrix_Chi(1,2);
   mass_matrix_Chi(2,2) = 0;
   mass_matrix_Chi(2,3) = -0.7071067811865475*vs*Lambdax;
   mass_matrix_Chi(2,4) = -0.7071067811865475*vu*Lambdax;
   mass_matrix_Chi(2,5) = 0;
   mass_matrix_Chi(2,6) = 0;
   mass_matrix_Chi(2,7) = -0.4743416490252569*g1p*vd;
   mass_matrix_Chi(3,0) = mass_matrix_Chi(0,3);
   mass_matrix_Chi(3,1) = mass_matrix_Chi(1,3);
   mass_matrix_Chi(3,2) = mass_matrix_Chi(2,3);
   mass_matrix_Chi(3,3) = 0;
   mass_matrix_Chi(3,4) = -0.7071067811865475*vd*Lambdax;
   mass_matrix_Chi(3,5) = 0;
   mass_matrix_Chi(3,6) = 0;
   mass_matrix_Chi(3,7) = -0.31622776601683794*g1p*vu;
   mass_matrix_Chi(4,0) = mass_matrix_Chi(0,4);
   mass_matrix_Chi(4,1) = mass_matrix_Chi(1,4);
   mass_matrix_Chi(4,2) = mass_matrix_Chi(2,4);
   mass_matrix_Chi(4,3) = mass_matrix_Chi(3,4);
   mass_matrix_Chi(4,4) = 0;
   mass_matrix_Chi(4,5) = -0.7071067811865475*vphi*Sigmax;
   mass_matrix_Chi(4,6) = -0.7071067811865475*vsb*Sigmax;
   mass_matrix_Chi(4,7) = 0.15811388300841897*g1p*QS*vs;
   mass_matrix_Chi(5,0) = mass_matrix_Chi(0,5);
   mass_matrix_Chi(5,1) = mass_matrix_Chi(1,5);
   mass_matrix_Chi(5,2) = mass_matrix_Chi(2,5);
   mass_matrix_Chi(5,3) = mass_matrix_Chi(3,5);
   mass_matrix_Chi(5,4) = mass_matrix_Chi(4,5);
   mass_matrix_Chi(5,5) = 0;
   mass_matrix_Chi(5,6) = -0.7071067811865475*vs*Sigmax;
   mass_matrix_Chi(5,7) = -0.15811388300841897*g1p*QS*vsb;
   mass_matrix_Chi(6,0) = mass_matrix_Chi(0,6);
   mass_matrix_Chi(6,1) = mass_matrix_Chi(1,6);
   mass_matrix_Chi(6,2) = mass_matrix_Chi(2,6);
   mass_matrix_Chi(6,3) = mass_matrix_Chi(3,6);
   mass_matrix_Chi(6,4) = mass_matrix_Chi(4,6);
   mass_matrix_Chi(6,5) = mass_matrix_Chi(5,6);
   mass_matrix_Chi(6,6) = MuPhi + 1.4142135623730951*vphi*KappaPr;
   mass_matrix_Chi(6,7) = 0;
   mass_matrix_Chi(7,0) = mass_matrix_Chi(0,7);
   mass_matrix_Chi(7,1) = mass_matrix_Chi(1,7);
   mass_matrix_Chi(7,2) = mass_matrix_Chi(2,7);
   mass_matrix_Chi(7,3) = mass_matrix_Chi(3,7);
   mass_matrix_Chi(7,4) = mass_matrix_Chi(4,7);
   mass_matrix_Chi(7,5) = mass_matrix_Chi(5,7);
   mass_matrix_Chi(7,6) = mass_matrix_Chi(6,7);
   mass_matrix_Chi(7,7) = MassBp;

   return mass_matrix_Chi;
}

void CLASSNAME::calculate_MChi()
{
   const auto mass_matrix_Chi(get_mass_matrix_Chi());
   fs_diagonalize_symmetric(mass_matrix_Chi, MChi, ZN);
}

Eigen::Matrix<double,2,2> CLASSNAME::get_mass_matrix_Cha() const
{
   Eigen::Matrix<double,2,2> mass_matrix_Cha;
   mass_matrix_Cha(0,0) = MassWB;
   mass_matrix_Cha(0,1) = 0.7071067811865475*g2*vu;
   mass_matrix_Cha(1,0) = 0.7071067811865475*g2*vd;
   mass_matrix_Cha(1,1) = 0.7071067811865475*vs*Lambdax;

   return mass_matrix_Cha;
}

void CLASSNAME::calculate_MCha()
{
   const auto mass_matrix_Cha(get_mass_matrix_Cha());
   fs_svd(mass_matrix_Cha, MCha, UM, UP);
}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_Fe() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Fe;
   mass_matrix_Fe(0,0) = 0.7071067811865475*vd*Ye(0,0);
   mass_matrix_Fe(0,1) = 0;
   mass_matrix_Fe(0,2) = 0;
   mass_matrix_Fe(1,0) = mass_matrix_Fe(0,1);
   mass_matrix_Fe(1,1) = 0.7071067811865475*vd*Ye(1,1);
   mass_matrix_Fe(1,2) = 0;
   mass_matrix_Fe(2,0) = mass_matrix_Fe(0,2);
   mass_matrix_Fe(2,1) = mass_matrix_Fe(1,2);
   mass_matrix_Fe(2,2) = 0.7071067811865475*vd*Ye(2,2);

   return mass_matrix_Fe;
}

void CLASSNAME::calculate_MFe()
{
   const auto mass_matrix_Fe(get_mass_matrix_Fe());
   fs_svd(mass_matrix_Fe, MFe, ZEL, ZER);
}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_Fd() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Fd;
   mass_matrix_Fd(0,0) = 0.7071067811865475*vd*Yd(0,0);
   mass_matrix_Fd(0,1) = 0;
   mass_matrix_Fd(0,2) = 0;
   mass_matrix_Fd(1,0) = mass_matrix_Fd(0,1);
   mass_matrix_Fd(1,1) = 0.7071067811865475*vd*Yd(1,1);
   mass_matrix_Fd(1,2) = 0;
   mass_matrix_Fd(2,0) = mass_matrix_Fd(0,2);
   mass_matrix_Fd(2,1) = mass_matrix_Fd(1,2);
   mass_matrix_Fd(2,2) = 0.7071067811865475*vd*Yd(2,2);

   return mass_matrix_Fd;
}

void CLASSNAME::calculate_MFd()
{
   const auto mass_matrix_Fd(get_mass_matrix_Fd());
   fs_svd(mass_matrix_Fd, MFd, ZDL, ZDR);
}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_Fu() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Fu;
   mass_matrix_Fu(0,0) = 0.7071067811865475*vu*Yu(0,0);
   mass_matrix_Fu(0,1) = 0;
   mass_matrix_Fu(0,2) = 0;
   mass_matrix_Fu(1,0) = mass_matrix_Fu(0,1);
   mass_matrix_Fu(1,1) = 0.7071067811865475*vu*Yu(1,1);
   mass_matrix_Fu(1,2) = 0;
   mass_matrix_Fu(2,0) = mass_matrix_Fu(0,2);
   mass_matrix_Fu(2,1) = mass_matrix_Fu(1,2);
   mass_matrix_Fu(2,2) = 0.7071067811865475*vu*Yu(2,2);

   return mass_matrix_Fu;
}

void CLASSNAME::calculate_MFu()
{
   const auto mass_matrix_Fu(get_mass_matrix_Fu());
   fs_svd(mass_matrix_Fu, MFu, ZUL, ZUR);
}

Eigen::Matrix<double,3,3> CLASSNAME::get_mass_matrix_FDX() const
{
   Eigen::Matrix<double,3,3> mass_matrix_FDX;
   mass_matrix_FDX(0,0) = 0.7071067811865475*vs*Kappa(0,0);
   mass_matrix_FDX(0,1) = 0;
   mass_matrix_FDX(0,2) = 0;
   mass_matrix_FDX(1,0) = mass_matrix_FDX(0,1);
   mass_matrix_FDX(1,1) = 0.7071067811865475*vs*Kappa(1,1);
   mass_matrix_FDX(1,2) = 0;
   mass_matrix_FDX(2,0) = mass_matrix_FDX(0,2);
   mass_matrix_FDX(2,1) = mass_matrix_FDX(1,2);
   mass_matrix_FDX(2,2) = 0.7071067811865475*vs*Kappa(2,2);

   return mass_matrix_FDX;
}

void CLASSNAME::calculate_MFDX()
{
   const auto mass_matrix_FDX(get_mass_matrix_FDX());
   fs_svd(mass_matrix_FDX, MFDX, ZDXL, ZDXR);
}

Eigen::Matrix<double,2,2> CLASSNAME::get_mass_matrix_SHp0() const
{
   const auto QS = LOCALINPUT(QS);

   Eigen::Matrix<double,2,2> mass_matrix_SHp0;
   mass_matrix_SHp0(0,0) = mHp2 + AbsSqr(MuPr) + 0.075*Sqr(g1)*Sqr(vd) -
      0.075*Sqr(g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs
      ) - 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*
      Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_SHp0(0,1) = -Conj(BMuPr);
   mass_matrix_SHp0(1,0) = Conj(mass_matrix_SHp0(0,1));
   mass_matrix_SHp0(1,1) = mHpbar2 + AbsSqr(MuPr) - 0.075*Sqr(g1)*Sqr(vd)
      + 0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) - 0.025*QS*Sqr(g1p)*Sqr
      (vs) + 0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.075*Sqr(g1)*Sqr(vu) + 0.05*Sqr(g1p)
      *Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);

   return mass_matrix_SHp0;
}

void CLASSNAME::calculate_MSHp0()
{
   const auto mass_matrix_SHp0(get_mass_matrix_SHp0());
   fs_diagonalize_hermitian(mass_matrix_SHp0, MSHp0, UHp0);

   if (MSHp0.minCoeff() < 0.)
      problems.flag_tachyon(SHp0);
   else
      problems.unflag_tachyon(SHp0);

   MSHp0 = AbsSqrt(MSHp0);
}

Eigen::Matrix<double,2,2> CLASSNAME::get_mass_matrix_SHpp() const
{
   const auto QS = LOCALINPUT(QS);

   Eigen::Matrix<double,2,2> mass_matrix_SHpp;
   mass_matrix_SHpp(0,0) = mHp2 + AbsSqr(MuPr) + 0.075*Sqr(g1)*Sqr(vd) -
      0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs
      ) - 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*
      Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_SHpp(0,1) = Conj(BMuPr);
   mass_matrix_SHpp(1,0) = Conj(mass_matrix_SHpp(0,1));
   mass_matrix_SHpp(1,1) = mHpbar2 + AbsSqr(MuPr) - 0.075*Sqr(g1)*Sqr(vd)
      + 0.075*Sqr(g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) - 0.025*QS*Sqr(g1p)*Sqr
      (vs) + 0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.075*Sqr(g1)*Sqr(vu) + 0.05*Sqr(g1p)
      *Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu);

   return mass_matrix_SHpp;
}

void CLASSNAME::calculate_MSHpp()
{
   const auto mass_matrix_SHpp(get_mass_matrix_SHpp());
   fs_diagonalize_hermitian(mass_matrix_SHpp, MSHpp, UHpp);

   if (MSHpp.minCoeff() < 0.)
      problems.flag_tachyon(SHpp);
   else
      problems.unflag_tachyon(SHpp);

   MSHpp = AbsSqrt(MSHpp);
}

Eigen::Matrix<double,2,2> CLASSNAME::get_mass_matrix_ChiP() const
{
   Eigen::Matrix<double,2,2> mass_matrix_ChiP;
   mass_matrix_ChiP(0,0) = 0;
   mass_matrix_ChiP(0,1) = -MuPr;
   mass_matrix_ChiP(1,0) = mass_matrix_ChiP(0,1);
   mass_matrix_ChiP(1,1) = 0;

   return mass_matrix_ChiP;
}

void CLASSNAME::calculate_MChiP()
{
   const auto mass_matrix_ChiP(get_mass_matrix_ChiP());
   fs_diagonalize_symmetric(mass_matrix_ChiP, MChiP, ZNp);
}

void CLASSNAME::calculate_MVG()
{
   MVG = 0;
}

void CLASSNAME::calculate_MVP()
{
   MVP = 0;
}

void CLASSNAME::calculate_MVWm()
{
   MVWm = 0.25*Sqr(g2)*(Sqr(vd) + Sqr(vu));

   if (MVWm < 0.)
      problems.flag_tachyon(VWm);
   else
      problems.unflag_tachyon(VWm);

   MVWm = AbsSqrt(MVWm);
}


double CLASSNAME::get_ewsb_eq_hh_1() const
{
   const auto QS = LOCALINPUT(QS);

   double result = mHd2*vd - 0.35355339059327373*vs*vu*Conj(TLambdax) + 0.25*
      vphi*vsb*vu*Conj(Sigmax)*Lambdax + 0.25*vphi*vsb*vu*Conj(Lambdax)*Sigmax +
      0.075*Power(vd,3)*Sqr(g1) + 0.1125*Power(vd,3)*Sqr(g1p) + 0.125*Power(vd,3)*
      Sqr(g2) + 0.5*vd*AbsSqr(Lambdax)*Sqr(vs) - 0.0375*QS*vd*Sqr(g1p)*Sqr(vs) +
      0.0375*QS*vd*Sqr(g1p)*Sqr(vsb) + 0.5*vd*AbsSqr(Lambdax)*Sqr(vu) - 0.075*vd*
      Sqr(g1)*Sqr(vu) + 0.075*vd*Sqr(g1p)*Sqr(vu) - 0.125*vd*Sqr(g2)*Sqr(vu) -
      0.35355339059327373*vs*vu*TLambdax;

   return result;
}

double CLASSNAME::get_ewsb_eq_hh_2() const
{
   const auto QS = LOCALINPUT(QS);

   double result = mHu2*vu - 0.35355339059327373*vd*vs*Conj(TLambdax) + 0.25*vd
      *vphi*vsb*Conj(Sigmax)*Lambdax + 0.25*vd*vphi*vsb*Conj(Lambdax)*Sigmax +
      0.075*Power(vu,3)*Sqr(g1) + 0.05*Power(vu,3)*Sqr(g1p) + 0.125*Power(vu,3)*
      Sqr(g2) + 0.5*vu*AbsSqr(Lambdax)*Sqr(vd) - 0.075*vu*Sqr(g1)*Sqr(vd) + 0.075*
      vu*Sqr(g1p)*Sqr(vd) - 0.125*vu*Sqr(g2)*Sqr(vd) + 0.5*vu*AbsSqr(Lambdax)*Sqr(
      vs) - 0.025*QS*vu*Sqr(g1p)*Sqr(vs) + 0.025*QS*vu*Sqr(g1p)*Sqr(vsb) -
      0.35355339059327373*vd*vs*TLambdax;

   return result;
}

double CLASSNAME::get_ewsb_eq_hh_3() const
{
   const auto QS = LOCALINPUT(QS);

   double result = ms2*vs - 0.35355339059327373*MuPhi*vphi*vsb*Conj(Sigmax) -
      0.35355339059327373*vd*vu*Conj(TLambdax) - 0.35355339059327373*vphi*vsb*Conj
      (TSigmax) - 0.5*vsb*Conj(Sigmax)*XiF - 0.35355339059327373*vphi*vsb*Conj(
      MuPhi)*Sigmax - 0.5*vsb*Conj(XiF)*Sigmax + 0.0125*Power(vs,3)*Sqr(g1p)*Sqr(
      QS) + 0.5*vs*AbsSqr(Lambdax)*Sqr(vd) - 0.0375*QS*vs*Sqr(g1p)*Sqr(vd) + 0.5*
      vs*AbsSqr(Sigmax)*Sqr(vphi) - 0.25*vsb*Conj(Sigmax)*KappaPr*Sqr(vphi) - 0.25
      *vsb*Conj(KappaPr)*Sigmax*Sqr(vphi) + 0.5*vs*AbsSqr(Sigmax)*Sqr(vsb) -
      0.0125*vs*Sqr(g1p)*Sqr(QS)*Sqr(vsb) + 0.5*vs*AbsSqr(Lambdax)*Sqr(vu) - 0.025
      *QS*vs*Sqr(g1p)*Sqr(vu) - 0.35355339059327373*vd*vu*TLambdax -
      0.35355339059327373*vphi*vsb*TSigmax;

   return result;
}

double CLASSNAME::get_ewsb_eq_hh_4() const
{
   const auto QS = LOCALINPUT(QS);

   double result = msbar2*vsb - 0.35355339059327373*MuPhi*vphi*vs*Conj(Sigmax)
      - 0.35355339059327373*vphi*vs*Conj(TSigmax) + 0.25*vd*vphi*vu*Conj(Sigmax)*
      Lambdax - 0.5*vs*Conj(Sigmax)*XiF - 0.35355339059327373*vphi*vs*Conj(MuPhi)*
      Sigmax + 0.25*vd*vphi*vu*Conj(Lambdax)*Sigmax - 0.5*vs*Conj(XiF)*Sigmax +
      0.0125*Power(vsb,3)*Sqr(g1p)*Sqr(QS) + 0.0375*QS*vsb*Sqr(g1p)*Sqr(vd) + 0.5*
      vsb*AbsSqr(Sigmax)*Sqr(vphi) - 0.25*vs*Conj(Sigmax)*KappaPr*Sqr(vphi) - 0.25
      *vs*Conj(KappaPr)*Sigmax*Sqr(vphi) + 0.5*vsb*AbsSqr(Sigmax)*Sqr(vs) - 0.0125
      *vsb*Sqr(g1p)*Sqr(QS)*Sqr(vs) + 0.025*QS*vsb*Sqr(g1p)*Sqr(vu) -
      0.35355339059327373*vphi*vs*TSigmax;

   return result;
}

double CLASSNAME::get_ewsb_eq_hh_5() const
{
   double result = mphi2*vphi + vphi*AbsSqr(MuPhi) + Power(vphi,3)*AbsSqr(
      KappaPr) + 0.5*vphi*BMuPhi + 0.5*vphi*Conj(BMuPhi) + 0.7071067811865475*
      MuPhi*Conj(XiF) - 0.35355339059327373*MuPhi*vs*vsb*Conj(Sigmax) +
      0.7071067811865475*Conj(LXiF) - 0.35355339059327373*vs*vsb*Conj(TSigmax) +
      vphi*Conj(XiF)*KappaPr - 0.5*vphi*vs*vsb*Conj(Sigmax)*KappaPr + 0.25*vd*vsb*
      vu*Conj(Sigmax)*Lambdax + 0.7071067811865475*Conj(MuPhi)*XiF + vphi*Conj(
      KappaPr)*XiF - 0.35355339059327373*vs*vsb*Conj(MuPhi)*Sigmax - 0.5*vphi*vs*
      vsb*Conj(KappaPr)*Sigmax + 0.25*vd*vsb*vu*Conj(Lambdax)*Sigmax +
      0.7071067811865475*LXiF + 1.0606601717798212*MuPhi*Conj(KappaPr)*Sqr(vphi) +
      0.35355339059327373*Conj(TKappaPr)*Sqr(vphi) + 1.0606601717798212*Conj(
      MuPhi)*KappaPr*Sqr(vphi) + 0.5*vphi*AbsSqr(Sigmax)*Sqr(vs) + 0.5*vphi*AbsSqr
      (Sigmax)*Sqr(vsb) + 0.35355339059327373*Sqr(vphi)*TKappaPr -
      0.35355339059327373*vs*vsb*TSigmax;

   return result;
}



std::complex<double> CLASSNAME::CpUSdconjUSdVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_0;
   std::complex<double> tmp_1;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_0 += tmp_1;
   result += (0.13333333333333333*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())
      )) * tmp_0;
   std::complex<double> tmp_2;
   std::complex<double> tmp_3;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2 += tmp_3;
   result += (-0.32659863237109044*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_2;
   std::complex<double> tmp_4;
   std::complex<double> tmp_5;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_4 += tmp_5;
   result += (0.2*Sqr(g1p)*Sqr(Sin(ThetaWp()))) * tmp_4;
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.2581988897471611*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.03333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(
         ThetaWp()))*Sqr(Sin(ThetaW()));
   }
   if (gO1 < 3) {
      result += -0.31622776601683794*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += -0.08164965809277262*g1*g1p*Cos(ThetaWp())*KroneckerDelta(
         gO1,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6;
   std::complex<double> tmp_7;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_6 += tmp_7;
   result += (0.2*Sqr(g1p)*Sqr(Cos(ThetaWp()))) * tmp_6;
   std::complex<double> tmp_8;
   std::complex<double> tmp_9;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_9 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_8 += tmp_9;
   result += (0.32659863237109044*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_8;
   std::complex<double> tmp_10;
   std::complex<double> tmp_11;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_11 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_10 += tmp_11;
   result += (0.13333333333333333*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())
      )) * tmp_10;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.31622776601683794*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.08164965809277262*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1
         ,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.2581988897471611*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.03333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(
         ThetaW()))*Sqr(Sin(ThetaWp()));
   }

   return result;
}

double CLASSNAME::CpUSdconjUSdconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_12;
   std::complex<double> tmp_13;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_13 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_12 += tmp_13;
   result += (0.1*Conj(ZP(gI2,0))*Sqr(g1)*ZP(gI1,0)) * tmp_12;
   std::complex<double> tmp_14;
   std::complex<double> tmp_15;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_15 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_14 += tmp_15;
   result += (0.15*Conj(ZP(gI2,0))*Sqr(g1p)*ZP(gI1,0)) * tmp_14;
   std::complex<double> tmp_16;
   std::complex<double> tmp_17;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_17 += AbsSqr(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta(
         gO2,3 + j2);
   }
   tmp_16 += tmp_17;
   result += (-(Conj(ZP(gI2,0))*ZP(gI1,0))) * tmp_16;
   if (gO1 < 3) {
      result += 0.05*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,
         0);
   }
   if (gO1 < 3) {
      result += 0.075*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1
         ,0);
   }
   std::complex<double> tmp_18;
   std::complex<double> tmp_19;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_19 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_18 += tmp_19;
   result += (-0.1*Conj(ZP(gI2,1))*Sqr(g1)*ZP(gI1,1)) * tmp_18;
   std::complex<double> tmp_20;
   std::complex<double> tmp_21;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_21 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_20 += tmp_21;
   result += (0.1*Conj(ZP(gI2,1))*Sqr(g1p)*ZP(gI1,1)) * tmp_20;
   if (gO1 < 3) {
      result += -0.05*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1
         ,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1
         ,1);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,
         1);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yu(gO1,gO1))*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2
         )*ZP(gI1,1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_22;
   std::complex<double> tmp_23;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_23 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_22 += tmp_23;
   result += (0.1*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_22;
   std::complex<double> tmp_24;
   std::complex<double> tmp_25;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_25 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_24 += tmp_25;
   result += (-0.1*Conj(UHp0(gI2,0))*Sqr(g1p)*UHp0(gI1,0)) * tmp_24;
   if (gO1 < 3) {
      result += 0.05*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*
         UHp0(gI1,0);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0(
         gI1,0);
   }
   std::complex<double> tmp_26;
   std::complex<double> tmp_27;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_27 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_26 += tmp_27;
   result += (-0.1*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_26;
   std::complex<double> tmp_28;
   std::complex<double> tmp_29;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_29 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_28 += tmp_29;
   result += (0.1*Conj(UHp0(gI2,1))*Sqr(g1p)*UHp0(gI1,1)) * tmp_28;
   if (gO1 < 3) {
      result += -0.05*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0
         (gI1,1);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0
         (gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_30;
   std::complex<double> tmp_31;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_31 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_30 += tmp_31;
   result += (0.1*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_30;
   std::complex<double> tmp_32;
   std::complex<double> tmp_33;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_33 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_32 += tmp_33;
   result += (-0.1*Conj(UHpp(gI2,0))*Sqr(g1p)*UHpp(gI1,0)) * tmp_32;
   if (gO1 < 3) {
      result += 0.05*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*
         UHpp(gI1,0);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp
         (gI1,0);
   }
   std::complex<double> tmp_34;
   std::complex<double> tmp_35;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_35 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_34 += tmp_35;
   result += (-0.1*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_34;
   std::complex<double> tmp_36;
   std::complex<double> tmp_37;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_37 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_36 += tmp_37;
   result += (0.1*Conj(UHpp(gI2,1))*Sqr(g1p)*UHpp(gI1,1)) * tmp_36;
   if (gO1 < 3) {
      result += -0.05*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp(
         gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_38;
   std::complex<double> tmp_39;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_39 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_38 += tmp_39;
   result += (0.1*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_38;
   std::complex<double> tmp_40;
   std::complex<double> tmp_41;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_41 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_40 += tmp_41;
   result += (-0.1*KroneckerDelta(gI1,gI2)*Sqr(g1p)) * tmp_40;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1)
         ;
   }
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(
         g1p);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2)
         ;
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdFuChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(Yu(gO2,gO2))*UP(gI2,1)*ZUR(gI1,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdFuChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_42;
   std::complex<double> tmp_43;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_43 += Conj(ZUL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Yd(j1,j1);
   }
   tmp_42 += tmp_43;
   result += (Conj(UM(gI2,1))) * tmp_42;
   if (gO1 < 3) {
      result += -(g2*Conj(UM(gI2,0))*Conj(ZUL(gI1,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdFdChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_44;
   std::complex<double> tmp_45;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_45 += KroneckerDelta(gO2,3 + j1)*ZDR(gI1,j1);
   }
   tmp_44 += tmp_45;
   result += (-0.3651483716701107*g1*ZN(gI2,0)) * tmp_44;
   if (gO2 < 3) {
      result += -(Conj(Yd(gO2,gO2))*ZDR(gI1,gO2)*ZN(gI2,2));
   }
   std::complex<double> tmp_46;
   std::complex<double> tmp_47;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_47 += KroneckerDelta(gO2,3 + j1)*ZDR(gI1,j1);
   }
   tmp_46 += tmp_47;
   result += (-0.4472135954999579*g1p*ZN(gI2,7)) * tmp_46;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdFdChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_48;
   std::complex<double> tmp_49;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_49 += Conj(ZDL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Yd(j1,j1);
   }
   tmp_48 += tmp_49;
   result += (-Conj(ZN(gI2,2))) * tmp_48;
   if (gO1 < 3) {
      result += -0.18257418583505536*g1*Conj(ZDL(gI1,gO1))*Conj(ZN(gI2,0));
   }
   if (gO1 < 3) {
      result += 0.7071067811865475*g2*Conj(ZDL(gI1,gO1))*Conj(ZN(gI2,1));
   }
   if (gO1 < 3) {
      result += -0.22360679774997896*g1p*Conj(ZDL(gI1,gO1))*Conj(ZN(gI2,7));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_50;
   std::complex<double> tmp_51;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_51 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_50 += tmp_51;
   result += (0.1*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_50;
   std::complex<double> tmp_52;
   std::complex<double> tmp_53;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_53 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_52 += tmp_53;
   result += (0.15*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0)) * tmp_52;
   std::complex<double> tmp_54;
   std::complex<double> tmp_55;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_55 += AbsSqr(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta(
         gO2,3 + j2);
   }
   tmp_54 += tmp_55;
   result += (-(ZA(gI1,0)*ZA(gI2,0))) * tmp_54;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yd(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,0)*ZA(
         gI2,0));
   }
   std::complex<double> tmp_56;
   std::complex<double> tmp_57;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_57 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_56 += tmp_57;
   result += (-0.1*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_56;
   std::complex<double> tmp_58;
   std::complex<double> tmp_59;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_59 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_58 += tmp_59;
   result += (0.1*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1)) * tmp_58;
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,2)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1)*
         ZA(gI1,2)*ZA(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,1)*ZA(gI2,2);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1)*
         ZA(gI1,1)*ZA(gI2,2);
   }
   std::complex<double> tmp_60;
   std::complex<double> tmp_61;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_61 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_60 += tmp_61;
   result += (-0.05*QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2)) * tmp_60;
   if (gO1 < 3) {
      result += -0.025*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,
         2);
   }
   std::complex<double> tmp_62;
   std::complex<double> tmp_63;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_63 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_62 += tmp_63;
   result += (0.05*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) * tmp_62;
   if (gO1 < 3) {
      result += 0.025*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_64;
   std::complex<double> tmp_65;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_65 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_64 += tmp_65;
   result += (0.1*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_64;
   std::complex<double> tmp_66;
   std::complex<double> tmp_67;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_67 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_66 += tmp_67;
   result += (0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_66;
   std::complex<double> tmp_68;
   std::complex<double> tmp_69;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_69 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_68 += tmp_69;
   result += (-0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_68;
   std::complex<double> tmp_70;
   std::complex<double> tmp_71;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_71 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_70 += tmp_71;
   result += (0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_70;
   std::complex<double> tmp_72;
   std::complex<double> tmp_73;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_73 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_72 += tmp_73;
   result += (-0.05*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_72;
   std::complex<double> tmp_74;
   std::complex<double> tmp_75;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_75 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_74 += tmp_75;
   result += (0.05*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_74;
   std::complex<double> tmp_76;
   std::complex<double> tmp_77;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_77 += AbsSqr(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta(
         gO2,3 + j2);
   }
   tmp_76 += tmp_77;
   result += (-(Conj(ZH(gI1,0))*Conj(ZH(gI2,0)))) * tmp_76;
   if (gO1 < 3) {
      result += 0.05*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2)
         *Sqr(g1);
   }
   if (gO1 < 3) {
      result += 0.075*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2
         )*Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2)
         *Sqr(g2);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2
         )*Sqr(g1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)
         *Sqr(g1p);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2
         )*Sqr(g2);
   }
   if (gO1 < 3) {
      result += -0.025*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(gO1
         ,gO2)*Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.025*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Yd(gO2,gO2))*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Yd(gO2,gO2))*Conj(ZH(gI1,1))*Conj(ZH(gI2,2))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yd(gO1,gO1))*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*
         KroneckerDelta(gO1,gO2));
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
         KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,1))*Conj(ZH(gI2,2))*
         KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_78;
   std::complex<double> tmp_80;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_80 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
   }
   tmp_78 += tmp_80;
   std::complex<double> tmp_79;
   std::complex<double> tmp_81;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_81 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_79 += tmp_81;
   result += (-0.03333333333333333*Sqr(g1)) * tmp_78 * tmp_79;
   std::complex<double> tmp_82;
   std::complex<double> tmp_84;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_84 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
   }
   tmp_82 += tmp_84;
   std::complex<double> tmp_83;
   std::complex<double> tmp_85;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_85 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_83 += tmp_85;
   result += (-0.05*Sqr(g1p)) * tmp_82 * tmp_83;
   std::complex<double> tmp_86;
   std::complex<double> tmp_88;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_88 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
   }
   tmp_86 += tmp_88;
   std::complex<double> tmp_87;
   std::complex<double> tmp_89;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_89 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_87 += tmp_89;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_86 * tmp_87;
   std::complex<double> tmp_90;
   std::complex<double> tmp_92;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_92 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_90 += tmp_92;
   std::complex<double> tmp_91;
   std::complex<double> tmp_93;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_93 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_91 += tmp_93;
   result += (-0.05*Sqr(g1)) * tmp_90 * tmp_91;
   std::complex<double> tmp_94;
   std::complex<double> tmp_96;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_96 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_94 += tmp_96;
   std::complex<double> tmp_95;
   std::complex<double> tmp_97;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_97 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_95 += tmp_97;
   result += (-0.075*Sqr(g1p)) * tmp_94 * tmp_95;
   std::complex<double> tmp_98;
   std::complex<double> tmp_100;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_100 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_98 += tmp_100;
   std::complex<double> tmp_99;
   std::complex<double> tmp_101;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_101 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_99 += tmp_101;
   result += (-0.1*Sqr(g1)) * tmp_98 * tmp_99;
   std::complex<double> tmp_102;
   std::complex<double> tmp_104;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_104 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_102 += tmp_104;
   std::complex<double> tmp_103;
   std::complex<double> tmp_105;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_105 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_103 += tmp_105;
   result += (-0.15*Sqr(g1p)) * tmp_102 * tmp_103;
   std::complex<double> tmp_106;
   std::complex<double> tmp_108;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_108 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_106 += tmp_108;
   std::complex<double> tmp_107;
   std::complex<double> tmp_109;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_109 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_107 += tmp_109;
   result += (-0.05*Sqr(g1)) * tmp_106 * tmp_107;
   std::complex<double> tmp_110;
   std::complex<double> tmp_112;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_112 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_110 += tmp_112;
   std::complex<double> tmp_111;
   std::complex<double> tmp_113;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_113 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_111 += tmp_113;
   result += (-0.075*Sqr(g1p)) * tmp_110 * tmp_111;
   std::complex<double> tmp_114;
   std::complex<double> tmp_116;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_116 += Conj(ZD(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_114 += tmp_116;
   std::complex<double> tmp_115;
   std::complex<double> tmp_117;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_117 += Conj(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZD(gI1,j2);
   }
   tmp_115 += tmp_117;
   result += (-1) * tmp_114 * tmp_115;
   std::complex<double> tmp_118;
   std::complex<double> tmp_120;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_120 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_118 += tmp_120;
   std::complex<double> tmp_119;
   std::complex<double> tmp_121;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_121 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_119 += tmp_121;
   result += (-0.1*Sqr(g1)) * tmp_118 * tmp_119;
   std::complex<double> tmp_122;
   std::complex<double> tmp_124;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_124 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_122 += tmp_124;
   std::complex<double> tmp_123;
   std::complex<double> tmp_125;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_125 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_123 += tmp_125;
   result += (-0.15*Sqr(g1p)) * tmp_122 * tmp_123;
   std::complex<double> tmp_126;
   std::complex<double> tmp_128;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_128 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_126 += tmp_128;
   std::complex<double> tmp_127;
   std::complex<double> tmp_129;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_129 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
   }
   tmp_127 += tmp_129;
   result += (-0.03333333333333333*Sqr(g1)) * tmp_126 * tmp_127;
   std::complex<double> tmp_130;
   std::complex<double> tmp_132;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_132 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_130 += tmp_132;
   std::complex<double> tmp_131;
   std::complex<double> tmp_133;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_133 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
   }
   tmp_131 += tmp_133;
   result += (-0.05*Sqr(g1p)) * tmp_130 * tmp_131;
   std::complex<double> tmp_134;
   std::complex<double> tmp_136;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_136 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_134 += tmp_136;
   std::complex<double> tmp_135;
   std::complex<double> tmp_137;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_137 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
   }
   tmp_135 += tmp_137;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_134 * tmp_135;
   if (gO1 < 3) {
      std::complex<double> tmp_138;
      std::complex<double> tmp_139;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_139 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_138 += tmp_139;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_138;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_140;
      std::complex<double> tmp_141;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_141 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_140 += tmp_141;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_140;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_142;
      std::complex<double> tmp_143;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_143 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_142 += tmp_143;
      result += (-0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_142;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_144;
      std::complex<double> tmp_145;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_145 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_144 += tmp_145;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_144;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_146;
      std::complex<double> tmp_147;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_147 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_146 += tmp_147;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_146;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_148;
      std::complex<double> tmp_149;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_149 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_148 += tmp_149;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_148;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_150;
      std::complex<double> tmp_151;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_151 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_150 += tmp_151;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_150;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_152;
      std::complex<double> tmp_153;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_153 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_152 += tmp_153;
      result += (-0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_152;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_154;
      std::complex<double> tmp_155;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_155 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_154 += tmp_155;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_154;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_156;
      std::complex<double> tmp_157;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_157 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_156 += tmp_157;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_156;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_158;
      std::complex<double> tmp_159;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_159 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
      }
      tmp_158 += tmp_159;
      result += (-0.016666666666666666*Conj(ZD(gI2,gO2))*Sqr(g1)) * tmp_158;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_160;
      std::complex<double> tmp_161;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_161 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
      }
      tmp_160 += tmp_161;
      result += (-0.025*Conj(ZD(gI2,gO2))*Sqr(g1p)) * tmp_160;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_162;
      std::complex<double> tmp_163;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_163 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
      }
      tmp_162 += tmp_163;
      result += (0.6666666666666666*Conj(ZD(gI2,gO2))*Sqr(g3)) * tmp_162;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_164;
      std::complex<double> tmp_165;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_165 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
      }
      tmp_164 += tmp_165;
      result += (-3*Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)) * tmp_164
         ;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_166;
      std::complex<double> tmp_167;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_167 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
      }
      tmp_166 += tmp_167;
      result += (-0.016666666666666666*Conj(ZD(gI2,gO2))*Sqr(g1)) * tmp_166;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_168;
      std::complex<double> tmp_169;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_169 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
      }
      tmp_168 += tmp_169;
      result += (-0.025*Conj(ZD(gI2,gO2))*Sqr(g1p)) * tmp_168;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_170;
      std::complex<double> tmp_171;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_171 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
      }
      tmp_170 += tmp_171;
      result += (0.6666666666666666*Conj(ZD(gI2,gO2))*Sqr(g3)) * tmp_170;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_172;
      std::complex<double> tmp_173;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_173 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,j2);
      }
      tmp_172 += tmp_173;
      result += (-3*KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1)) * tmp_172;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_174;
      std::complex<double> tmp_175;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_175 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_174 += tmp_175;
      result += (-0.016666666666666666*Sqr(g1)*ZD(gI1,gO1)) * tmp_174;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_176;
      std::complex<double> tmp_177;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_177 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_176 += tmp_177;
      result += (-0.025*Sqr(g1p)*ZD(gI1,gO1)) * tmp_176;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_178;
      std::complex<double> tmp_179;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_179 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_178 += tmp_179;
      result += (0.6666666666666666*Sqr(g3)*ZD(gI1,gO1)) * tmp_178;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_180;
      std::complex<double> tmp_181;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_181 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_180 += tmp_181;
      result += (-0.016666666666666666*Sqr(g1)*ZD(gI1,gO1)) * tmp_180;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_182;
      std::complex<double> tmp_183;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_183 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_182 += tmp_183;
      result += (-0.025*Sqr(g1p)*ZD(gI1,gO1)) * tmp_182;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_184;
      std::complex<double> tmp_185;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_185 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_184 += tmp_185;
      result += (0.6666666666666666*Sqr(g3)*ZD(gI1,gO1)) * tmp_184;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.016666666666666666*Conj(ZD(gI2,gO2))*Sqr(g1)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.025*Conj(ZD(gI2,gO2))*Sqr(g1p)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.25*Conj(ZD(gI2,gO2))*Sqr(g2)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -1.3333333333333333*Conj(ZD(gI2,gO2))*Sqr(g3)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Yd(gO2,gO2))*Conj(ZD(gI2,3 + gO2))*Yd(gO1,gO1)*ZD(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_186;
   std::complex<double> tmp_188;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_188 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_186 += tmp_188;
   std::complex<double> tmp_187;
   std::complex<double> tmp_189;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_189 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_187 += tmp_189;
   result += (0.1*Sqr(g1)) * tmp_186 * tmp_187;
   std::complex<double> tmp_190;
   std::complex<double> tmp_192;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_192 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_190 += tmp_192;
   std::complex<double> tmp_191;
   std::complex<double> tmp_193;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_193 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_191 += tmp_193;
   result += (0.15*Sqr(g1p)) * tmp_190 * tmp_191;
   std::complex<double> tmp_194;
   std::complex<double> tmp_196;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_196 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_194 += tmp_196;
   std::complex<double> tmp_195;
   std::complex<double> tmp_197;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_197 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_195 += tmp_197;
   result += (-0.1*Sqr(g1)) * tmp_194 * tmp_195;
   std::complex<double> tmp_198;
   std::complex<double> tmp_200;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_200 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_198 += tmp_200;
   std::complex<double> tmp_199;
   std::complex<double> tmp_201;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_201 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_199 += tmp_201;
   result += (0.225*Sqr(g1p)) * tmp_198 * tmp_199;
   std::complex<double> tmp_202;
   std::complex<double> tmp_204;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_204 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_202 += tmp_204;
   std::complex<double> tmp_203;
   std::complex<double> tmp_205;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_205 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_203 += tmp_205;
   result += (0.1*Sqr(g1)) * tmp_202 * tmp_203;
   std::complex<double> tmp_206;
   std::complex<double> tmp_208;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_208 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_206 += tmp_208;
   std::complex<double> tmp_207;
   std::complex<double> tmp_209;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_209 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_207 += tmp_209;
   result += (0.15*Sqr(g1p)) * tmp_206 * tmp_207;
   std::complex<double> tmp_210;
   std::complex<double> tmp_212;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_212 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_210 += tmp_212;
   std::complex<double> tmp_211;
   std::complex<double> tmp_213;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_213 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_211 += tmp_213;
   result += (-0.1*Sqr(g1)) * tmp_210 * tmp_211;
   std::complex<double> tmp_214;
   std::complex<double> tmp_216;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_216 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_214 += tmp_216;
   std::complex<double> tmp_215;
   std::complex<double> tmp_217;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_217 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_215 += tmp_217;
   result += (0.225*Sqr(g1p)) * tmp_214 * tmp_215;
   if (gO1 < 3) {
      std::complex<double> tmp_218;
      std::complex<double> tmp_219;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_219 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_218 += tmp_219;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_218;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_220;
      std::complex<double> tmp_221;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_221 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_220 += tmp_221;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_220;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_222;
      std::complex<double> tmp_223;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_223 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_222 += tmp_223;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_222;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_224;
      std::complex<double> tmp_225;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_225 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_224 += tmp_225;
      result += (0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_224;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_226;
      std::complex<double> tmp_227;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_227 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_226 += tmp_227;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_226;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_228;
      std::complex<double> tmp_229;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_229 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_228 += tmp_229;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_228;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_230;
      std::complex<double> tmp_231;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_231 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_230 += tmp_231;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_230;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_232;
      std::complex<double> tmp_233;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_233 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_232 += tmp_233;
      result += (0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_232;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_234;
   std::complex<double> tmp_236;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_236 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_234 += tmp_236;
   std::complex<double> tmp_235;
   std::complex<double> tmp_237;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_237 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_235 += tmp_237;
   result += (0.05*Sqr(g1)) * tmp_234 * tmp_235;
   std::complex<double> tmp_238;
   std::complex<double> tmp_240;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_240 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_238 += tmp_240;
   std::complex<double> tmp_239;
   std::complex<double> tmp_241;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_241 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_239 += tmp_241;
   result += (-0.05*Sqr(g1p)) * tmp_238 * tmp_239;
   std::complex<double> tmp_242;
   std::complex<double> tmp_244;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_244 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_242 += tmp_244;
   std::complex<double> tmp_243;
   std::complex<double> tmp_245;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_245 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_243 += tmp_245;
   result += (-0.1*Sqr(g1)) * tmp_242 * tmp_243;
   std::complex<double> tmp_246;
   std::complex<double> tmp_248;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_248 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_246 += tmp_248;
   std::complex<double> tmp_247;
   std::complex<double> tmp_249;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_249 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_247 += tmp_249;
   result += (-0.025*Sqr(g1p)) * tmp_246 * tmp_247;
   std::complex<double> tmp_250;
   std::complex<double> tmp_252;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_252 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_250 += tmp_252;
   std::complex<double> tmp_251;
   std::complex<double> tmp_253;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_253 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_251 += tmp_253;
   result += (0.05*Sqr(g1)) * tmp_250 * tmp_251;
   std::complex<double> tmp_254;
   std::complex<double> tmp_256;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_256 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_254 += tmp_256;
   std::complex<double> tmp_255;
   std::complex<double> tmp_257;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_257 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_255 += tmp_257;
   result += (-0.05*Sqr(g1p)) * tmp_254 * tmp_255;
   std::complex<double> tmp_258;
   std::complex<double> tmp_260;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_260 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_258 += tmp_260;
   std::complex<double> tmp_259;
   std::complex<double> tmp_261;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_261 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_259 += tmp_261;
   result += (-0.1*Sqr(g1)) * tmp_258 * tmp_259;
   std::complex<double> tmp_262;
   std::complex<double> tmp_264;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_264 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_262 += tmp_264;
   std::complex<double> tmp_263;
   std::complex<double> tmp_265;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_265 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_263 += tmp_265;
   result += (-0.025*Sqr(g1p)) * tmp_262 * tmp_263;
   if (gO1 < 3) {
      std::complex<double> tmp_266;
      std::complex<double> tmp_267;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_267 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_266 += tmp_267;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_266;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_268;
      std::complex<double> tmp_269;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_269 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_268 += tmp_269;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_268;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_270;
      std::complex<double> tmp_271;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_271 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_270 += tmp_271;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_270;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_272;
      std::complex<double> tmp_273;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_273 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_272 += tmp_273;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_272;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_274;
      std::complex<double> tmp_275;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_275 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_274 += tmp_275;
      result += (-0.0125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_274;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_276;
      std::complex<double> tmp_277;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_277 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_276 += tmp_277;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_276;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_278;
      std::complex<double> tmp_279;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_279 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_278 += tmp_279;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_278;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_280;
      std::complex<double> tmp_281;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_281 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_280 += tmp_281;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_280;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_282;
      std::complex<double> tmp_283;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_283 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_282 += tmp_283;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_282;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_284;
      std::complex<double> tmp_285;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_285 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_284 += tmp_285;
      result += (-0.0125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_284;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_286;
      std::complex<double> tmp_287;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_287 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
      }
      tmp_286 += tmp_287;
      result += (-(Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2))) * tmp_286
         ;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_288;
      std::complex<double> tmp_289;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_289 += Conj(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,j2);
      }
      tmp_288 += tmp_289;
      result += (-(KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1))) * tmp_288;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSdconjUSdconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_290;
   std::complex<double> tmp_292;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_292 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_290 += tmp_292;
   std::complex<double> tmp_291;
   std::complex<double> tmp_293;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_293 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_291 += tmp_293;
   result += (-0.05*Sqr(g1)) * tmp_290 * tmp_291;
   std::complex<double> tmp_294;
   std::complex<double> tmp_296;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_296 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_294 += tmp_296;
   std::complex<double> tmp_295;
   std::complex<double> tmp_297;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_297 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_295 += tmp_297;
   result += (-0.075*Sqr(g1p)) * tmp_294 * tmp_295;
   std::complex<double> tmp_298;
   std::complex<double> tmp_300;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_300 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_298 += tmp_300;
   std::complex<double> tmp_299;
   std::complex<double> tmp_301;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_301 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_299 += tmp_301;
   result += (0.2*Sqr(g1)) * tmp_298 * tmp_299;
   std::complex<double> tmp_302;
   std::complex<double> tmp_304;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_304 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_302 += tmp_304;
   std::complex<double> tmp_303;
   std::complex<double> tmp_305;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_305 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_303 += tmp_305;
   result += (-0.075*Sqr(g1p)) * tmp_302 * tmp_303;
   std::complex<double> tmp_306;
   std::complex<double> tmp_308;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_308 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_306 += tmp_308;
   std::complex<double> tmp_307;
   std::complex<double> tmp_309;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_309 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_307 += tmp_309;
   result += (-0.05*Sqr(g1)) * tmp_306 * tmp_307;
   std::complex<double> tmp_310;
   std::complex<double> tmp_312;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_312 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_310 += tmp_312;
   std::complex<double> tmp_311;
   std::complex<double> tmp_313;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_313 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_311 += tmp_313;
   result += (-0.075*Sqr(g1p)) * tmp_310 * tmp_311;
   std::complex<double> tmp_314;
   std::complex<double> tmp_316;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_316 += Conj(ZU(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_314 += tmp_316;
   std::complex<double> tmp_315;
   std::complex<double> tmp_317;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_317 += Conj(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZU(gI1,j2);
   }
   tmp_315 += tmp_317;
   result += (-1) * tmp_314 * tmp_315;
   std::complex<double> tmp_318;
   std::complex<double> tmp_320;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_320 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_318 += tmp_320;
   std::complex<double> tmp_319;
   std::complex<double> tmp_321;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_321 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_319 += tmp_321;
   result += (0.2*Sqr(g1)) * tmp_318 * tmp_319;
   std::complex<double> tmp_322;
   std::complex<double> tmp_324;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_324 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_322 += tmp_324;
   std::complex<double> tmp_323;
   std::complex<double> tmp_325;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_325 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_323 += tmp_325;
   result += (-0.075*Sqr(g1p)) * tmp_322 * tmp_323;
   if (gO1 < 3) {
      std::complex<double> tmp_326;
      std::complex<double> tmp_327;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_327 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_326 += tmp_327;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_326;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_328;
      std::complex<double> tmp_329;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_329 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_328 += tmp_329;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_328;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_330;
      std::complex<double> tmp_331;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_331 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_330 += tmp_331;
      result += (0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_330;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_332;
      std::complex<double> tmp_333;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_333 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_332 += tmp_333;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_332;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_334;
      std::complex<double> tmp_335;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_335 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_334 += tmp_335;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_334;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_336;
      std::complex<double> tmp_337;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_337 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_336 += tmp_337;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_336;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_338;
      std::complex<double> tmp_339;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_339 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_338 += tmp_339;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_338;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_340;
      std::complex<double> tmp_341;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_341 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_340 += tmp_341;
      result += (0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_340;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_342;
      std::complex<double> tmp_343;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_343 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_342 += tmp_343;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_342;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_344;
      std::complex<double> tmp_345;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_345 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_344 += tmp_345;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_344;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.5*Conj(ZU(gI2,gO2))*Sqr(g2)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Yu(gO2,gO2))*Conj(ZU(gI2,3 + gO2))*Yu(gO1,gO1)*ZU(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdSuHpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_346;
   std::complex<double> tmp_347;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_347 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_346 += tmp_347;
   result += (0.7071067811865475*vs*Conj(Lambdax)*Conj(ZP(gI2,1))) * tmp_346;
   std::complex<double> tmp_348;
   std::complex<double> tmp_349;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_349 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYd(j1,j1);
   }
   tmp_348 += tmp_349;
   result += (Conj(ZP(gI2,0))) * tmp_348;
   std::complex<double> tmp_350;
   std::complex<double> tmp_351;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_351 += Conj(Yu(j2,j2))*Conj(ZU(gI1,3 + j2))*KroneckerDelta(gO2,3 +
         j2)*Yd(j2,j2);
   }
   tmp_350 += tmp_351;
   result += (0.7071067811865475*vu*Conj(ZP(gI2,0))) * tmp_350;
   std::complex<double> tmp_352;
   std::complex<double> tmp_353;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_353 += Conj(Yu(j2,j2))*Conj(ZU(gI1,3 + j2))*KroneckerDelta(gO2,3 +
         j2)*Yd(j2,j2);
   }
   tmp_352 += tmp_353;
   result += (0.7071067811865475*vd*Conj(ZP(gI2,1))) * tmp_352;
   if (gO2 < 3) {
      result += -0.35355339059327373*vd*Conj(ZP(gI2,0))*Conj(ZU(gI1,gO2))*
         Sqr(g2);
   }
   if (gO2 < 3) {
      result += -0.35355339059327373*vu*Conj(ZP(gI2,1))*Conj(ZU(gI1,gO2))*
         Sqr(g2);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vs*Conj(Yu(gO2,gO2))*Conj(ZP(gI2,0))*Conj
         (ZU(gI1,3 + gO2))*Lambdax;
   }
   if (gO2 < 3) {
      result += Conj(ZP(gI2,1))*Conj(ZU(gI1,3 + gO2))*Conj(TYu(gO2,gO2));
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vd*AbsSqr(Yd(gO2,gO2))*Conj(ZP(gI2,0))*
         Conj(ZU(gI1,gO2));
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vu*AbsSqr(Yu(gO2,gO2))*Conj(ZP(gI2,1))*
         Conj(ZU(gI1,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdSdAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_354;
   std::complex<double> tmp_355;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_355 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYd(j1,j1);
   }
   tmp_354 += tmp_355;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) * tmp_354
      ;
   if (gO2 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZD(gI1,3 +
         gO2))*Conj(TYd(gO2,gO2))*ZA(gI2,0);
   }
   std::complex<double> tmp_356;
   std::complex<double> tmp_357;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_357 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_356 += tmp_357;
   result += (std::complex<double>(0,-0.5)*vs*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_356;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vs*Conj(Yd(gO2,gO2))*Conj(ZD(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,1);
   }
   std::complex<double> tmp_358;
   std::complex<double> tmp_359;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_359 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_358 += tmp_359;
   result += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*ZA(gI2,2)) *
      tmp_358;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vu*Conj(Yd(gO2,gO2))*Conj(ZD(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdSdhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_360;
   std::complex<double> tmp_361;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_361 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_360 += tmp_361;
   result += (0.1*vd*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_360;
   std::complex<double> tmp_362;
   std::complex<double> tmp_363;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_363 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_362 += tmp_363;
   result += (0.15*vd*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_362;
   std::complex<double> tmp_364;
   std::complex<double> tmp_365;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_365 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_364 += tmp_365;
   result += (-0.1*vu*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_364;
   std::complex<double> tmp_366;
   std::complex<double> tmp_367;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_367 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_366 += tmp_367;
   result += (0.1*vu*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_366;
   std::complex<double> tmp_368;
   std::complex<double> tmp_369;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_369 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_368 += tmp_369;
   result += (-0.05*QS*vs*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_368;
   std::complex<double> tmp_370;
   std::complex<double> tmp_371;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_371 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_370 += tmp_371;
   result += (0.05*QS*vsb*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_370;
   std::complex<double> tmp_372;
   std::complex<double> tmp_373;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_373 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_372 += tmp_373;
   result += (0.5*vs*Conj(Lambdax)*Conj(ZH(gI2,1))) * tmp_372;
   std::complex<double> tmp_374;
   std::complex<double> tmp_375;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_375 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_374 += tmp_375;
   result += (0.5*vu*Conj(Lambdax)*Conj(ZH(gI2,2))) * tmp_374;
   std::complex<double> tmp_376;
   std::complex<double> tmp_377;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_377 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYd(j1,j1);
   }
   tmp_376 += tmp_377;
   result += (-0.7071067811865475*Conj(ZH(gI2,0))) * tmp_376;
   std::complex<double> tmp_378;
   std::complex<double> tmp_379;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_379 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI1,3 + j2))*KroneckerDelta(gO2,3
         + j2);
   }
   tmp_378 += tmp_379;
   result += (-(vd*Conj(ZH(gI2,0)))) * tmp_378;
   if (gO2 < 3) {
      result += 0.05*vd*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += 0.075*vd*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.25*vd*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g2);
   }
   if (gO2 < 3) {
      result += -0.05*vu*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += 0.05*vu*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += -0.25*vu*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g2);
   }
   if (gO2 < 3) {
      result += 0.5*vs*Conj(Yd(gO2,gO2))*Conj(ZD(gI1,3 + gO2))*Conj(ZH(gI2,1
         ))*Lambdax;
   }
   if (gO2 < 3) {
      result += -0.025*QS*vs*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*vu*Conj(Yd(gO2,gO2))*Conj(ZD(gI1,3 + gO2))*Conj(ZH(gI2,2
         ))*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.025*QS*vsb*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,3))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZD(gI1,3 + gO2))*Conj(ZH(gI2,0))*
         Conj(TYd(gO2,gO2));
   }
   if (gO2 < 3) {
      result += -(vd*AbsSqr(Yd(gO2,gO2))*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,0)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdGluFdPR(unsigned gO2, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_380;
   std::complex<double> tmp_381;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_381 += KroneckerDelta(gO2,3 + j1)*ZDR(gI2,j1);
   }
   tmp_380 += tmp_381;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_380;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdGluFdPL(unsigned gO1, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*PhaseGlu*Conj(ZDL(gI2,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdVGSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 6) {
      result += g3*Conj(ZD(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdVPSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_382;
   std::complex<double> tmp_383;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_383 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_382 += tmp_383;
   result += (-0.2581988897471611*g1*Cos(ThetaW())) * tmp_382;
   if (gO2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZD(gI2,gO2))*Cos(ThetaW());
   }
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZD(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdVZSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_384;
   std::complex<double> tmp_385;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_385 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_384 += tmp_385;
   result += (0.2581988897471611*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_384;
   std::complex<double> tmp_386;
   std::complex<double> tmp_387;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_387 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_386 += tmp_387;
   result += (-0.31622776601683794*g1p*Sin(ThetaWp())) * tmp_386;
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZD(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZD(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gO2 < 3) {
      result += 0.15811388300841897*g1p*Conj(ZD(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdVZpSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_388;
   std::complex<double> tmp_389;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_389 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_388 += tmp_389;
   result += (-0.31622776601683794*g1p*Cos(ThetaWp())) * tmp_388;
   std::complex<double> tmp_390;
   std::complex<double> tmp_391;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_391 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_390 += tmp_391;
   result += (-0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_390;
   if (gO2 < 3) {
      result += 0.15811388300841897*g1p*Conj(ZD(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.5*g2*Conj(ZD(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZD(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSdVWmSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7071067811865475*g2*Conj(ZU(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(gO1,gO2)*(3.1622776601683795*g1p*g2*Cos(ThetaW()
      )*Sin(2*ThetaWp()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) +
      3*g1*Sin(ThetaW()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
      Cos(ThetaWp())) + g1p*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) +
      2*g1p*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(gO1,gO2)*(-2*Cos(ThetaWp())*(3.1622776601683795*
      g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())
      *Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + (g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp())));

   return result;
}

double CLASSNAME::CpUSvconjUSvconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result += -0.15*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,0);
   result += 0.15*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1,0);
   result += 0.25*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,0);
   if (gO1 < 3) {
      result += -(AbsSqr(Ye(gO1,gO1))*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2
         )*ZP(gI1,0));
   }
   result += 0.15*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,1);
   result += 0.1*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1,1);
   result += -0.25*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,1);

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*KroneckerDelta(gO1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*
      (Conj(UHp0(gI2,0))*UHp0(gI1,0) - Conj(UHp0(gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*KroneckerDelta(gO1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) - 5*Sqr(g2))*
      (Conj(UHpp(gI2,0))*UHpp(gI1,0) - Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvbarChaFePR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(Ye(gO2,gO2))*UM(gI1,1)*ZER(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvbarChaFePL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(g2*Conj(UP(gI1,0))*Conj(ZEL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvconjHpmSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.35355339059327373*vd*Conj(ZE(gI2,gO2))*Sqr(g2)*ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += Conj(ZE(gI2,3 + gO2))*Conj(TYe(gO2,gO2))*ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vd*AbsSqr(Ye(gO2,gO2))*Conj(ZE(gI2,gO2))*
         ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += -0.35355339059327373*vu*Conj(ZE(gI2,gO2))*Sqr(g2)*ZP(gI1,1);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vs*Conj(Ye(gO2,gO2))*Conj(ZE(gI2,3 + gO2)
         )*Lambdax*ZP(gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result += -0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1);
   result += -0.1*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1p);
   result += -0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2);
   if (gI1 < 3 && gI2 < 3) {
      result += -0.15*Conj(ZV(gI2,gO2))*Sqr(g1)*ZV(gI1,gO1);
   }
   if (gI1 < 3 && gI2 < 3) {
      result += -0.1*Conj(ZV(gI2,gO2))*Sqr(g1p)*ZV(gI1,gO1);
   }
   if (gI1 < 3 && gI2 < 3) {
      result += -0.25*Conj(ZV(gI2,gO2))*Sqr(g2)*ZV(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvSvhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   if (gI1 < 3) {
      result += -0.15*vd*Conj(ZH(gI2,0))*Conj(ZV(gI1,gO2))*Sqr(g1);
   }
   if (gI1 < 3) {
      result += 0.15*vd*Conj(ZH(gI2,0))*Conj(ZV(gI1,gO2))*Sqr(g1p);
   }
   if (gI1 < 3) {
      result += -0.25*vd*Conj(ZH(gI2,0))*Conj(ZV(gI1,gO2))*Sqr(g2);
   }
   if (gI1 < 3) {
      result += 0.15*vu*Conj(ZH(gI2,1))*Conj(ZV(gI1,gO2))*Sqr(g1);
   }
   if (gI1 < 3) {
      result += 0.1*vu*Conj(ZH(gI2,1))*Conj(ZV(gI1,gO2))*Sqr(g1p);
   }
   if (gI1 < 3) {
      result += 0.25*vu*Conj(ZH(gI2,1))*Conj(ZV(gI1,gO2))*Sqr(g2);
   }
   if (gI1 < 3) {
      result += -0.05*QS*vs*Conj(ZH(gI2,2))*Conj(ZV(gI1,gO2))*Sqr(g1p);
   }
   if (gI1 < 3) {
      result += 0.05*QS*vsb*Conj(ZH(gI2,3))*Conj(ZV(gI1,gO2))*Sqr(g1p);
   }

   return result;
}

double CLASSNAME::CpconjUSvFvChiPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvFvChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += 0.5477225575051661*g1*Conj(ZN(gI2,0))*KroneckerDelta(gI1,gO1
         );
   }
   if (gI1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZN(gI2,1))*KroneckerDelta(gI1,
         gO1);
   }
   if (gI1 < 3) {
      result += -0.4472135954999579*g1p*Conj(ZN(gI2,7))*KroneckerDelta(gI1,
         gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*KroneckerDelta(gO1,gO2)*((-3*Sqr(g1) + 3*Sqr(g1p) - 5*Sqr(g2))
      *ZA(gI1,0)*ZA(gI2,0) + (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2
      ,1) + QS*Sqr(g1p)*(-(ZA(gI1,2)*ZA(gI2,2)) + ZA(gI1,3)*ZA(gI2,3)));

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*KroneckerDelta(gO1,gO2)*(QS*(-(Conj(ZH(gI1,2))*Conj(ZH(gI2,2))
      ) + Conj(ZH(gI1,3))*Conj(ZH(gI2,3)))*Sqr(g1p) + Conj(ZH(gI1,0))*Conj(ZH(gI2,
      0))*(-3*Sqr(g1) + 3*Sqr(g1p) - 5*Sqr(g2)) + Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*
      (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2)));

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_392;
   std::complex<double> tmp_393;
   std::complex<double> tmp_394;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_394 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_393 += tmp_394;
   tmp_392 += (std::complex<double>(0,0.05)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_393;
   std::complex<double> tmp_395;
   std::complex<double> tmp_396;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_396 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_395 += tmp_396;
   tmp_392 += (std::complex<double>(0,-0.05)*KroneckerDelta(gO1,gO2)*Sqr(g1p))
      * tmp_395;
   std::complex<double> tmp_397;
   std::complex<double> tmp_398;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_398 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_397 += tmp_398;
   tmp_392 += (std::complex<double>(0,0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_397;
   std::complex<double> tmp_399;
   std::complex<double> tmp_400;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_400 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_399 += tmp_400;
   tmp_392 += (std::complex<double>(0,0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_399;
   std::complex<double> tmp_401;
   std::complex<double> tmp_402;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_402 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_401 += tmp_402;
   tmp_392 += (std::complex<double>(0,-0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1p)) *
      tmp_401;
   result += (std::complex<double>(0,-1)) * tmp_392;

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_403;
   std::complex<double> tmp_404;
   std::complex<double> tmp_405;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_405 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_404 += tmp_405;
   tmp_403 += (std::complex<double>(0,-0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_404;
   std::complex<double> tmp_406;
   std::complex<double> tmp_407;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_407 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_406 += tmp_407;
   tmp_403 += (std::complex<double>(0,0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1p)) *
      tmp_406;
   std::complex<double> tmp_408;
   std::complex<double> tmp_409;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_409 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_408 += tmp_409;
   tmp_403 += (std::complex<double>(0,0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_408;
   std::complex<double> tmp_410;
   std::complex<double> tmp_411;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_411 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_410 += tmp_411;
   tmp_403 += (std::complex<double>(0,0.15)*KroneckerDelta(gO1,gO2)*Sqr(g1p)) *
      tmp_410;
   result += (std::complex<double>(0,-1)) * tmp_403;

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_412;
   std::complex<double> tmp_413;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_413 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_412 += tmp_413;
   result += (-0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_412;
   std::complex<double> tmp_414;
   std::complex<double> tmp_415;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_415 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_414 += tmp_415;
   result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_414;
   std::complex<double> tmp_416;
   std::complex<double> tmp_417;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_417 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_416 += tmp_417;
   result += (0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_416;
   std::complex<double> tmp_418;
   std::complex<double> tmp_419;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_419 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_418 += tmp_419;
   result += (0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_418;
   std::complex<double> tmp_420;
   std::complex<double> tmp_421;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_421 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_420 += tmp_421;
   result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_420;
   if (gO1 < 3 && gO2 < 3) {
      result += -0.5*Conj(ZE(gI2,gO2))*Sqr(g2)*ZE(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Ye(gO2,gO2))*Conj(ZE(gI2,3 + gO2))*Ye(gO1,gO1)*ZE(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSvconjUSvconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_422;
   std::complex<double> tmp_423;
   std::complex<double> tmp_424;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_424 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_423 += tmp_424;
   tmp_422 += (std::complex<double>(0,0.05)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_423;
   std::complex<double> tmp_425;
   std::complex<double> tmp_426;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_426 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_425 += tmp_426;
   tmp_422 += (std::complex<double>(0,-0.05)*KroneckerDelta(gO1,gO2)*Sqr(g1p))
      * tmp_425;
   std::complex<double> tmp_427;
   std::complex<double> tmp_428;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_428 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_427 += tmp_428;
   tmp_422 += (std::complex<double>(0,-0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_427;
   std::complex<double> tmp_429;
   std::complex<double> tmp_430;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_430 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_429 += tmp_430;
   tmp_422 += (std::complex<double>(0,-0.2)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_429;
   std::complex<double> tmp_431;
   std::complex<double> tmp_432;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_432 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_431 += tmp_432;
   tmp_422 += (std::complex<double>(0,-0.05)*KroneckerDelta(gO1,gO2)*Sqr(g1p))
      * tmp_431;
   result += (std::complex<double>(0,-1)) * tmp_422;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvVZSv(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZV(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.3872983346207417*g1*Conj(ZV(gI2,gO2))*Cos(ThetaWp())*Sin(
         ThetaW());
   }
   if (gI2 < 3) {
      result += 0.31622776601683794*g1p*Conj(ZV(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvVZpSv(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.31622776601683794*g1p*Conj(ZV(gI2,gO2))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZV(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.3872983346207417*g1*Conj(ZV(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSvconjVWmSe(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7071067811865475*g2*Conj(ZE(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_433;
   std::complex<double> tmp_434;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_434 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_433 += tmp_434;
   result += (0.5333333333333333*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW()))
      ) * tmp_433;
   std::complex<double> tmp_435;
   std::complex<double> tmp_436;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_436 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_435 += tmp_436;
   result += (0.32659863237109044*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_435;
   std::complex<double> tmp_437;
   std::complex<double> tmp_438;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_438 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_437 += tmp_438;
   result += (0.05*Sqr(g1p)*Sqr(Sin(ThetaWp()))) * tmp_437;
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.2581988897471611*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.03333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(
         ThetaWp()))*Sqr(Sin(ThetaW()));
   }
   if (gO1 < 3) {
      result += 0.31622776601683794*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += -0.08164965809277262*g1*g1p*Cos(ThetaWp())*KroneckerDelta(
         gO1,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_439;
   std::complex<double> tmp_440;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_440 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_439 += tmp_440;
   result += (0.05*Sqr(g1p)*Sqr(Cos(ThetaWp()))) * tmp_439;
   std::complex<double> tmp_441;
   std::complex<double> tmp_442;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_442 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_441 += tmp_442;
   result += (-0.32659863237109044*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_441;
   std::complex<double> tmp_443;
   std::complex<double> tmp_444;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_444 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_443 += tmp_444;
   result += (0.5333333333333333*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()))
      ) * tmp_443;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.31622776601683794*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.08164965809277262*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1
         ,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.2581988897471611*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.03333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(
         ThetaW()))*Sqr(Sin(ThetaWp()));
   }

   return result;
}

double CLASSNAME::CpUSuconjUSuconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_445;
   std::complex<double> tmp_446;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_446 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_445 += tmp_446;
   result += (-0.2*Conj(ZP(gI2,0))*Sqr(g1)*ZP(gI1,0)) * tmp_445;
   std::complex<double> tmp_447;
   std::complex<double> tmp_448;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_448 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_447 += tmp_448;
   result += (0.075*Conj(ZP(gI2,0))*Sqr(g1p)*ZP(gI1,0)) * tmp_447;
   if (gO1 < 3) {
      result += 0.05*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,
         0);
   }
   if (gO1 < 3) {
      result += 0.075*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(
         gI1,0);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,
         0);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yd(gO1,gO1))*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2
         )*ZP(gI1,0));
   }
   std::complex<double> tmp_449;
   std::complex<double> tmp_450;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_450 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_449 += tmp_450;
   result += (0.2*Conj(ZP(gI2,1))*Sqr(g1)*ZP(gI1,1)) * tmp_449;
   std::complex<double> tmp_451;
   std::complex<double> tmp_452;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_452 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_451 += tmp_452;
   result += (0.05*Conj(ZP(gI2,1))*Sqr(g1p)*ZP(gI1,1)) * tmp_451;
   std::complex<double> tmp_453;
   std::complex<double> tmp_454;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_454 += AbsSqr(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_453 += tmp_454;
   result += (-(Conj(ZP(gI2,1))*ZP(gI1,1))) * tmp_453;
   if (gO1 < 3) {
      result += -0.05*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1
         ,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1
         ,1);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1
         ,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_455;
   std::complex<double> tmp_456;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_456 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_455 += tmp_456;
   result += (-0.2*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_455;
   std::complex<double> tmp_457;
   std::complex<double> tmp_458;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_458 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_457 += tmp_458;
   result += (-0.05*Conj(UHp0(gI2,0))*Sqr(g1p)*UHp0(gI1,0)) * tmp_457;
   if (gO1 < 3) {
      result += 0.05*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*
         UHp0(gI1,0);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0
         (gI1,0);
   }
   std::complex<double> tmp_459;
   std::complex<double> tmp_460;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_460 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_459 += tmp_460;
   result += (0.2*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_459;
   std::complex<double> tmp_461;
   std::complex<double> tmp_462;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_462 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_461 += tmp_462;
   result += (0.05*Conj(UHp0(gI2,1))*Sqr(g1p)*UHp0(gI1,1)) * tmp_461;
   if (gO1 < 3) {
      result += -0.05*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0(
         gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_463;
   std::complex<double> tmp_464;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_464 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_463 += tmp_464;
   result += (-0.2*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_463;
   std::complex<double> tmp_465;
   std::complex<double> tmp_466;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_466 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_465 += tmp_466;
   result += (-0.05*Conj(UHpp(gI2,0))*Sqr(g1p)*UHpp(gI1,0)) * tmp_465;
   if (gO1 < 3) {
      result += 0.05*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*
         UHpp(gI1,0);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp(
         gI1,0);
   }
   std::complex<double> tmp_467;
   std::complex<double> tmp_468;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_468 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_467 += tmp_468;
   result += (0.2*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_467;
   std::complex<double> tmp_469;
   std::complex<double> tmp_470;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_470 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_469 += tmp_470;
   result += (0.05*Conj(UHpp(gI2,1))*Sqr(g1p)*UHpp(gI1,1)) * tmp_469;
   if (gO1 < 3) {
      result += -0.05*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp
         (gI1,1);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp
         (gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSubarChaFdPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(Yd(gO2,gO2))*UM(gI1,1)*ZDR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSubarChaFdPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_471;
   std::complex<double> tmp_472;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_472 += Conj(ZDL(gI2,j1))*KroneckerDelta(gO1,3 + j1)*Yu(j1,j1);
   }
   tmp_471 += tmp_472;
   result += (Conj(UP(gI1,1))) * tmp_471;
   if (gO1 < 3) {
      result += -(g2*Conj(UP(gI1,0))*Conj(ZDL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuconjHpmSd(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_473;
   std::complex<double> tmp_474;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_474 += Conj(ZD(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_473 += tmp_474;
   result += (0.7071067811865475*vs*Conj(Lambdax)*ZP(gI1,0)) * tmp_473;
   std::complex<double> tmp_475;
   std::complex<double> tmp_476;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_476 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 +
         j2)*Yu(j2,j2);
   }
   tmp_475 += tmp_476;
   result += (0.7071067811865475*vu*ZP(gI1,0)) * tmp_475;
   if (gO2 < 3) {
      result += -0.35355339059327373*vd*Conj(ZD(gI2,gO2))*Sqr(g2)*ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += Conj(ZD(gI2,3 + gO2))*Conj(TYd(gO2,gO2))*ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vd*AbsSqr(Yd(gO2,gO2))*Conj(ZD(gI2,gO2))*
         ZP(gI1,0);
   }
   std::complex<double> tmp_477;
   std::complex<double> tmp_478;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_478 += Conj(ZD(gI2,j1))*KroneckerDelta(gO2,3 + j1)*TYu(j1,j1);
   }
   tmp_477 += tmp_478;
   result += (ZP(gI1,1)) * tmp_477;
   std::complex<double> tmp_479;
   std::complex<double> tmp_480;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_480 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 +
         j2)*Yu(j2,j2);
   }
   tmp_479 += tmp_480;
   result += (0.7071067811865475*vd*ZP(gI1,1)) * tmp_479;
   if (gO2 < 3) {
      result += -0.35355339059327373*vu*Conj(ZD(gI2,gO2))*Sqr(g2)*ZP(gI1,1);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vs*Conj(Yd(gO2,gO2))*Conj(ZD(gI2,3 + gO2)
         )*Lambdax*ZP(gI1,1);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vu*AbsSqr(Yu(gO2,gO2))*Conj(ZD(gI2,gO2))*
         ZP(gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_481;
   std::complex<double> tmp_482;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_482 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_481 += tmp_482;
   result += (-0.2*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_481;
   std::complex<double> tmp_483;
   std::complex<double> tmp_484;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_484 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_483 += tmp_484;
   result += (-0.05*KroneckerDelta(gI1,gI2)*Sqr(g1p)) * tmp_483;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1)
         ;
   }
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(
         g1p);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuFuChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_485;
   std::complex<double> tmp_486;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_486 += KroneckerDelta(gO2,3 + j1)*ZUR(gI1,j1);
   }
   tmp_485 += tmp_486;
   result += (0.7302967433402214*g1*ZN(gI2,0)) * tmp_485;
   std::complex<double> tmp_487;
   std::complex<double> tmp_488;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_488 += KroneckerDelta(gO2,3 + j1)*ZUR(gI1,j1);
   }
   tmp_487 += tmp_488;
   result += (-0.22360679774997896*g1p*ZN(gI2,7)) * tmp_487;
   if (gO2 < 3) {
      result += -(Conj(Yu(gO2,gO2))*ZN(gI2,3)*ZUR(gI1,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuFuChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_489;
   std::complex<double> tmp_490;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_490 += Conj(ZUL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Yu(j1,j1);
   }
   tmp_489 += tmp_490;
   result += (-Conj(ZN(gI2,3))) * tmp_489;
   if (gO1 < 3) {
      result += -0.18257418583505536*g1*Conj(ZN(gI2,0))*Conj(ZUL(gI1,gO1));
   }
   if (gO1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZN(gI2,1))*Conj(ZUL(gI1,gO1));
   }
   if (gO1 < 3) {
      result += -0.22360679774997896*g1p*Conj(ZN(gI2,7))*Conj(ZUL(gI1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_491;
   std::complex<double> tmp_492;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_492 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_491 += tmp_492;
   result += (-0.2*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_491;
   std::complex<double> tmp_493;
   std::complex<double> tmp_494;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_494 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_493 += tmp_494;
   result += (0.075*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0)) * tmp_493;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Yu(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,2)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1)*
         ZA(gI1,2)*ZA(gI2,0);
   }
   std::complex<double> tmp_495;
   std::complex<double> tmp_496;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_496 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_495 += tmp_496;
   result += (0.2*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_495;
   std::complex<double> tmp_497;
   std::complex<double> tmp_498;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_498 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_497 += tmp_498;
   result += (0.05*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1)) * tmp_497;
   std::complex<double> tmp_499;
   std::complex<double> tmp_500;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_500 += AbsSqr(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_499 += tmp_500;
   result += (-(ZA(gI1,1)*ZA(gI2,1))) * tmp_499;
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yu(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,1)*ZA(
         gI2,1));
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Yu(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,0)*ZA(gI2,2);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1)*
         ZA(gI1,0)*ZA(gI2,2);
   }
   std::complex<double> tmp_501;
   std::complex<double> tmp_502;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_502 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_501 += tmp_502;
   result += (-0.025*QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2)) * tmp_501;
   if (gO1 < 3) {
      result += -0.025*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,
         2);
   }
   std::complex<double> tmp_503;
   std::complex<double> tmp_504;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_504 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_503 += tmp_504;
   result += (0.025*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) * tmp_503;
   if (gO1 < 3) {
      result += 0.025*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result += -0.025*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(gO1,gO2)*
      Sqr(g1p);
   result += 0.025*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(gO1,gO2)*
      Sqr(g1p);
   std::complex<double> tmp_505;
   std::complex<double> tmp_506;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_506 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_505 += tmp_506;
   result += (-0.2*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_505;
   std::complex<double> tmp_507;
   std::complex<double> tmp_508;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_508 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_507 += tmp_508;
   result += (0.075*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_507;
   std::complex<double> tmp_509;
   std::complex<double> tmp_510;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_510 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_509 += tmp_510;
   result += (0.2*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_509;
   std::complex<double> tmp_511;
   std::complex<double> tmp_512;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_512 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_511 += tmp_512;
   result += (0.05*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_511;
   std::complex<double> tmp_513;
   std::complex<double> tmp_514;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_514 += AbsSqr(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_513 += tmp_514;
   result += (-(Conj(ZH(gI1,1))*Conj(ZH(gI2,1)))) * tmp_513;
   if (gO1 < 3) {
      result += 0.05*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2)
         *Sqr(g1);
   }
   if (gO1 < 3) {
      result += 0.075*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2
         )*Sqr(g1p);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2
         )*Sqr(g2);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2
         )*Sqr(g1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)
         *Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)
         *Sqr(g2);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Yu(gO2,gO2))*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Yu(gO2,gO2))*Conj(ZH(gI1,0))*Conj(ZH(gI2,2))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yu(gO1,gO1))*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*
         KroneckerDelta(gO1,gO2));
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*
         KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,0))*Conj(ZH(gI2,2))*
         KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_515;
   std::complex<double> tmp_517;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_517 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_515 += tmp_517;
   std::complex<double> tmp_516;
   std::complex<double> tmp_518;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_518 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_516 += tmp_518;
   result += (0.1*Sqr(g1)) * tmp_515 * tmp_516;
   std::complex<double> tmp_519;
   std::complex<double> tmp_521;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_521 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_519 += tmp_521;
   std::complex<double> tmp_520;
   std::complex<double> tmp_522;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_522 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_520 += tmp_522;
   result += (-0.0375*Sqr(g1p)) * tmp_519 * tmp_520;
   std::complex<double> tmp_523;
   std::complex<double> tmp_525;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_525 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_523 += tmp_525;
   std::complex<double> tmp_524;
   std::complex<double> tmp_526;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_526 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_524 += tmp_526;
   result += (0.2*Sqr(g1)) * tmp_523 * tmp_524;
   std::complex<double> tmp_527;
   std::complex<double> tmp_529;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_529 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_527 += tmp_529;
   std::complex<double> tmp_528;
   std::complex<double> tmp_530;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_530 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_528 += tmp_530;
   result += (-0.075*Sqr(g1p)) * tmp_527 * tmp_528;
   std::complex<double> tmp_531;
   std::complex<double> tmp_533;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_533 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_531 += tmp_533;
   std::complex<double> tmp_532;
   std::complex<double> tmp_534;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_534 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_532 += tmp_534;
   result += (0.1*Sqr(g1)) * tmp_531 * tmp_532;
   std::complex<double> tmp_535;
   std::complex<double> tmp_537;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_537 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_535 += tmp_537;
   std::complex<double> tmp_536;
   std::complex<double> tmp_538;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_538 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_536 += tmp_538;
   result += (-0.0375*Sqr(g1p)) * tmp_535 * tmp_536;
   std::complex<double> tmp_539;
   std::complex<double> tmp_541;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_541 += Conj(ZD(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_539 += tmp_541;
   std::complex<double> tmp_540;
   std::complex<double> tmp_542;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_542 += Conj(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZD(gI1,j2);
   }
   tmp_540 += tmp_542;
   result += (-1) * tmp_539 * tmp_540;
   std::complex<double> tmp_543;
   std::complex<double> tmp_545;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_545 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_543 += tmp_545;
   std::complex<double> tmp_544;
   std::complex<double> tmp_546;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_546 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_544 += tmp_546;
   result += (0.2*Sqr(g1)) * tmp_543 * tmp_544;
   std::complex<double> tmp_547;
   std::complex<double> tmp_549;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_549 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_547 += tmp_549;
   std::complex<double> tmp_548;
   std::complex<double> tmp_550;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_550 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_548 += tmp_550;
   result += (-0.075*Sqr(g1p)) * tmp_547 * tmp_548;
   if (gO1 < 3) {
      std::complex<double> tmp_551;
      std::complex<double> tmp_552;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_552 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_551 += tmp_552;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_551;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_553;
      std::complex<double> tmp_554;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_554 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_553 += tmp_554;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_553;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_555;
      std::complex<double> tmp_556;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_556 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_555 += tmp_556;
      result += (0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_555;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_557;
      std::complex<double> tmp_558;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_558 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_557 += tmp_558;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_557;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_559;
      std::complex<double> tmp_560;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_560 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_559 += tmp_560;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_559;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_561;
      std::complex<double> tmp_562;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_562 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_561 += tmp_562;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_561;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_563;
      std::complex<double> tmp_564;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_564 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_563 += tmp_564;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_563;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_565;
      std::complex<double> tmp_566;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_566 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_565 += tmp_566;
      result += (0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_565;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_567;
      std::complex<double> tmp_568;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_568 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_567 += tmp_568;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_567;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_569;
      std::complex<double> tmp_570;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_570 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_569 += tmp_570;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_569;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.5*Conj(ZD(gI2,gO2))*Sqr(g2)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Yd(gO2,gO2))*Conj(ZD(gI2,3 + gO2))*Yd(gO1,gO1)*ZD(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_571;
   std::complex<double> tmp_573;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_573 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_571 += tmp_573;
   std::complex<double> tmp_572;
   std::complex<double> tmp_574;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_574 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_572 += tmp_574;
   result += (-0.2*Sqr(g1)) * tmp_571 * tmp_572;
   std::complex<double> tmp_575;
   std::complex<double> tmp_577;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_577 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_575 += tmp_577;
   std::complex<double> tmp_576;
   std::complex<double> tmp_578;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_578 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_576 += tmp_578;
   result += (0.075*Sqr(g1p)) * tmp_575 * tmp_576;
   std::complex<double> tmp_579;
   std::complex<double> tmp_581;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_581 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_579 += tmp_581;
   std::complex<double> tmp_580;
   std::complex<double> tmp_582;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_582 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_580 += tmp_582;
   result += (0.2*Sqr(g1)) * tmp_579 * tmp_580;
   std::complex<double> tmp_583;
   std::complex<double> tmp_585;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_585 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_583 += tmp_585;
   std::complex<double> tmp_584;
   std::complex<double> tmp_586;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_586 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_584 += tmp_586;
   result += (0.1125*Sqr(g1p)) * tmp_583 * tmp_584;
   std::complex<double> tmp_587;
   std::complex<double> tmp_589;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_589 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_587 += tmp_589;
   std::complex<double> tmp_588;
   std::complex<double> tmp_590;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_590 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_588 += tmp_590;
   result += (-0.2*Sqr(g1)) * tmp_587 * tmp_588;
   std::complex<double> tmp_591;
   std::complex<double> tmp_593;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_593 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_591 += tmp_593;
   std::complex<double> tmp_592;
   std::complex<double> tmp_594;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_594 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_592 += tmp_594;
   result += (0.075*Sqr(g1p)) * tmp_591 * tmp_592;
   std::complex<double> tmp_595;
   std::complex<double> tmp_597;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_597 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_595 += tmp_597;
   std::complex<double> tmp_596;
   std::complex<double> tmp_598;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_598 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_596 += tmp_598;
   result += (0.2*Sqr(g1)) * tmp_595 * tmp_596;
   std::complex<double> tmp_599;
   std::complex<double> tmp_601;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_601 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_599 += tmp_601;
   std::complex<double> tmp_600;
   std::complex<double> tmp_602;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_602 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_600 += tmp_602;
   result += (0.1125*Sqr(g1p)) * tmp_599 * tmp_600;
   if (gO1 < 3) {
      std::complex<double> tmp_603;
      std::complex<double> tmp_604;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_604 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_603 += tmp_604;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_603;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_605;
      std::complex<double> tmp_606;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_606 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_605 += tmp_606;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_605;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_607;
      std::complex<double> tmp_608;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_608 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_607 += tmp_608;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_607;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_609;
      std::complex<double> tmp_610;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_610 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_609 += tmp_610;
      result += (0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_609;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_611;
      std::complex<double> tmp_612;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_612 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_611 += tmp_612;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_611;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_613;
      std::complex<double> tmp_614;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_614 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_613 += tmp_614;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_613;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_615;
      std::complex<double> tmp_616;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_616 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_615 += tmp_616;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_615;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_617;
      std::complex<double> tmp_618;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_618 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_617 += tmp_618;
      result += (0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_617;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_619;
   std::complex<double> tmp_621;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_621 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_619 += tmp_621;
   std::complex<double> tmp_620;
   std::complex<double> tmp_622;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_622 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_620 += tmp_622;
   result += (-0.1*Sqr(g1)) * tmp_619 * tmp_620;
   std::complex<double> tmp_623;
   std::complex<double> tmp_625;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_625 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_623 += tmp_625;
   std::complex<double> tmp_624;
   std::complex<double> tmp_626;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_626 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_624 += tmp_626;
   result += (-0.025*Sqr(g1p)) * tmp_623 * tmp_624;
   std::complex<double> tmp_627;
   std::complex<double> tmp_629;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_629 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_627 += tmp_629;
   std::complex<double> tmp_628;
   std::complex<double> tmp_630;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_630 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_628 += tmp_630;
   result += (0.2*Sqr(g1)) * tmp_627 * tmp_628;
   std::complex<double> tmp_631;
   std::complex<double> tmp_633;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_633 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_631 += tmp_633;
   std::complex<double> tmp_632;
   std::complex<double> tmp_634;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_634 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_632 += tmp_634;
   result += (-0.0125*Sqr(g1p)) * tmp_631 * tmp_632;
   std::complex<double> tmp_635;
   std::complex<double> tmp_637;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_637 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_635 += tmp_637;
   std::complex<double> tmp_636;
   std::complex<double> tmp_638;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_638 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_636 += tmp_638;
   result += (-0.1*Sqr(g1)) * tmp_635 * tmp_636;
   std::complex<double> tmp_639;
   std::complex<double> tmp_641;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_641 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_639 += tmp_641;
   std::complex<double> tmp_640;
   std::complex<double> tmp_642;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_642 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_640 += tmp_642;
   result += (-0.025*Sqr(g1p)) * tmp_639 * tmp_640;
   std::complex<double> tmp_643;
   std::complex<double> tmp_645;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_645 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_643 += tmp_645;
   std::complex<double> tmp_644;
   std::complex<double> tmp_646;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_646 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_644 += tmp_646;
   result += (0.2*Sqr(g1)) * tmp_643 * tmp_644;
   std::complex<double> tmp_647;
   std::complex<double> tmp_649;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_649 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_647 += tmp_649;
   std::complex<double> tmp_648;
   std::complex<double> tmp_650;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_650 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_648 += tmp_650;
   result += (-0.0125*Sqr(g1p)) * tmp_647 * tmp_648;
   if (gO1 < 3) {
      std::complex<double> tmp_651;
      std::complex<double> tmp_652;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_652 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_651 += tmp_652;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_651;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_653;
      std::complex<double> tmp_654;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_654 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_653 += tmp_654;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_653;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_655;
      std::complex<double> tmp_656;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_656 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_655 += tmp_656;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_655;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_657;
      std::complex<double> tmp_658;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_658 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_657 += tmp_658;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_657;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_659;
      std::complex<double> tmp_660;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_660 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_659 += tmp_660;
      result += (-0.0125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_659;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_661;
      std::complex<double> tmp_662;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_662 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_661 += tmp_662;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_661;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_663;
      std::complex<double> tmp_664;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_664 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_663 += tmp_664;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_663;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_665;
      std::complex<double> tmp_666;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_666 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_665 += tmp_666;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_665;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_667;
      std::complex<double> tmp_668;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_668 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_667 += tmp_668;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_667;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_669;
      std::complex<double> tmp_670;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_670 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_669 += tmp_670;
      result += (-0.0125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_669;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSuconjUSuconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_671;
   std::complex<double> tmp_673;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_673 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
   }
   tmp_671 += tmp_673;
   std::complex<double> tmp_672;
   std::complex<double> tmp_674;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_674 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_672 += tmp_674;
   result += (-0.13333333333333333*Sqr(g1)) * tmp_671 * tmp_672;
   std::complex<double> tmp_675;
   std::complex<double> tmp_677;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_677 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
   }
   tmp_675 += tmp_677;
   std::complex<double> tmp_676;
   std::complex<double> tmp_678;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_678 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_676 += tmp_678;
   result += (-0.0125*Sqr(g1p)) * tmp_675 * tmp_676;
   std::complex<double> tmp_679;
   std::complex<double> tmp_681;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_681 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
   }
   tmp_679 += tmp_681;
   std::complex<double> tmp_680;
   std::complex<double> tmp_682;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_682 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_680 += tmp_682;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_679 * tmp_680;
   std::complex<double> tmp_683;
   std::complex<double> tmp_685;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_685 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_683 += tmp_685;
   std::complex<double> tmp_684;
   std::complex<double> tmp_686;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_686 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_684 += tmp_686;
   result += (0.1*Sqr(g1)) * tmp_683 * tmp_684;
   std::complex<double> tmp_687;
   std::complex<double> tmp_689;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_689 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_687 += tmp_689;
   std::complex<double> tmp_688;
   std::complex<double> tmp_690;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_690 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_688 += tmp_690;
   result += (-0.0375*Sqr(g1p)) * tmp_687 * tmp_688;
   std::complex<double> tmp_691;
   std::complex<double> tmp_693;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_693 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_691 += tmp_693;
   std::complex<double> tmp_692;
   std::complex<double> tmp_694;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_694 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_692 += tmp_694;
   result += (-0.4*Sqr(g1)) * tmp_691 * tmp_692;
   std::complex<double> tmp_695;
   std::complex<double> tmp_697;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_697 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_695 += tmp_697;
   std::complex<double> tmp_696;
   std::complex<double> tmp_698;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_698 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_696 += tmp_698;
   result += (-0.0375*Sqr(g1p)) * tmp_695 * tmp_696;
   std::complex<double> tmp_699;
   std::complex<double> tmp_701;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_701 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_699 += tmp_701;
   std::complex<double> tmp_700;
   std::complex<double> tmp_702;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_702 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_700 += tmp_702;
   result += (0.1*Sqr(g1)) * tmp_699 * tmp_700;
   std::complex<double> tmp_703;
   std::complex<double> tmp_705;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_705 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_703 += tmp_705;
   std::complex<double> tmp_704;
   std::complex<double> tmp_706;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_706 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_704 += tmp_706;
   result += (-0.0375*Sqr(g1p)) * tmp_703 * tmp_704;
   std::complex<double> tmp_707;
   std::complex<double> tmp_709;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_709 += Conj(ZU(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_707 += tmp_709;
   std::complex<double> tmp_708;
   std::complex<double> tmp_710;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_710 += Conj(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZU(gI1,j2);
   }
   tmp_708 += tmp_710;
   result += (-1) * tmp_707 * tmp_708;
   std::complex<double> tmp_711;
   std::complex<double> tmp_713;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_713 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_711 += tmp_713;
   std::complex<double> tmp_712;
   std::complex<double> tmp_714;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_714 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_712 += tmp_714;
   result += (-0.4*Sqr(g1)) * tmp_711 * tmp_712;
   std::complex<double> tmp_715;
   std::complex<double> tmp_717;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_717 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_715 += tmp_717;
   std::complex<double> tmp_716;
   std::complex<double> tmp_718;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_718 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_716 += tmp_718;
   result += (-0.0375*Sqr(g1p)) * tmp_715 * tmp_716;
   std::complex<double> tmp_719;
   std::complex<double> tmp_721;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_721 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_719 += tmp_721;
   std::complex<double> tmp_720;
   std::complex<double> tmp_722;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_722 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
   }
   tmp_720 += tmp_722;
   result += (-0.13333333333333333*Sqr(g1)) * tmp_719 * tmp_720;
   std::complex<double> tmp_723;
   std::complex<double> tmp_725;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_725 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_723 += tmp_725;
   std::complex<double> tmp_724;
   std::complex<double> tmp_726;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_726 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
   }
   tmp_724 += tmp_726;
   result += (-0.0125*Sqr(g1p)) * tmp_723 * tmp_724;
   std::complex<double> tmp_727;
   std::complex<double> tmp_729;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_729 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_727 += tmp_729;
   std::complex<double> tmp_728;
   std::complex<double> tmp_730;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_730 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
   }
   tmp_728 += tmp_730;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_727 * tmp_728;
   if (gO1 < 3) {
      std::complex<double> tmp_731;
      std::complex<double> tmp_732;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_732 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_731 += tmp_732;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_731;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_733;
      std::complex<double> tmp_734;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_734 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_733 += tmp_734;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_733;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_735;
      std::complex<double> tmp_736;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_736 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_735 += tmp_736;
      result += (-0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_735;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_737;
      std::complex<double> tmp_738;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_738 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_737 += tmp_738;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_737;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_739;
      std::complex<double> tmp_740;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_740 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_739 += tmp_740;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_739;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_741;
      std::complex<double> tmp_742;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_742 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_741 += tmp_742;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_741;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_743;
      std::complex<double> tmp_744;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_744 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_743 += tmp_744;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_743;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_745;
      std::complex<double> tmp_746;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_746 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_745 += tmp_746;
      result += (-0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_745;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_747;
      std::complex<double> tmp_748;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_748 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_747 += tmp_748;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_747;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_749;
      std::complex<double> tmp_750;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_750 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_749 += tmp_750;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_749;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_751;
      std::complex<double> tmp_752;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_752 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
      }
      tmp_751 += tmp_752;
      result += (0.03333333333333333*Conj(ZU(gI2,gO2))*Sqr(g1)) * tmp_751;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_753;
      std::complex<double> tmp_754;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_754 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
      }
      tmp_753 += tmp_754;
      result += (-0.0125*Conj(ZU(gI2,gO2))*Sqr(g1p)) * tmp_753;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_755;
      std::complex<double> tmp_756;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_756 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
      }
      tmp_755 += tmp_756;
      result += (0.6666666666666666*Conj(ZU(gI2,gO2))*Sqr(g3)) * tmp_755;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_757;
      std::complex<double> tmp_758;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_758 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
      }
      tmp_757 += tmp_758;
      result += (-3*Conj(Yu(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)) * tmp_757
         ;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_759;
      std::complex<double> tmp_760;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_760 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
      }
      tmp_759 += tmp_760;
      result += (0.03333333333333333*Conj(ZU(gI2,gO2))*Sqr(g1)) * tmp_759;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_761;
      std::complex<double> tmp_762;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_762 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
      }
      tmp_761 += tmp_762;
      result += (-0.0125*Conj(ZU(gI2,gO2))*Sqr(g1p)) * tmp_761;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_763;
      std::complex<double> tmp_764;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_764 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
      }
      tmp_763 += tmp_764;
      result += (0.6666666666666666*Conj(ZU(gI2,gO2))*Sqr(g3)) * tmp_763;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_765;
      std::complex<double> tmp_766;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_766 += Conj(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,j2);
      }
      tmp_765 += tmp_766;
      result += (-3*KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1)) * tmp_765;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_767;
      std::complex<double> tmp_768;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_768 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_767 += tmp_768;
      result += (0.03333333333333333*Sqr(g1)*ZU(gI1,gO1)) * tmp_767;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_769;
      std::complex<double> tmp_770;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_770 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_769 += tmp_770;
      result += (-0.0125*Sqr(g1p)*ZU(gI1,gO1)) * tmp_769;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_771;
      std::complex<double> tmp_772;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_772 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_771 += tmp_772;
      result += (0.6666666666666666*Sqr(g3)*ZU(gI1,gO1)) * tmp_771;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_773;
      std::complex<double> tmp_774;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_774 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_773 += tmp_774;
      result += (0.03333333333333333*Sqr(g1)*ZU(gI1,gO1)) * tmp_773;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_775;
      std::complex<double> tmp_776;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_776 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_775 += tmp_776;
      result += (-0.0125*Sqr(g1p)*ZU(gI1,gO1)) * tmp_775;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_777;
      std::complex<double> tmp_778;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_778 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_777 += tmp_778;
      result += (0.6666666666666666*Sqr(g3)*ZU(gI1,gO1)) * tmp_777;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.016666666666666666*Conj(ZU(gI2,gO2))*Sqr(g1)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.025*Conj(ZU(gI2,gO2))*Sqr(g1p)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.25*Conj(ZU(gI2,gO2))*Sqr(g2)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -1.3333333333333333*Conj(ZU(gI2,gO2))*Sqr(g3)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Yu(gO2,gO2))*Conj(ZU(gI2,3 + gO2))*Yu(gO1,gO1)*ZU(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuSuAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_779;
   std::complex<double> tmp_780;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_780 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_779 += tmp_780;
   result += (std::complex<double>(0,-0.5)*vs*Conj(Lambdax)*ZA(gI2,0)) *
      tmp_779;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vs*Conj(Yu(gO2,gO2))*Conj(ZU(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,0);
   }
   std::complex<double> tmp_781;
   std::complex<double> tmp_782;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_782 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYu(j1,j1);
   }
   tmp_781 += tmp_782;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,1)) * tmp_781
      ;
   if (gO2 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZU(gI1,3 +
         gO2))*Conj(TYu(gO2,gO2))*ZA(gI2,1);
   }
   std::complex<double> tmp_783;
   std::complex<double> tmp_784;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_784 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_783 += tmp_784;
   result += (std::complex<double>(0,-0.5)*vd*Conj(Lambdax)*ZA(gI2,2)) *
      tmp_783;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vd*Conj(Yu(gO2,gO2))*Conj(ZU(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuSuhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_785;
   std::complex<double> tmp_786;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_786 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_785 += tmp_786;
   result += (-0.2*vd*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_785;
   std::complex<double> tmp_787;
   std::complex<double> tmp_788;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_788 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_787 += tmp_788;
   result += (0.075*vd*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_787;
   std::complex<double> tmp_789;
   std::complex<double> tmp_790;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_790 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_789 += tmp_790;
   result += (0.2*vu*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_789;
   std::complex<double> tmp_791;
   std::complex<double> tmp_792;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_792 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_791 += tmp_792;
   result += (0.05*vu*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_791;
   std::complex<double> tmp_793;
   std::complex<double> tmp_794;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_794 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_793 += tmp_794;
   result += (-0.025*QS*vs*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_793;
   std::complex<double> tmp_795;
   std::complex<double> tmp_796;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_796 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_795 += tmp_796;
   result += (0.5*vs*Conj(Lambdax)*Conj(ZH(gI2,0))) * tmp_795;
   std::complex<double> tmp_797;
   std::complex<double> tmp_798;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_798 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_797 += tmp_798;
   result += (0.5*vd*Conj(Lambdax)*Conj(ZH(gI2,2))) * tmp_797;
   std::complex<double> tmp_799;
   std::complex<double> tmp_800;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_800 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYu(j1,j1);
   }
   tmp_799 += tmp_800;
   result += (-0.7071067811865475*Conj(ZH(gI2,1))) * tmp_799;
   std::complex<double> tmp_801;
   std::complex<double> tmp_802;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_802 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI1,3 + j2))*KroneckerDelta(gO2,3
         + j2);
   }
   tmp_801 += tmp_802;
   result += (-(vu*Conj(ZH(gI2,1)))) * tmp_801;
   if (gI1 < 6) {
      result += 0.025*QS*vsb*Conj(ZH(gI2,3))*Conj(ZU(gI1,gO2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.05*vd*Conj(ZH(gI2,0))*Conj(ZU(gI1,gO2))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += 0.075*vd*Conj(ZH(gI2,0))*Conj(ZU(gI1,gO2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += -0.25*vd*Conj(ZH(gI2,0))*Conj(ZU(gI1,gO2))*Sqr(g2);
   }
   if (gO2 < 3) {
      result += -0.05*vu*Conj(ZH(gI2,1))*Conj(ZU(gI1,gO2))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += 0.05*vu*Conj(ZH(gI2,1))*Conj(ZU(gI1,gO2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.25*vu*Conj(ZH(gI2,1))*Conj(ZU(gI1,gO2))*Sqr(g2);
   }
   if (gO2 < 3) {
      result += -0.025*QS*vs*Conj(ZH(gI2,2))*Conj(ZU(gI1,gO2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*vs*Conj(Yu(gO2,gO2))*Conj(ZH(gI2,0))*Conj(ZU(gI1,3 + gO2
         ))*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*vd*Conj(Yu(gO2,gO2))*Conj(ZH(gI2,2))*Conj(ZU(gI1,3 + gO2
         ))*Lambdax;
   }
   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZH(gI2,1))*Conj(ZU(gI1,3 + gO2))*
         Conj(TYu(gO2,gO2));
   }
   if (gO2 < 3) {
      result += -(vu*AbsSqr(Yu(gO2,gO2))*Conj(ZH(gI2,1))*Conj(ZU(gI1,gO2)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuGluFuPR(unsigned gO2, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_803;
   std::complex<double> tmp_804;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_804 += KroneckerDelta(gO2,3 + j1)*ZUR(gI2,j1);
   }
   tmp_803 += tmp_804;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_803;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuGluFuPL(unsigned gO1, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*PhaseGlu*Conj(ZUL(gI2,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuconjVWmSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7071067811865475*g2*Conj(ZD(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuVGSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 6) {
      result += g3*Conj(ZU(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuVPSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_805;
   std::complex<double> tmp_806;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_806 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_805 += tmp_806;
   result += (0.5163977794943222*g1*Cos(ThetaW())) * tmp_805;
   if (gO2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZU(gI2,gO2))*Cos(ThetaW());
   }
   if (gO2 < 3) {
      result += 0.5*g2*Conj(ZU(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuVZSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_807;
   std::complex<double> tmp_808;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_808 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_807 += tmp_808;
   result += (-0.5163977794943222*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_807;
   std::complex<double> tmp_809;
   std::complex<double> tmp_810;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_810 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_809 += tmp_810;
   result += (-0.15811388300841897*g1p*Sin(ThetaWp())) * tmp_809;
   if (gO2 < 3) {
      result += 0.5*g2*Conj(ZU(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZU(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gO2 < 3) {
      result += 0.15811388300841897*g1p*Conj(ZU(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSuVZpSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_811;
   std::complex<double> tmp_812;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_812 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_811 += tmp_812;
   result += (-0.15811388300841897*g1p*Cos(ThetaWp())) * tmp_811;
   std::complex<double> tmp_813;
   std::complex<double> tmp_814;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_814 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_813 += tmp_814;
   result += (0.5163977794943222*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_813;
   if (gO2 < 3) {
      result += 0.15811388300841897*g1p*Conj(ZU(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZU(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZU(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_815;
   std::complex<double> tmp_816;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_816 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_815 += tmp_816;
   result += (1.2*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_815;
   std::complex<double> tmp_817;
   std::complex<double> tmp_818;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_818 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_817 += tmp_818;
   result += (-0.4898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_817;
   std::complex<double> tmp_819;
   std::complex<double> tmp_820;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_820 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_819 += tmp_820;
   result += (0.05*Sqr(g1p)*Sqr(Sin(ThetaWp()))) * tmp_819;
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(
         Sin(ThetaW()));
   }
   if (gO1 < 3) {
      result += -0.6324555320336759*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.4898979485566356*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.2*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_821;
   std::complex<double> tmp_822;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_822 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_821 += tmp_822;
   result += (0.05*Sqr(g1p)*Sqr(Cos(ThetaWp()))) * tmp_821;
   std::complex<double> tmp_823;
   std::complex<double> tmp_824;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_824 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_823 += tmp_824;
   result += (0.4898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_823;
   std::complex<double> tmp_825;
   std::complex<double> tmp_826;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_826 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_825 += tmp_826;
   result += (1.2*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_825;
   if (gO1 < 3) {
      result += 0.2*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.6324555320336759*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += -0.4898979485566356*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1
         ,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }

   return result;
}

double CLASSNAME::CpUSeconjUSeconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_827;
   std::complex<double> tmp_828;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_828 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_827 += tmp_828;
   result += (0.3*Conj(ZP(gI2,0))*Sqr(g1)*ZP(gI1,0)) * tmp_827;
   std::complex<double> tmp_829;
   std::complex<double> tmp_830;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_830 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_829 += tmp_830;
   result += (0.075*Conj(ZP(gI2,0))*Sqr(g1p)*ZP(gI1,0)) * tmp_829;
   std::complex<double> tmp_831;
   std::complex<double> tmp_832;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_832 += AbsSqr(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_831 += tmp_832;
   result += (-(Conj(ZP(gI2,0))*ZP(gI1,0))) * tmp_831;
   if (gO1 < 3) {
      result += -0.15*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1
         ,0);
   }
   if (gO1 < 3) {
      result += 0.15*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1
         ,0);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1
         ,0);
   }
   std::complex<double> tmp_833;
   std::complex<double> tmp_834;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_834 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_833 += tmp_834;
   result += (-0.3*Conj(ZP(gI2,1))*Sqr(g1)*ZP(gI1,1)) * tmp_833;
   std::complex<double> tmp_835;
   std::complex<double> tmp_836;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_836 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_835 += tmp_836;
   result += (0.05*Conj(ZP(gI2,1))*Sqr(g1p)*ZP(gI1,1)) * tmp_835;
   if (gO1 < 3) {
      result += 0.15*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,
         1);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1,
         1);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,
         1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_837;
   std::complex<double> tmp_838;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_838 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_837 += tmp_838;
   result += (0.3*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_837;
   std::complex<double> tmp_839;
   std::complex<double> tmp_840;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_840 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_839 += tmp_840;
   result += (-0.05*Conj(UHp0(gI2,0))*Sqr(g1p)*UHp0(gI1,0)) * tmp_839;
   if (gO1 < 3) {
      result += -0.15*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0
         (gI1,0);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0
         (gI1,0);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0(
         gI1,0);
   }
   std::complex<double> tmp_841;
   std::complex<double> tmp_842;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_842 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_841 += tmp_842;
   result += (-0.3*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_841;
   std::complex<double> tmp_843;
   std::complex<double> tmp_844;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_844 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_843 += tmp_844;
   result += (0.05*Conj(UHp0(gI2,1))*Sqr(g1p)*UHp0(gI1,1)) * tmp_843;
   if (gO1 < 3) {
      result += 0.15*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,1);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0(
         gI1,1);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0
         (gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_845;
   std::complex<double> tmp_846;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_846 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_845 += tmp_846;
   result += (0.3*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_845;
   std::complex<double> tmp_847;
   std::complex<double> tmp_848;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_848 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_847 += tmp_848;
   result += (-0.05*Conj(UHpp(gI2,0))*Sqr(g1p)*UHpp(gI1,0)) * tmp_847;
   if (gO1 < 3) {
      result += -0.15*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp
         (gI1,0);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp
         (gI1,0);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp
         (gI1,0);
   }
   std::complex<double> tmp_849;
   std::complex<double> tmp_850;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_850 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_849 += tmp_850;
   result += (-0.3*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_849;
   std::complex<double> tmp_851;
   std::complex<double> tmp_852;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_852 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_851 += tmp_852;
   result += (0.05*Conj(UHpp(gI2,1))*Sqr(g1p)*UHpp(gI1,1)) * tmp_851;
   if (gO1 < 3) {
      result += 0.15*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,1);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp(
         gI1,1);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp(
         gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_853;
   std::complex<double> tmp_854;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_854 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_853 += tmp_854;
   result += (0.3*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_853;
   std::complex<double> tmp_855;
   std::complex<double> tmp_856;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_856 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_855 += tmp_856;
   result += (-0.05*KroneckerDelta(gI1,gI2)*Sqr(g1p)) * tmp_855;
   std::complex<double> tmp_857;
   std::complex<double> tmp_859;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_859 += Conj(ZV(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_857 += tmp_859;
   std::complex<double> tmp_858;
   std::complex<double> tmp_860;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_860 += Conj(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZV(gI1,j2);
   }
   tmp_858 += tmp_860;
   result += (-1) * tmp_857 * tmp_858;
   if (gO1 < 3) {
      result += -0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1
         );
   }
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1p
         );
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2)
         ;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.5*Conj(ZV(gI2,gO2))*Sqr(g2)*ZV(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeSvHpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_861;
   std::complex<double> tmp_862;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_862 += Conj(ZV(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_861 += tmp_862;
   result += (0.7071067811865475*vs*Conj(Lambdax)*Conj(ZP(gI2,1))) * tmp_861;
   std::complex<double> tmp_863;
   std::complex<double> tmp_864;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_864 += Conj(ZV(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYe(j1,j1);
   }
   tmp_863 += tmp_864;
   result += (Conj(ZP(gI2,0))) * tmp_863;
   if (gO2 < 3) {
      result += -0.35355339059327373*vd*Conj(ZP(gI2,0))*Conj(ZV(gI1,gO2))*
         Sqr(g2);
   }
   if (gO2 < 3) {
      result += -0.35355339059327373*vu*Conj(ZP(gI2,1))*Conj(ZV(gI1,gO2))*
         Sqr(g2);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vd*AbsSqr(Ye(gO2,gO2))*Conj(ZP(gI2,0))*
         Conj(ZV(gI1,gO2));
   }

   return result;
}

double CLASSNAME::CpconjUSeFvChaPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeFvChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += -(g2*Conj(UM(gI2,0))*KroneckerDelta(gI1,gO1));
   }
   if (gI1 < 3) {
      result += Conj(UM(gI2,1))*KroneckerDelta(3 + gI1,gO1)*Ye(gI1,gI1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeFeChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_865;
   std::complex<double> tmp_866;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_866 += KroneckerDelta(gO2,3 + j1)*ZER(gI1,j1);
   }
   tmp_865 += tmp_866;
   result += (-1.0954451150103321*g1*ZN(gI2,0)) * tmp_865;
   if (gO2 < 3) {
      result += -(Conj(Ye(gO2,gO2))*ZER(gI1,gO2)*ZN(gI2,2));
   }
   std::complex<double> tmp_867;
   std::complex<double> tmp_868;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_868 += KroneckerDelta(gO2,3 + j1)*ZER(gI1,j1);
   }
   tmp_867 += tmp_868;
   result += (-0.22360679774997896*g1p*ZN(gI2,7)) * tmp_867;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeFeChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_869;
   std::complex<double> tmp_870;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_870 += Conj(ZEL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Ye(j1,j1);
   }
   tmp_869 += tmp_870;
   result += (-Conj(ZN(gI2,2))) * tmp_869;
   if (gO1 < 3) {
      result += 0.5477225575051661*g1*Conj(ZEL(gI1,gO1))*Conj(ZN(gI2,0));
   }
   if (gO1 < 3) {
      result += 0.7071067811865475*g2*Conj(ZEL(gI1,gO1))*Conj(ZN(gI2,1));
   }
   if (gO1 < 3) {
      result += -0.4472135954999579*g1p*Conj(ZEL(gI1,gO1))*Conj(ZN(gI2,7));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_871;
   std::complex<double> tmp_872;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_872 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_871 += tmp_872;
   result += (0.3*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_871;
   std::complex<double> tmp_873;
   std::complex<double> tmp_874;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_874 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_873 += tmp_874;
   result += (0.075*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0)) * tmp_873;
   std::complex<double> tmp_875;
   std::complex<double> tmp_876;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_876 += AbsSqr(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_875 += tmp_876;
   result += (-(ZA(gI1,0)*ZA(gI2,0))) * tmp_875;
   if (gO1 < 3) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Ye(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,0)*ZA(
         gI2,0));
   }
   std::complex<double> tmp_877;
   std::complex<double> tmp_878;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_878 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_877 += tmp_878;
   result += (-0.3*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_877;
   std::complex<double> tmp_879;
   std::complex<double> tmp_880;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_880 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_879 += tmp_880;
   result += (0.05*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1)) * tmp_879;
   if (gO1 < 3) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.1*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,2)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1)*
         ZA(gI1,2)*ZA(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,1)*ZA(gI2,2);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1)*
         ZA(gI1,1)*ZA(gI2,2);
   }
   std::complex<double> tmp_881;
   std::complex<double> tmp_882;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_882 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_881 += tmp_882;
   result += (-0.025*QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2)) * tmp_881;
   if (gO1 < 3) {
      result += -0.05*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2
         );
   }
   std::complex<double> tmp_883;
   std::complex<double> tmp_884;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_884 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_883 += tmp_884;
   result += (0.025*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) * tmp_883;
   if (gO1 < 3) {
      result += 0.05*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)
         ;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSehhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_885;
   std::complex<double> tmp_886;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_886 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_885 += tmp_886;
   result += (0.3*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_885;
   std::complex<double> tmp_887;
   std::complex<double> tmp_888;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_888 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_887 += tmp_888;
   result += (0.075*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_887;
   std::complex<double> tmp_889;
   std::complex<double> tmp_890;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_890 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_889 += tmp_890;
   result += (-0.3*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_889;
   std::complex<double> tmp_891;
   std::complex<double> tmp_892;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_892 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_891 += tmp_892;
   result += (0.05*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_891;
   std::complex<double> tmp_893;
   std::complex<double> tmp_894;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_894 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_893 += tmp_894;
   result += (-0.025*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_893;
   std::complex<double> tmp_895;
   std::complex<double> tmp_896;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_896 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_895 += tmp_896;
   result += (0.025*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_895;
   std::complex<double> tmp_897;
   std::complex<double> tmp_898;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_898 += AbsSqr(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_897 += tmp_898;
   result += (-(Conj(ZH(gI1,0))*Conj(ZH(gI2,0)))) * tmp_897;
   if (gO1 < 3) {
      result += -0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2
         )*Sqr(g1);
   }
   if (gO1 < 3) {
      result += 0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2)
         *Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2)
         *Sqr(g2);
   }
   if (gO1 < 3) {
      result += 0.15*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)
         *Sqr(g1);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)*
         Sqr(g1p);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2
         )*Sqr(g2);
   }
   if (gO1 < 3) {
      result += -0.05*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.05*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Ye(gO2,gO2))*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Ye(gO2,gO2))*Conj(ZH(gI1,1))*Conj(ZH(gI2,2))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Ye(gO1,gO1))*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*
         KroneckerDelta(gO1,gO2));
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
         KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,1))*Conj(ZH(gI2,2))*
         KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_899;
   std::complex<double> tmp_901;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_901 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_899 += tmp_901;
   std::complex<double> tmp_900;
   std::complex<double> tmp_902;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_902 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_900 += tmp_902;
   result += (-0.05*Sqr(g1)) * tmp_899 * tmp_900;
   std::complex<double> tmp_903;
   std::complex<double> tmp_905;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_905 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_903 += tmp_905;
   std::complex<double> tmp_904;
   std::complex<double> tmp_906;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_906 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_904 += tmp_906;
   result += (-0.0125*Sqr(g1p)) * tmp_903 * tmp_904;
   std::complex<double> tmp_907;
   std::complex<double> tmp_909;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_909 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_907 += tmp_909;
   std::complex<double> tmp_908;
   std::complex<double> tmp_910;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_910 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_908 += tmp_910;
   result += (-0.1*Sqr(g1)) * tmp_907 * tmp_908;
   std::complex<double> tmp_911;
   std::complex<double> tmp_913;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_913 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_911 += tmp_913;
   std::complex<double> tmp_912;
   std::complex<double> tmp_914;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_914 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_912 += tmp_914;
   result += (-0.025*Sqr(g1p)) * tmp_911 * tmp_912;
   std::complex<double> tmp_915;
   std::complex<double> tmp_917;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_917 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_915 += tmp_917;
   std::complex<double> tmp_916;
   std::complex<double> tmp_918;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_918 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_916 += tmp_918;
   result += (-0.05*Sqr(g1)) * tmp_915 * tmp_916;
   std::complex<double> tmp_919;
   std::complex<double> tmp_921;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_921 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_919 += tmp_921;
   std::complex<double> tmp_920;
   std::complex<double> tmp_922;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_922 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_920 += tmp_922;
   result += (-0.0125*Sqr(g1p)) * tmp_919 * tmp_920;
   std::complex<double> tmp_923;
   std::complex<double> tmp_925;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_925 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_923 += tmp_925;
   std::complex<double> tmp_924;
   std::complex<double> tmp_926;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_926 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_924 += tmp_926;
   result += (-0.1*Sqr(g1)) * tmp_923 * tmp_924;
   std::complex<double> tmp_927;
   std::complex<double> tmp_929;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_929 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_927 += tmp_929;
   std::complex<double> tmp_928;
   std::complex<double> tmp_930;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_930 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_928 += tmp_930;
   result += (-0.025*Sqr(g1p)) * tmp_927 * tmp_928;
   if (gO1 < 3) {
      std::complex<double> tmp_931;
      std::complex<double> tmp_932;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_932 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_931 += tmp_932;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_931;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_933;
      std::complex<double> tmp_934;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_934 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_933 += tmp_934;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_933;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_935;
      std::complex<double> tmp_936;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_936 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_935 += tmp_936;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_935;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_937;
      std::complex<double> tmp_938;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_938 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_937 += tmp_938;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_937;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_939;
      std::complex<double> tmp_940;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_940 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_939 += tmp_940;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_939;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_941;
      std::complex<double> tmp_942;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_942 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_941 += tmp_942;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_941;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_943;
      std::complex<double> tmp_944;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_944 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_943 += tmp_944;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_943;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_945;
      std::complex<double> tmp_946;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_946 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_945 += tmp_946;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_945;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_947;
      std::complex<double> tmp_948;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_948 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_947 += tmp_948;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_947;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_949;
      std::complex<double> tmp_950;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_950 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_949 += tmp_950;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_949;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_951;
      std::complex<double> tmp_952;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_952 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
      }
      tmp_951 += tmp_952;
      result += (-(Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2))) * tmp_951
         ;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_953;
      std::complex<double> tmp_954;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_954 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,j2);
      }
      tmp_953 += tmp_954;
      result += (-(KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1))) * tmp_953;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_955;
   std::complex<double> tmp_957;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_957 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_955 += tmp_957;
   std::complex<double> tmp_956;
   std::complex<double> tmp_958;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_958 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_956 += tmp_958;
   result += (0.1*Sqr(g1)) * tmp_955 * tmp_956;
   std::complex<double> tmp_959;
   std::complex<double> tmp_961;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_961 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_959 += tmp_961;
   std::complex<double> tmp_960;
   std::complex<double> tmp_962;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_962 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_960 += tmp_962;
   result += (0.025*Sqr(g1p)) * tmp_959 * tmp_960;
   std::complex<double> tmp_963;
   std::complex<double> tmp_965;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_965 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_963 += tmp_965;
   std::complex<double> tmp_964;
   std::complex<double> tmp_966;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_966 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_964 += tmp_966;
   result += (-0.1*Sqr(g1)) * tmp_963 * tmp_964;
   std::complex<double> tmp_967;
   std::complex<double> tmp_969;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_969 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_967 += tmp_969;
   std::complex<double> tmp_968;
   std::complex<double> tmp_970;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_970 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_968 += tmp_970;
   result += (0.0375*Sqr(g1p)) * tmp_967 * tmp_968;
   std::complex<double> tmp_971;
   std::complex<double> tmp_973;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_973 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_971 += tmp_973;
   std::complex<double> tmp_972;
   std::complex<double> tmp_974;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_974 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_972 += tmp_974;
   result += (0.1*Sqr(g1)) * tmp_971 * tmp_972;
   std::complex<double> tmp_975;
   std::complex<double> tmp_977;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_977 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_975 += tmp_977;
   std::complex<double> tmp_976;
   std::complex<double> tmp_978;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_978 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_976 += tmp_978;
   result += (0.025*Sqr(g1p)) * tmp_975 * tmp_976;
   std::complex<double> tmp_979;
   std::complex<double> tmp_981;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_981 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_979 += tmp_981;
   std::complex<double> tmp_980;
   std::complex<double> tmp_982;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_982 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_980 += tmp_982;
   result += (-0.1*Sqr(g1)) * tmp_979 * tmp_980;
   std::complex<double> tmp_983;
   std::complex<double> tmp_985;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_985 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_983 += tmp_985;
   std::complex<double> tmp_984;
   std::complex<double> tmp_986;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_986 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_984 += tmp_986;
   result += (0.0375*Sqr(g1p)) * tmp_983 * tmp_984;
   if (gO1 < 3) {
      std::complex<double> tmp_987;
      std::complex<double> tmp_988;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_988 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_987 += tmp_988;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_987;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_989;
      std::complex<double> tmp_990;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_990 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_989 += tmp_990;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_989;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_991;
      std::complex<double> tmp_992;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_992 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_991 += tmp_992;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_991;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_993;
      std::complex<double> tmp_994;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_994 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_993 += tmp_994;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_993;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_995;
      std::complex<double> tmp_996;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_996 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_995 += tmp_996;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_995;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_997;
      std::complex<double> tmp_998;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_998 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_997 += tmp_998;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_997;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_999;
      std::complex<double> tmp_1000;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1000 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_999 += tmp_1000;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_999;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1001;
      std::complex<double> tmp_1002;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1002 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_1001 += tmp_1002;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1001;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1003;
   std::complex<double> tmp_1005;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1005 += KroneckerDelta(gO1,3 + j1)*ZE(gI1,3 + j1);
   }
   tmp_1003 += tmp_1005;
   std::complex<double> tmp_1004;
   std::complex<double> tmp_1006;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1006 += Conj(ZE(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1004 += tmp_1006;
   result += (-0.3*Sqr(g1)) * tmp_1003 * tmp_1004;
   std::complex<double> tmp_1007;
   std::complex<double> tmp_1009;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1009 += KroneckerDelta(gO1,3 + j1)*ZE(gI1,3 + j1);
   }
   tmp_1007 += tmp_1009;
   std::complex<double> tmp_1008;
   std::complex<double> tmp_1010;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1010 += Conj(ZE(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1008 += tmp_1010;
   result += (-0.0125*Sqr(g1p)) * tmp_1007 * tmp_1008;
   std::complex<double> tmp_1011;
   std::complex<double> tmp_1013;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1013 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1011 += tmp_1013;
   std::complex<double> tmp_1012;
   std::complex<double> tmp_1014;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1014 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1012 += tmp_1014;
   result += (0.15*Sqr(g1)) * tmp_1011 * tmp_1012;
   std::complex<double> tmp_1015;
   std::complex<double> tmp_1017;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1017 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1015 += tmp_1017;
   std::complex<double> tmp_1016;
   std::complex<double> tmp_1018;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1018 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1016 += tmp_1018;
   result += (-0.025*Sqr(g1p)) * tmp_1015 * tmp_1016;
   std::complex<double> tmp_1019;
   std::complex<double> tmp_1021;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1021 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1019 += tmp_1021;
   std::complex<double> tmp_1020;
   std::complex<double> tmp_1022;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1022 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1020 += tmp_1022;
   result += (-0.3*Sqr(g1)) * tmp_1019 * tmp_1020;
   std::complex<double> tmp_1023;
   std::complex<double> tmp_1025;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1025 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1023 += tmp_1025;
   std::complex<double> tmp_1024;
   std::complex<double> tmp_1026;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1026 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1024 += tmp_1026;
   result += (-0.0125*Sqr(g1p)) * tmp_1023 * tmp_1024;
   std::complex<double> tmp_1027;
   std::complex<double> tmp_1029;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1029 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1027 += tmp_1029;
   std::complex<double> tmp_1028;
   std::complex<double> tmp_1030;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1030 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_1028 += tmp_1030;
   result += (0.15*Sqr(g1)) * tmp_1027 * tmp_1028;
   std::complex<double> tmp_1031;
   std::complex<double> tmp_1033;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1033 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1031 += tmp_1033;
   std::complex<double> tmp_1032;
   std::complex<double> tmp_1034;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1034 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_1032 += tmp_1034;
   result += (-0.025*Sqr(g1p)) * tmp_1031 * tmp_1032;
   std::complex<double> tmp_1035;
   std::complex<double> tmp_1037;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1037 += Conj(ZE(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1035 += tmp_1037;
   std::complex<double> tmp_1036;
   std::complex<double> tmp_1038;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1038 += Conj(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZE(gI1,j2);
   }
   tmp_1036 += tmp_1038;
   result += (-1) * tmp_1035 * tmp_1036;
   std::complex<double> tmp_1039;
   std::complex<double> tmp_1041;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1041 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1039 += tmp_1041;
   std::complex<double> tmp_1040;
   std::complex<double> tmp_1042;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1042 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_1040 += tmp_1042;
   result += (-0.3*Sqr(g1)) * tmp_1039 * tmp_1040;
   std::complex<double> tmp_1043;
   std::complex<double> tmp_1045;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1045 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1043 += tmp_1045;
   std::complex<double> tmp_1044;
   std::complex<double> tmp_1046;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1046 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_1044 += tmp_1046;
   result += (-0.0125*Sqr(g1p)) * tmp_1043 * tmp_1044;
   std::complex<double> tmp_1047;
   std::complex<double> tmp_1049;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1049 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1047 += tmp_1049;
   std::complex<double> tmp_1048;
   std::complex<double> tmp_1050;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1050 += KroneckerDelta(gO1,3 + j2)*ZE(gI1,3 + j2);
   }
   tmp_1048 += tmp_1050;
   result += (-0.3*Sqr(g1)) * tmp_1047 * tmp_1048;
   std::complex<double> tmp_1051;
   std::complex<double> tmp_1053;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1053 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1051 += tmp_1053;
   std::complex<double> tmp_1052;
   std::complex<double> tmp_1054;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1054 += KroneckerDelta(gO1,3 + j2)*ZE(gI1,3 + j2);
   }
   tmp_1052 += tmp_1054;
   result += (-0.0125*Sqr(g1p)) * tmp_1051 * tmp_1052;
   if (gO1 < 3) {
      std::complex<double> tmp_1055;
      std::complex<double> tmp_1056;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1056 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_1055 += tmp_1056;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1055;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1057;
      std::complex<double> tmp_1058;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1058 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_1057 += tmp_1058;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1057;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1059;
      std::complex<double> tmp_1060;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1060 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_1059 += tmp_1060;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1059;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1061;
      std::complex<double> tmp_1062;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1062 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_1061 += tmp_1062;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1061;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1063;
      std::complex<double> tmp_1064;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1064 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_1063 += tmp_1064;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1063;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1065;
      std::complex<double> tmp_1066;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1066 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_1065 += tmp_1066;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1065;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1067;
      std::complex<double> tmp_1068;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1068 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_1067 += tmp_1068;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1067;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1069;
      std::complex<double> tmp_1070;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1070 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_1069 += tmp_1070;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1069;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1071;
      std::complex<double> tmp_1072;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1072 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_1071 += tmp_1072;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1071;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1073;
      std::complex<double> tmp_1074;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1074 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_1073 += tmp_1074;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1073;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1075;
      std::complex<double> tmp_1076;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1076 += KroneckerDelta(gO1,3 + j1)*ZE(gI1,3 + j1);
      }
      tmp_1075 += tmp_1076;
      result += (0.15*Conj(ZE(gI2,gO2))*Sqr(g1)) * tmp_1075;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1077;
      std::complex<double> tmp_1078;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1078 += KroneckerDelta(gO1,3 + j1)*ZE(gI1,3 + j1);
      }
      tmp_1077 += tmp_1078;
      result += (-0.025*Conj(ZE(gI2,gO2))*Sqr(g1p)) * tmp_1077;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1079;
      std::complex<double> tmp_1080;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1080 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
      }
      tmp_1079 += tmp_1080;
      result += (-(Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2))) *
         tmp_1079;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1081;
      std::complex<double> tmp_1082;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1082 += KroneckerDelta(gO1,3 + j2)*ZE(gI1,3 + j2);
      }
      tmp_1081 += tmp_1082;
      result += (0.15*Conj(ZE(gI2,gO2))*Sqr(g1)) * tmp_1081;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1083;
      std::complex<double> tmp_1084;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1084 += KroneckerDelta(gO1,3 + j2)*ZE(gI1,3 + j2);
      }
      tmp_1083 += tmp_1084;
      result += (-0.025*Conj(ZE(gI2,gO2))*Sqr(g1p)) * tmp_1083;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1085;
      std::complex<double> tmp_1086;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1086 += Conj(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,j2);
      }
      tmp_1085 += tmp_1086;
      result += (-(KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1))) * tmp_1085;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1087;
      std::complex<double> tmp_1088;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1088 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1087 += tmp_1088;
      result += (0.15*Sqr(g1)*ZE(gI1,gO1)) * tmp_1087;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1089;
      std::complex<double> tmp_1090;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1090 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1089 += tmp_1090;
      result += (-0.025*Sqr(g1p)*ZE(gI1,gO1)) * tmp_1089;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1091;
      std::complex<double> tmp_1092;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1092 += Conj(ZE(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1091 += tmp_1092;
      result += (0.15*Sqr(g1)*ZE(gI1,gO1)) * tmp_1091;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1093;
      std::complex<double> tmp_1094;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1094 += Conj(ZE(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1093 += tmp_1094;
      result += (-0.025*Sqr(g1p)*ZE(gI1,gO1)) * tmp_1093;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.15*Conj(ZE(gI2,gO2))*Sqr(g1)*ZE(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.1*Conj(ZE(gI2,gO2))*Sqr(g1p)*ZE(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.25*Conj(ZE(gI2,gO2))*Sqr(g2)*ZE(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Ye(gO2,gO2))*Conj(ZE(gI2,3 + gO2))*Ye(gO1,gO1)*ZE(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSeconjUSeconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1095;
   std::complex<double> tmp_1097;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1097 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1095 += tmp_1097;
   std::complex<double> tmp_1096;
   std::complex<double> tmp_1098;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1098 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1096 += tmp_1098;
   result += (-0.05*Sqr(g1)) * tmp_1095 * tmp_1096;
   std::complex<double> tmp_1099;
   std::complex<double> tmp_1101;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1101 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1099 += tmp_1101;
   std::complex<double> tmp_1100;
   std::complex<double> tmp_1102;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1102 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1100 += tmp_1102;
   result += (-0.0125*Sqr(g1p)) * tmp_1099 * tmp_1100;
   std::complex<double> tmp_1103;
   std::complex<double> tmp_1105;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1105 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1103 += tmp_1105;
   std::complex<double> tmp_1104;
   std::complex<double> tmp_1106;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1106 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1104 += tmp_1106;
   result += (0.2*Sqr(g1)) * tmp_1103 * tmp_1104;
   std::complex<double> tmp_1107;
   std::complex<double> tmp_1109;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1109 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1107 += tmp_1109;
   std::complex<double> tmp_1108;
   std::complex<double> tmp_1110;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1110 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1108 += tmp_1110;
   result += (-0.0125*Sqr(g1p)) * tmp_1107 * tmp_1108;
   std::complex<double> tmp_1111;
   std::complex<double> tmp_1113;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1113 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1111 += tmp_1113;
   std::complex<double> tmp_1112;
   std::complex<double> tmp_1114;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1114 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_1112 += tmp_1114;
   result += (-0.05*Sqr(g1)) * tmp_1111 * tmp_1112;
   std::complex<double> tmp_1115;
   std::complex<double> tmp_1117;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1117 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1115 += tmp_1117;
   std::complex<double> tmp_1116;
   std::complex<double> tmp_1118;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1118 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_1116 += tmp_1118;
   result += (-0.0125*Sqr(g1p)) * tmp_1115 * tmp_1116;
   std::complex<double> tmp_1119;
   std::complex<double> tmp_1121;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1121 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1119 += tmp_1121;
   std::complex<double> tmp_1120;
   std::complex<double> tmp_1122;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1122 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_1120 += tmp_1122;
   result += (0.2*Sqr(g1)) * tmp_1119 * tmp_1120;
   std::complex<double> tmp_1123;
   std::complex<double> tmp_1125;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1125 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1123 += tmp_1125;
   std::complex<double> tmp_1124;
   std::complex<double> tmp_1126;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1126 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_1124 += tmp_1126;
   result += (-0.0125*Sqr(g1p)) * tmp_1123 * tmp_1124;
   if (gO1 < 3) {
      std::complex<double> tmp_1127;
      std::complex<double> tmp_1128;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1128 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_1127 += tmp_1128;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1127;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1129;
      std::complex<double> tmp_1130;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1130 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_1129 += tmp_1130;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1129;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1131;
      std::complex<double> tmp_1132;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1132 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_1131 += tmp_1132;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1131;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1133;
      std::complex<double> tmp_1134;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1134 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_1133 += tmp_1134;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1133;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1135;
      std::complex<double> tmp_1136;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1136 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_1135 += tmp_1136;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1135;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1137;
      std::complex<double> tmp_1138;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1138 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_1137 += tmp_1138;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1137;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1139;
      std::complex<double> tmp_1140;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1140 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_1139 += tmp_1140;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1139;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1141;
      std::complex<double> tmp_1142;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1142 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_1141 += tmp_1142;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1141;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1143;
      std::complex<double> tmp_1144;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1144 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_1143 += tmp_1144;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1143;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1145;
      std::complex<double> tmp_1146;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1146 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_1145 += tmp_1146;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1145;
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeSeAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1147;
   std::complex<double> tmp_1148;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1148 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYe(j1,j1);
   }
   tmp_1147 += tmp_1148;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) *
      tmp_1147;
   if (gO2 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZE(gI1,3 +
         gO2))*Conj(TYe(gO2,gO2))*ZA(gI2,0);
   }
   std::complex<double> tmp_1149;
   std::complex<double> tmp_1150;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1150 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1149 += tmp_1150;
   result += (std::complex<double>(0,-0.5)*vs*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_1149;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vs*Conj(Ye(gO2,gO2))*Conj(ZE(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,1);
   }
   std::complex<double> tmp_1151;
   std::complex<double> tmp_1152;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1152 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1151 += tmp_1152;
   result += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*ZA(gI2,2)) *
      tmp_1151;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vu*Conj(Ye(gO2,gO2))*Conj(ZE(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeSehh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1153;
   std::complex<double> tmp_1154;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1154 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1153 += tmp_1154;
   result += (0.3*vd*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_1153;
   std::complex<double> tmp_1155;
   std::complex<double> tmp_1156;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1156 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1155 += tmp_1156;
   result += (0.075*vd*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_1155;
   std::complex<double> tmp_1157;
   std::complex<double> tmp_1158;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1158 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1157 += tmp_1158;
   result += (-0.3*vu*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_1157;
   std::complex<double> tmp_1159;
   std::complex<double> tmp_1160;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1160 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1159 += tmp_1160;
   result += (0.05*vu*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_1159;
   std::complex<double> tmp_1161;
   std::complex<double> tmp_1162;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1162 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1161 += tmp_1162;
   result += (-0.025*QS*vs*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_1161;
   std::complex<double> tmp_1163;
   std::complex<double> tmp_1164;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1164 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1163 += tmp_1164;
   result += (0.025*QS*vsb*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_1163;
   std::complex<double> tmp_1165;
   std::complex<double> tmp_1166;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1166 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1165 += tmp_1166;
   result += (0.5*vs*Conj(Lambdax)*Conj(ZH(gI2,1))) * tmp_1165;
   std::complex<double> tmp_1167;
   std::complex<double> tmp_1168;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1168 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1167 += tmp_1168;
   result += (0.5*vu*Conj(Lambdax)*Conj(ZH(gI2,2))) * tmp_1167;
   std::complex<double> tmp_1169;
   std::complex<double> tmp_1170;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1170 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYe(j1,j1);
   }
   tmp_1169 += tmp_1170;
   result += (-0.7071067811865475*Conj(ZH(gI2,0))) * tmp_1169;
   std::complex<double> tmp_1171;
   std::complex<double> tmp_1172;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1172 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI1,3 + j2))*KroneckerDelta(gO2,
         3 + j2);
   }
   tmp_1171 += tmp_1172;
   result += (-(vd*Conj(ZH(gI2,0)))) * tmp_1171;
   if (gO2 < 3) {
      result += -0.15*vd*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += 0.15*vd*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.25*vd*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g2);
   }
   if (gO2 < 3) {
      result += 0.15*vu*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += 0.1*vu*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += -0.25*vu*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g2);
   }
   if (gO2 < 3) {
      result += 0.5*vs*Conj(Ye(gO2,gO2))*Conj(ZE(gI1,3 + gO2))*Conj(ZH(gI2,1
         ))*Lambdax;
   }
   if (gO2 < 3) {
      result += -0.05*QS*vs*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*vu*Conj(Ye(gO2,gO2))*Conj(ZE(gI1,3 + gO2))*Conj(ZH(gI2,2
         ))*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.05*QS*vsb*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,3))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZE(gI1,3 + gO2))*Conj(ZH(gI2,0))*
         Conj(TYe(gO2,gO2));
   }
   if (gO2 < 3) {
      result += -(vd*AbsSqr(Ye(gO2,gO2))*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,0)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeVWmSv(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7071067811865475*g2*Conj(ZV(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeVPSe(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1173;
   std::complex<double> tmp_1174;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1174 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1173 += tmp_1174;
   result += (-0.7745966692414834*g1*Cos(ThetaW())) * tmp_1173;
   if (gO2 < 3) {
      result += -0.3872983346207417*g1*Conj(ZE(gI2,gO2))*Cos(ThetaW());
   }
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZE(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeVZSe(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1175;
   std::complex<double> tmp_1176;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1176 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1175 += tmp_1176;
   result += (0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_1175;
   std::complex<double> tmp_1177;
   std::complex<double> tmp_1178;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1178 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1177 += tmp_1178;
   result += (-0.15811388300841897*g1p*Sin(ThetaWp())) * tmp_1177;
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZE(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.3872983346207417*g1*Conj(ZE(gI2,gO2))*Cos(ThetaWp())*Sin(
         ThetaW());
   }
   if (gO2 < 3) {
      result += 0.31622776601683794*g1p*Conj(ZE(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSeVZpSe(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1179;
   std::complex<double> tmp_1180;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1180 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1179 += tmp_1180;
   result += (-0.15811388300841897*g1p*Cos(ThetaWp())) * tmp_1179;
   std::complex<double> tmp_1181;
   std::complex<double> tmp_1182;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1182 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1181 += tmp_1182;
   result += (-0.7745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_1181;
   if (gO2 < 3) {
      result += 0.31622776601683794*g1p*Conj(ZE(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.5*g2*Conj(ZE(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.3872983346207417*g1*Conj(ZE(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1183;
   std::complex<double> tmp_1184;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1184 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1183 += tmp_1184;
   result += (0.13333333333333333*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())
      )) * tmp_1183;
   std::complex<double> tmp_1185;
   std::complex<double> tmp_1186;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1186 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1185 += tmp_1186;
   result += (0.4898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_1185;
   std::complex<double> tmp_1187;
   std::complex<double> tmp_1188;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1188 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1187 += tmp_1188;
   result += (0.45*Sqr(g1p)*Sqr(Sin(ThetaWp()))) * tmp_1187;
   if (gO1 < 3) {
      result += 0.13333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(
         ThetaWp()))*Sqr(Sin(ThetaW()));
   }
   if (gO1 < 3) {
      result += -0.32659863237109044*g1*g1p*Cos(ThetaWp())*KroneckerDelta(
         gO1,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.2*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1189;
   std::complex<double> tmp_1190;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1190 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1189 += tmp_1190;
   result += (0.45*Sqr(g1p)*Sqr(Cos(ThetaWp()))) * tmp_1189;
   std::complex<double> tmp_1191;
   std::complex<double> tmp_1192;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1192 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1191 += tmp_1192;
   result += (-0.4898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_1191;
   std::complex<double> tmp_1193;
   std::complex<double> tmp_1194;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1194 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1193 += tmp_1194;
   result += (0.13333333333333333*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())
      )) * tmp_1193;
   if (gO1 < 3) {
      result += 0.2*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.32659863237109044*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1
         ,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.13333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(
         ThetaW()))*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1195;
   std::complex<double> tmp_1196;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1196 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1195 += tmp_1196;
   result += (0.1*Conj(ZP(gI2,0))*Sqr(g1)*ZP(gI1,0)) * tmp_1195;
   std::complex<double> tmp_1197;
   std::complex<double> tmp_1198;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1198 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1197 += tmp_1198;
   result += (-0.225*Conj(ZP(gI2,0))*Sqr(g1p)*ZP(gI1,0)) * tmp_1197;
   if (gO1 < 3) {
      result += -0.1*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,
         0);
   }
   if (gO1 < 3) {
      result += -0.15*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(
         gI1,0);
   }
   std::complex<double> tmp_1199;
   std::complex<double> tmp_1200;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1200 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1199 += tmp_1200;
   result += (-0.1*Conj(ZP(gI2,1))*Sqr(g1)*ZP(gI1,1)) * tmp_1199;
   std::complex<double> tmp_1201;
   std::complex<double> tmp_1202;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1202 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1201 += tmp_1202;
   result += (-0.15*Conj(ZP(gI2,1))*Sqr(g1p)*ZP(gI1,1)) * tmp_1201;
   if (gO1 < 3) {
      result += 0.1*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,1
         );
   }
   if (gO1 < 3) {
      result += -0.1*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1
         ,1);
   }
   if (gO2 < 3) {
      result += -(Conj(ZP(gI2,0))*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3
         + gO2)*Lambdax*ZP(gI1,1));
   }
   if (gO1 < 3) {
      result += -(Conj(Lambdax)*Conj(ZP(gI2,1))*KroneckerDelta(3 + gO1,gO2)*
         ZP(gI1,0)*Kappa(gO1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1203;
   std::complex<double> tmp_1204;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1204 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1203 += tmp_1204;
   result += (0.1*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_1203;
   std::complex<double> tmp_1205;
   std::complex<double> tmp_1206;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1206 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1205 += tmp_1206;
   result += (0.15*Conj(UHp0(gI2,0))*Sqr(g1p)*UHp0(gI1,0)) * tmp_1205;
   if (gO1 < 3) {
      result += -0.1*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,0);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0(
         gI1,0);
   }
   std::complex<double> tmp_1207;
   std::complex<double> tmp_1208;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1208 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1207 += tmp_1208;
   result += (-0.1*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_1207;
   std::complex<double> tmp_1209;
   std::complex<double> tmp_1210;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1210 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1209 += tmp_1210;
   result += (-0.15*Conj(UHp0(gI2,1))*Sqr(g1p)*UHp0(gI1,1)) * tmp_1209;
   if (gO1 < 3) {
      result += 0.1*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,1);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0
         (gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1211;
   std::complex<double> tmp_1212;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1212 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1211 += tmp_1212;
   result += (0.1*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_1211;
   std::complex<double> tmp_1213;
   std::complex<double> tmp_1214;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1214 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1213 += tmp_1214;
   result += (0.15*Conj(UHpp(gI2,0))*Sqr(g1p)*UHpp(gI1,0)) * tmp_1213;
   if (gO1 < 3) {
      result += -0.1*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,0);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp(
         gI1,0);
   }
   std::complex<double> tmp_1215;
   std::complex<double> tmp_1216;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1216 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1215 += tmp_1216;
   result += (-0.1*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_1215;
   std::complex<double> tmp_1217;
   std::complex<double> tmp_1218;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1218 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1217 += tmp_1218;
   result += (-0.15*Conj(UHpp(gI2,1))*Sqr(g1p)*UHpp(gI1,1)) * tmp_1217;
   if (gO1 < 3) {
      result += 0.1*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,1);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp
         (gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1219;
   std::complex<double> tmp_1220;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1220 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1219 += tmp_1220;
   result += (0.1*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_1219;
   std::complex<double> tmp_1221;
   std::complex<double> tmp_1222;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1222 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1221 += tmp_1222;
   result += (0.15*KroneckerDelta(gI1,gI2)*Sqr(g1p)) * tmp_1221;
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1)
         ;
   }
   if (gO1 < 3) {
      result += 0.1*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1p)
         ;
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXFDXChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1223;
   std::complex<double> tmp_1224;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1224 += KroneckerDelta(gO2,3 + j1)*ZDXR(gI1,j1);
   }
   tmp_1223 += tmp_1224;
   result += (-0.3651483716701107*g1*ZN(gI2,0)) * tmp_1223;
   if (gO2 < 3) {
      result += -(Conj(Kappa(gO2,gO2))*ZDXR(gI1,gO2)*ZN(gI2,4));
   }
   std::complex<double> tmp_1225;
   std::complex<double> tmp_1226;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1226 += KroneckerDelta(gO2,3 + j1)*ZDXR(gI1,j1);
   }
   tmp_1225 += tmp_1226;
   result += (0.6708203932499369*g1p*ZN(gI2,7)) * tmp_1225;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXFDXChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1227;
   std::complex<double> tmp_1228;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1228 += Conj(ZDXL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Kappa(j1,j1)
         ;
   }
   tmp_1227 += tmp_1228;
   result += (-Conj(ZN(gI2,4))) * tmp_1227;
   if (gO1 < 3) {
      result += 0.3651483716701107*g1*Conj(ZDXL(gI1,gO1))*Conj(ZN(gI2,0));
   }
   if (gO1 < 3) {
      result += 0.4472135954999579*g1p*Conj(ZDXL(gI1,gO1))*Conj(ZN(gI2,7));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1229;
   std::complex<double> tmp_1230;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1230 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1229 += tmp_1230;
   result += (0.1*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_1229;
   std::complex<double> tmp_1231;
   std::complex<double> tmp_1232;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1232 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1231 += tmp_1232;
   result += (-0.225*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0)) * tmp_1231;
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*
         Lambdax*ZA(gI1,1)*ZA(gI2,0);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*
         Lambdax*ZA(gI1,0)*ZA(gI2,1);
   }
   std::complex<double> tmp_1233;
   std::complex<double> tmp_1234;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1234 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1233 += tmp_1234;
   result += (-0.1*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_1233;
   std::complex<double> tmp_1235;
   std::complex<double> tmp_1236;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1236 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1235 += tmp_1236;
   result += (-0.15*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1)) * tmp_1235;
   if (gO1 < 3) {
      result += 0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1);
   }
   std::complex<double> tmp_1237;
   std::complex<double> tmp_1238;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1238 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1237 += tmp_1238;
   result += (0.075*QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2)) * tmp_1237;
   std::complex<double> tmp_1239;
   std::complex<double> tmp_1240;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1240 += AbsSqr(Kappa(j2,j2))*KroneckerDelta(gO1,3 + j2)*
         KroneckerDelta(gO2,3 + j2);
   }
   tmp_1239 += tmp_1240;
   result += (-(ZA(gI1,2)*ZA(gI2,2))) * tmp_1239;
   if (gO1 < 3) {
      result += 0.05*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2)
         ;
   }
   std::complex<double> tmp_1241;
   std::complex<double> tmp_1242;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1242 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1241 += tmp_1242;
   result += (-0.075*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) * tmp_1241;
   if (gO1 < 3) {
      result += -0.05*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3
         );
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Sigmax
         *ZA(gI1,4)*ZA(gI2,3);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Sigmax
         *ZA(gI1,3)*ZA(gI2,4);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*ZA(gI1,1)*ZA(
         gI2,0)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*ZA(gI1,0)*ZA(
         gI2,1)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Kappa(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,2)*
         ZA(gI2,2));
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Sigmax)*KroneckerDelta(3 + gO1,gO2)*ZA(gI1,4)*ZA(
         gI2,3)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Sigmax)*KroneckerDelta(3 + gO1,gO2)*ZA(gI1,3)*ZA(
         gI2,4)*Kappa(gO1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1243;
   std::complex<double> tmp_1244;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1244 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1243 += tmp_1244;
   result += (0.1*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_1243;
   std::complex<double> tmp_1245;
   std::complex<double> tmp_1246;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1246 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1245 += tmp_1246;
   result += (-0.225*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_1245;
   std::complex<double> tmp_1247;
   std::complex<double> tmp_1248;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1248 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1247 += tmp_1248;
   result += (-0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_1247;
   std::complex<double> tmp_1249;
   std::complex<double> tmp_1250;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1250 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1249 += tmp_1250;
   result += (-0.15*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_1249;
   std::complex<double> tmp_1251;
   std::complex<double> tmp_1252;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1252 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1251 += tmp_1252;
   result += (0.075*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_1251;
   std::complex<double> tmp_1253;
   std::complex<double> tmp_1254;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1254 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1253 += tmp_1254;
   result += (-0.075*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_1253;
   std::complex<double> tmp_1255;
   std::complex<double> tmp_1256;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1256 += AbsSqr(Kappa(j2,j2))*KroneckerDelta(gO1,3 + j2)*
         KroneckerDelta(gO2,3 + j2);
   }
   tmp_1255 += tmp_1256;
   result += (-(Conj(ZH(gI1,2))*Conj(ZH(gI2,2)))) * tmp_1255;
   if (gO1 < 3) {
      result += -0.1*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2)
         *Sqr(g1);
   }
   if (gO1 < 3) {
      result += -0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2
         )*Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)*
         Sqr(g1);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)
         *Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.05*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO1 < 3) {
      result += -0.05*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*Conj(Kappa(gO2,gO2))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*Conj(Kappa(gO2,gO2))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*Conj(Kappa(gO2,gO2))*
         KroneckerDelta(gO1,3 + gO2)*Sigmax;
   }
   if (gO2 < 3) {
      result += 0.5*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*Conj(Kappa(gO2,gO2))*
         KroneckerDelta(gO1,3 + gO2)*Sigmax;
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Kappa(gO1,gO1))*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
         KroneckerDelta(gO1,gO2));
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*
         KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*
         KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
         KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
         KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1257;
   std::complex<double> tmp_1259;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1259 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1257 += tmp_1259;
   std::complex<double> tmp_1258;
   std::complex<double> tmp_1260;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1260 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1258 += tmp_1260;
   result += (-0.05*Sqr(g1)) * tmp_1257 * tmp_1258;
   std::complex<double> tmp_1261;
   std::complex<double> tmp_1263;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1263 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1261 += tmp_1263;
   std::complex<double> tmp_1262;
   std::complex<double> tmp_1264;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1264 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1262 += tmp_1264;
   result += (0.1125*Sqr(g1p)) * tmp_1261 * tmp_1262;
   std::complex<double> tmp_1265;
   std::complex<double> tmp_1267;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1267 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1265 += tmp_1267;
   std::complex<double> tmp_1266;
   std::complex<double> tmp_1268;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1268 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1266 += tmp_1268;
   result += (-0.1*Sqr(g1)) * tmp_1265 * tmp_1266;
   std::complex<double> tmp_1269;
   std::complex<double> tmp_1271;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1271 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1269 += tmp_1271;
   std::complex<double> tmp_1270;
   std::complex<double> tmp_1272;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1272 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1270 += tmp_1272;
   result += (0.225*Sqr(g1p)) * tmp_1269 * tmp_1270;
   std::complex<double> tmp_1273;
   std::complex<double> tmp_1275;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1275 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1273 += tmp_1275;
   std::complex<double> tmp_1274;
   std::complex<double> tmp_1276;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1276 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_1274 += tmp_1276;
   result += (-0.05*Sqr(g1)) * tmp_1273 * tmp_1274;
   std::complex<double> tmp_1277;
   std::complex<double> tmp_1279;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1279 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1277 += tmp_1279;
   std::complex<double> tmp_1278;
   std::complex<double> tmp_1280;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1280 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_1278 += tmp_1280;
   result += (0.1125*Sqr(g1p)) * tmp_1277 * tmp_1278;
   std::complex<double> tmp_1281;
   std::complex<double> tmp_1283;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1283 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1281 += tmp_1283;
   std::complex<double> tmp_1282;
   std::complex<double> tmp_1284;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1284 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_1282 += tmp_1284;
   result += (-0.1*Sqr(g1)) * tmp_1281 * tmp_1282;
   std::complex<double> tmp_1285;
   std::complex<double> tmp_1287;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1287 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1285 += tmp_1287;
   std::complex<double> tmp_1286;
   std::complex<double> tmp_1288;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1288 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_1286 += tmp_1288;
   result += (0.225*Sqr(g1p)) * tmp_1285 * tmp_1286;
   if (gO1 < 3) {
      std::complex<double> tmp_1289;
      std::complex<double> tmp_1290;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1290 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_1289 += tmp_1290;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1289;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1291;
      std::complex<double> tmp_1292;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1292 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_1291 += tmp_1292;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1291;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1293;
      std::complex<double> tmp_1294;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1294 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_1293 += tmp_1294;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1293;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1295;
      std::complex<double> tmp_1296;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1296 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_1295 += tmp_1296;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1295;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1297;
      std::complex<double> tmp_1298;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1298 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_1297 += tmp_1298;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1297;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1299;
      std::complex<double> tmp_1300;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1300 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_1299 += tmp_1300;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1299;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1301;
      std::complex<double> tmp_1302;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1302 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_1301 += tmp_1302;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1301;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1303;
      std::complex<double> tmp_1304;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1304 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_1303 += tmp_1304;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1303;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1305;
   std::complex<double> tmp_1307;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1307 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
   }
   tmp_1305 += tmp_1307;
   std::complex<double> tmp_1306;
   std::complex<double> tmp_1308;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1308 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1306 += tmp_1308;
   result += (-0.03333333333333333*Sqr(g1)) * tmp_1305 * tmp_1306;
   std::complex<double> tmp_1309;
   std::complex<double> tmp_1311;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1311 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
   }
   tmp_1309 += tmp_1311;
   std::complex<double> tmp_1310;
   std::complex<double> tmp_1312;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1312 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1310 += tmp_1312;
   result += (-0.1125*Sqr(g1p)) * tmp_1309 * tmp_1310;
   std::complex<double> tmp_1313;
   std::complex<double> tmp_1315;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1315 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
   }
   tmp_1313 += tmp_1315;
   std::complex<double> tmp_1314;
   std::complex<double> tmp_1316;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1316 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1314 += tmp_1316;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_1313 * tmp_1314;
   std::complex<double> tmp_1317;
   std::complex<double> tmp_1319;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1319 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1317 += tmp_1319;
   std::complex<double> tmp_1318;
   std::complex<double> tmp_1320;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1320 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1318 += tmp_1320;
   result += (0.1*Sqr(g1)) * tmp_1317 * tmp_1318;
   std::complex<double> tmp_1321;
   std::complex<double> tmp_1323;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1323 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1321 += tmp_1323;
   std::complex<double> tmp_1322;
   std::complex<double> tmp_1324;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1324 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1322 += tmp_1324;
   result += (-0.225*Sqr(g1p)) * tmp_1321 * tmp_1322;
   std::complex<double> tmp_1325;
   std::complex<double> tmp_1327;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1327 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1325 += tmp_1327;
   std::complex<double> tmp_1326;
   std::complex<double> tmp_1328;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1328 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1326 += tmp_1328;
   result += (-0.1*Sqr(g1)) * tmp_1325 * tmp_1326;
   std::complex<double> tmp_1329;
   std::complex<double> tmp_1331;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1331 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1329 += tmp_1331;
   std::complex<double> tmp_1330;
   std::complex<double> tmp_1332;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1332 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1330 += tmp_1332;
   result += (-0.3375*Sqr(g1p)) * tmp_1329 * tmp_1330;
   std::complex<double> tmp_1333;
   std::complex<double> tmp_1335;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1335 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1333 += tmp_1335;
   std::complex<double> tmp_1334;
   std::complex<double> tmp_1336;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1336 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_1334 += tmp_1336;
   result += (0.1*Sqr(g1)) * tmp_1333 * tmp_1334;
   std::complex<double> tmp_1337;
   std::complex<double> tmp_1339;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1339 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1337 += tmp_1339;
   std::complex<double> tmp_1338;
   std::complex<double> tmp_1340;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1340 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_1338 += tmp_1340;
   result += (-0.225*Sqr(g1p)) * tmp_1337 * tmp_1338;
   std::complex<double> tmp_1341;
   std::complex<double> tmp_1343;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1343 += Conj(ZDX(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1341 += tmp_1343;
   std::complex<double> tmp_1342;
   std::complex<double> tmp_1344;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1344 += Conj(Kappa(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZDX(gI1,j2);
   }
   tmp_1342 += tmp_1344;
   result += (-1) * tmp_1341 * tmp_1342;
   std::complex<double> tmp_1345;
   std::complex<double> tmp_1347;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1347 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1345 += tmp_1347;
   std::complex<double> tmp_1346;
   std::complex<double> tmp_1348;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1348 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_1346 += tmp_1348;
   result += (-0.1*Sqr(g1)) * tmp_1345 * tmp_1346;
   std::complex<double> tmp_1349;
   std::complex<double> tmp_1351;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1351 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1349 += tmp_1351;
   std::complex<double> tmp_1350;
   std::complex<double> tmp_1352;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1352 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_1350 += tmp_1352;
   result += (-0.3375*Sqr(g1p)) * tmp_1349 * tmp_1350;
   std::complex<double> tmp_1353;
   std::complex<double> tmp_1355;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1355 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1353 += tmp_1355;
   std::complex<double> tmp_1354;
   std::complex<double> tmp_1356;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1356 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
   }
   tmp_1354 += tmp_1356;
   result += (-0.03333333333333333*Sqr(g1)) * tmp_1353 * tmp_1354;
   std::complex<double> tmp_1357;
   std::complex<double> tmp_1359;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1359 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1357 += tmp_1359;
   std::complex<double> tmp_1358;
   std::complex<double> tmp_1360;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1360 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
   }
   tmp_1358 += tmp_1360;
   result += (-0.1125*Sqr(g1p)) * tmp_1357 * tmp_1358;
   std::complex<double> tmp_1361;
   std::complex<double> tmp_1363;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1363 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1361 += tmp_1363;
   std::complex<double> tmp_1362;
   std::complex<double> tmp_1364;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1364 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
   }
   tmp_1362 += tmp_1364;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_1361 * tmp_1362;
   if (gO1 < 3) {
      std::complex<double> tmp_1365;
      std::complex<double> tmp_1366;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1366 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_1365 += tmp_1366;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1365;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1367;
      std::complex<double> tmp_1368;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1368 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_1367 += tmp_1368;
      result += (-0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1367;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1369;
      std::complex<double> tmp_1370;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1370 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_1369 += tmp_1370;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1369;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1371;
      std::complex<double> tmp_1372;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1372 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_1371 += tmp_1372;
      result += (-0.225*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1371;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1373;
      std::complex<double> tmp_1374;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1374 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_1373 += tmp_1374;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1373;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1375;
      std::complex<double> tmp_1376;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1376 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_1375 += tmp_1376;
      result += (-0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1375;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1377;
      std::complex<double> tmp_1378;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1378 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_1377 += tmp_1378;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1377;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1379;
      std::complex<double> tmp_1380;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1380 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_1379 += tmp_1380;
      result += (-0.225*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1379;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1381;
      std::complex<double> tmp_1382;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1382 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
      }
      tmp_1381 += tmp_1382;
      result += (0.03333333333333333*Conj(ZDX(gI2,gO2))*Sqr(g1)) * tmp_1381;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1383;
      std::complex<double> tmp_1384;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1384 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
      }
      tmp_1383 += tmp_1384;
      result += (-0.075*Conj(ZDX(gI2,gO2))*Sqr(g1p)) * tmp_1383;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1385;
      std::complex<double> tmp_1386;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1386 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
      }
      tmp_1385 += tmp_1386;
      result += (0.6666666666666666*Conj(ZDX(gI2,gO2))*Sqr(g3)) * tmp_1385;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1387;
      std::complex<double> tmp_1388;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1388 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
      }
      tmp_1387 += tmp_1388;
      result += (-3*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)) *
         tmp_1387;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1389;
      std::complex<double> tmp_1390;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1390 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
      }
      tmp_1389 += tmp_1390;
      result += (0.03333333333333333*Conj(ZDX(gI2,gO2))*Sqr(g1)) * tmp_1389;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1391;
      std::complex<double> tmp_1392;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1392 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
      }
      tmp_1391 += tmp_1392;
      result += (-0.075*Conj(ZDX(gI2,gO2))*Sqr(g1p)) * tmp_1391;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1393;
      std::complex<double> tmp_1394;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1394 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
      }
      tmp_1393 += tmp_1394;
      result += (0.6666666666666666*Conj(ZDX(gI2,gO2))*Sqr(g3)) * tmp_1393;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1395;
      std::complex<double> tmp_1396;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1396 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1395 += tmp_1396;
      result += (0.03333333333333333*Sqr(g1)*ZDX(gI1,gO1)) * tmp_1395;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1397;
      std::complex<double> tmp_1398;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1398 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1397 += tmp_1398;
      result += (-0.075*Sqr(g1p)*ZDX(gI1,gO1)) * tmp_1397;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1399;
      std::complex<double> tmp_1400;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1400 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1399 += tmp_1400;
      result += (0.6666666666666666*Sqr(g3)*ZDX(gI1,gO1)) * tmp_1399;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1401;
      std::complex<double> tmp_1402;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1402 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1401 += tmp_1402;
      result += (0.03333333333333333*Sqr(g1)*ZDX(gI1,gO1)) * tmp_1401;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1403;
      std::complex<double> tmp_1404;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1404 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1403 += tmp_1404;
      result += (-0.075*Sqr(g1p)*ZDX(gI1,gO1)) * tmp_1403;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1405;
      std::complex<double> tmp_1406;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1406 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1405 += tmp_1406;
      result += (0.6666666666666666*Sqr(g3)*ZDX(gI1,gO1)) * tmp_1405;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.06666666666666667*Conj(ZDX(gI2,gO2))*Sqr(g1)*ZDX(gI1,gO1)
         ;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.1*Conj(ZDX(gI2,gO2))*Sqr(g1p)*ZDX(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -1.3333333333333333*Conj(ZDX(gI2,gO2))*Sqr(g3)*ZDX(gI1,gO1);
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1407;
      std::complex<double> tmp_1408;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1408 += Conj(ZDX(gI2,3 + j2))*Conj(Kappa(j2,j2))*ZDX(gI1,j2)
            ;
      }
      tmp_1407 += tmp_1408;
      result += (-3*KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1)) * tmp_1407;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(ZDX(gI2,3 + gO2))*Conj(Kappa(gO2,gO2))*ZDX(gI1,3 +
         gO1)*Kappa(gO1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1409;
   std::complex<double> tmp_1411;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1411 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1409 += tmp_1411;
   std::complex<double> tmp_1410;
   std::complex<double> tmp_1412;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1412 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1410 += tmp_1412;
   result += (0.05*Sqr(g1)) * tmp_1409 * tmp_1410;
   std::complex<double> tmp_1413;
   std::complex<double> tmp_1415;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1415 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1413 += tmp_1415;
   std::complex<double> tmp_1414;
   std::complex<double> tmp_1416;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1416 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1414 += tmp_1416;
   result += (0.075*Sqr(g1p)) * tmp_1413 * tmp_1414;
   std::complex<double> tmp_1417;
   std::complex<double> tmp_1419;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1419 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1417 += tmp_1419;
   std::complex<double> tmp_1418;
   std::complex<double> tmp_1420;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1420 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1418 += tmp_1420;
   result += (-0.1*Sqr(g1)) * tmp_1417 * tmp_1418;
   std::complex<double> tmp_1421;
   std::complex<double> tmp_1423;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1423 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1421 += tmp_1423;
   std::complex<double> tmp_1422;
   std::complex<double> tmp_1424;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1424 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1422 += tmp_1424;
   result += (0.0375*Sqr(g1p)) * tmp_1421 * tmp_1422;
   std::complex<double> tmp_1425;
   std::complex<double> tmp_1427;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1427 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1425 += tmp_1427;
   std::complex<double> tmp_1426;
   std::complex<double> tmp_1428;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1428 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_1426 += tmp_1428;
   result += (0.05*Sqr(g1)) * tmp_1425 * tmp_1426;
   std::complex<double> tmp_1429;
   std::complex<double> tmp_1431;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1431 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1429 += tmp_1431;
   std::complex<double> tmp_1430;
   std::complex<double> tmp_1432;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1432 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_1430 += tmp_1432;
   result += (0.075*Sqr(g1p)) * tmp_1429 * tmp_1430;
   std::complex<double> tmp_1433;
   std::complex<double> tmp_1435;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1435 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1433 += tmp_1435;
   std::complex<double> tmp_1434;
   std::complex<double> tmp_1436;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1436 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_1434 += tmp_1436;
   result += (-0.1*Sqr(g1)) * tmp_1433 * tmp_1434;
   std::complex<double> tmp_1437;
   std::complex<double> tmp_1439;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1439 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1437 += tmp_1439;
   std::complex<double> tmp_1438;
   std::complex<double> tmp_1440;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1440 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_1438 += tmp_1440;
   result += (0.0375*Sqr(g1p)) * tmp_1437 * tmp_1438;
   if (gO1 < 3) {
      std::complex<double> tmp_1441;
      std::complex<double> tmp_1442;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1442 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_1441 += tmp_1442;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1441;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1443;
      std::complex<double> tmp_1444;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1444 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_1443 += tmp_1444;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1443;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1445;
      std::complex<double> tmp_1446;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1446 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_1445 += tmp_1446;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1445;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1447;
      std::complex<double> tmp_1448;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1448 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_1447 += tmp_1448;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1447;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1449;
      std::complex<double> tmp_1450;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1450 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_1449 += tmp_1450;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1449;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1451;
      std::complex<double> tmp_1452;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1452 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_1451 += tmp_1452;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1451;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1453;
      std::complex<double> tmp_1454;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1454 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_1453 += tmp_1454;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1453;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1455;
      std::complex<double> tmp_1456;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1456 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_1455 += tmp_1456;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1455;
   }

   return result;
}

std::complex<double> CLASSNAME::CpUSDXconjUSDXconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1457;
   std::complex<double> tmp_1459;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1459 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1457 += tmp_1459;
   std::complex<double> tmp_1458;
   std::complex<double> tmp_1460;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1460 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1458 += tmp_1460;
   result += (-0.05*Sqr(g1)) * tmp_1457 * tmp_1458;
   std::complex<double> tmp_1461;
   std::complex<double> tmp_1463;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1463 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1461 += tmp_1463;
   std::complex<double> tmp_1462;
   std::complex<double> tmp_1464;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1464 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1462 += tmp_1464;
   result += (0.1125*Sqr(g1p)) * tmp_1461 * tmp_1462;
   std::complex<double> tmp_1465;
   std::complex<double> tmp_1467;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1467 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1465 += tmp_1467;
   std::complex<double> tmp_1466;
   std::complex<double> tmp_1468;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1468 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1466 += tmp_1468;
   result += (0.2*Sqr(g1)) * tmp_1465 * tmp_1466;
   std::complex<double> tmp_1469;
   std::complex<double> tmp_1471;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1471 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1469 += tmp_1471;
   std::complex<double> tmp_1470;
   std::complex<double> tmp_1472;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1472 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1470 += tmp_1472;
   result += (0.1125*Sqr(g1p)) * tmp_1469 * tmp_1470;
   std::complex<double> tmp_1473;
   std::complex<double> tmp_1475;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1475 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1473 += tmp_1475;
   std::complex<double> tmp_1474;
   std::complex<double> tmp_1476;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1476 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_1474 += tmp_1476;
   result += (-0.05*Sqr(g1)) * tmp_1473 * tmp_1474;
   std::complex<double> tmp_1477;
   std::complex<double> tmp_1479;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1479 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1477 += tmp_1479;
   std::complex<double> tmp_1478;
   std::complex<double> tmp_1480;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1480 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_1478 += tmp_1480;
   result += (0.1125*Sqr(g1p)) * tmp_1477 * tmp_1478;
   std::complex<double> tmp_1481;
   std::complex<double> tmp_1483;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1483 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1481 += tmp_1483;
   std::complex<double> tmp_1482;
   std::complex<double> tmp_1484;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1484 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_1482 += tmp_1484;
   result += (0.2*Sqr(g1)) * tmp_1481 * tmp_1482;
   std::complex<double> tmp_1485;
   std::complex<double> tmp_1487;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1487 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1485 += tmp_1487;
   std::complex<double> tmp_1486;
   std::complex<double> tmp_1488;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1488 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_1486 += tmp_1488;
   result += (0.1125*Sqr(g1p)) * tmp_1485 * tmp_1486;
   if (gO1 < 3) {
      std::complex<double> tmp_1489;
      std::complex<double> tmp_1490;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1490 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_1489 += tmp_1490;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1489;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1491;
      std::complex<double> tmp_1492;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1492 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_1491 += tmp_1492;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1491;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1493;
      std::complex<double> tmp_1494;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1494 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_1493 += tmp_1494;
      result += (-0.2*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1493;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1495;
      std::complex<double> tmp_1496;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1496 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_1495 += tmp_1496;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1495;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1497;
      std::complex<double> tmp_1498;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1498 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_1497 += tmp_1498;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1497;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1499;
      std::complex<double> tmp_1500;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1500 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_1499 += tmp_1500;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1499;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1501;
      std::complex<double> tmp_1502;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1502 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_1501 += tmp_1502;
      result += (-0.2*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1501;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1503;
      std::complex<double> tmp_1504;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1504 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_1503 += tmp_1504;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1503;
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXSDXAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1505;
   std::complex<double> tmp_1506;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1506 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1505 += tmp_1506;
   result += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*ZA(gI2,0)) *
      tmp_1505;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vu*Conj(ZDX(gI1,3 + gO2))*Conj(
         Kappa(gO2,gO2))*Lambdax*ZA(gI2,0);
   }
   std::complex<double> tmp_1507;
   std::complex<double> tmp_1508;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1508 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1507 += tmp_1508;
   result += (std::complex<double>(0,-0.5)*vd*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_1507;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vd*Conj(ZDX(gI1,3 + gO2))*Conj(
         Kappa(gO2,gO2))*Lambdax*ZA(gI2,1);
   }
   std::complex<double> tmp_1509;
   std::complex<double> tmp_1510;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1510 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TKappa(j1,j1)
         ;
   }
   tmp_1509 += tmp_1510;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,2)) *
      tmp_1509;
   if (gO2 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZDX(gI1,3 +
         gO2))*Conj(TKappa(gO2,gO2))*ZA(gI2,2);
   }
   std::complex<double> tmp_1511;
   std::complex<double> tmp_1512;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1512 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1511 += tmp_1512;
   result += (std::complex<double>(0,-0.5)*vphi*Conj(Sigmax)*ZA(gI2,3)) *
      tmp_1511;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vphi*Conj(ZDX(gI1,3 + gO2))*Conj
         (Kappa(gO2,gO2))*Sigmax*ZA(gI2,3);
   }
   std::complex<double> tmp_1513;
   std::complex<double> tmp_1514;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1514 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1513 += tmp_1514;
   result += (std::complex<double>(0,-0.5)*vsb*Conj(Sigmax)*ZA(gI2,4)) *
      tmp_1513;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vsb*Conj(ZDX(gI1,3 + gO2))*Conj(
         Kappa(gO2,gO2))*Sigmax*ZA(gI2,4);
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXSDXhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1515;
   std::complex<double> tmp_1516;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1516 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1515 += tmp_1516;
   result += (0.1*vd*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_1515;
   std::complex<double> tmp_1517;
   std::complex<double> tmp_1518;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1518 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1517 += tmp_1518;
   result += (-0.225*vd*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_1517;
   std::complex<double> tmp_1519;
   std::complex<double> tmp_1520;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1520 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1519 += tmp_1520;
   result += (-0.1*vu*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_1519;
   std::complex<double> tmp_1521;
   std::complex<double> tmp_1522;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1522 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1521 += tmp_1522;
   result += (-0.15*vu*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_1521;
   std::complex<double> tmp_1523;
   std::complex<double> tmp_1524;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1524 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1523 += tmp_1524;
   result += (0.075*QS*vs*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_1523;
   std::complex<double> tmp_1525;
   std::complex<double> tmp_1526;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1526 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1525 += tmp_1526;
   result += (-0.075*QS*vsb*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_1525;
   std::complex<double> tmp_1527;
   std::complex<double> tmp_1528;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1528 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1527 += tmp_1528;
   result += (0.5*vu*Conj(Lambdax)*Conj(ZH(gI2,0))) * tmp_1527;
   std::complex<double> tmp_1529;
   std::complex<double> tmp_1530;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1530 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1529 += tmp_1530;
   result += (0.5*vd*Conj(Lambdax)*Conj(ZH(gI2,1))) * tmp_1529;
   std::complex<double> tmp_1531;
   std::complex<double> tmp_1532;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1532 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1531 += tmp_1532;
   result += (0.5*vphi*Conj(Sigmax)*Conj(ZH(gI2,3))) * tmp_1531;
   std::complex<double> tmp_1533;
   std::complex<double> tmp_1534;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1534 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1533 += tmp_1534;
   result += (0.5*vsb*Conj(Sigmax)*Conj(ZH(gI2,4))) * tmp_1533;
   std::complex<double> tmp_1535;
   std::complex<double> tmp_1536;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1536 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TKappa(j1,j1)
         ;
   }
   tmp_1535 += tmp_1536;
   result += (-0.7071067811865475*Conj(ZH(gI2,2))) * tmp_1535;
   std::complex<double> tmp_1537;
   std::complex<double> tmp_1538;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1538 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI1,3 + j2))*KroneckerDelta(
         gO2,3 + j2);
   }
   tmp_1537 += tmp_1538;
   result += (-(vs*Conj(ZH(gI2,2)))) * tmp_1537;
   if (gO2 < 3) {
      result += -0.1*vd*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += -0.15*vd*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.1*vu*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += -0.1*vu*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.05*QS*vs*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += -0.05*QS*vsb*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,3))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*vu*Conj(ZDX(gI1,3 + gO2))*Conj(ZH(gI2,0))*Conj(Kappa(gO2
         ,gO2))*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*vd*Conj(ZDX(gI1,3 + gO2))*Conj(ZH(gI2,1))*Conj(Kappa(gO2
         ,gO2))*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*vphi*Conj(ZDX(gI1,3 + gO2))*Conj(ZH(gI2,3))*Conj(Kappa(
         gO2,gO2))*Sigmax;
   }
   if (gO2 < 3) {
      result += 0.5*vsb*Conj(ZDX(gI1,3 + gO2))*Conj(ZH(gI2,4))*Conj(Kappa(
         gO2,gO2))*Sigmax;
   }
   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZDX(gI1,3 + gO2))*Conj(ZH(gI2,2))*
         Conj(TKappa(gO2,gO2));
   }
   if (gO2 < 3) {
      result += -(vs*AbsSqr(Kappa(gO2,gO2))*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,2
         )));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXGluFDXPR(unsigned gO2, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1539;
   std::complex<double> tmp_1540;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1540 += KroneckerDelta(gO2,3 + j1)*ZDXR(gI2,j1);
   }
   tmp_1539 += tmp_1540;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_1539;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXGluFDXPL(unsigned gO1, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*PhaseGlu*Conj(ZDXL(gI2,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXVGSDX(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 6) {
      result += g3*Conj(ZDX(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXVPSDX(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 6) {
      result += -0.2581988897471611*g1*Conj(ZDX(gI2,gO2))*Cos(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXVZSDX(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1541;
   std::complex<double> tmp_1542;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1542 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1541 += tmp_1542;
   result += (0.2581988897471611*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_1541;
   std::complex<double> tmp_1543;
   std::complex<double> tmp_1544;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1544 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1543 += tmp_1544;
   result += (0.4743416490252569*g1p*Sin(ThetaWp())) * tmp_1543;
   if (gO2 < 3) {
      result += 0.2581988897471611*g1*Conj(ZDX(gI2,gO2))*Cos(ThetaWp())*Sin(
         ThetaW());
   }
   if (gO2 < 3) {
      result += -0.31622776601683794*g1p*Conj(ZDX(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSDXVZpSDX(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1545;
   std::complex<double> tmp_1546;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1546 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1545 += tmp_1546;
   result += (0.4743416490252569*g1p*Cos(ThetaWp())) * tmp_1545;
   std::complex<double> tmp_1547;
   std::complex<double> tmp_1548;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1548 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1547 += tmp_1548;
   result += (-0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_1547;
   if (gO2 < 3) {
      result += -0.31622776601683794*g1p*Conj(ZDX(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.2581988897471611*g1*Conj(ZDX(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUhhVZVZ(unsigned gO2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*((vs*KroneckerDelta(2,gO2) + vsb*KroneckerDelta(3,gO2))*Sqr(
      g1p)*Sqr(QS)*Sqr(Sin(ThetaWp())) + vd*KroneckerDelta(0,gO2)*(
      -14.696938456699067*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 10*
      Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW())*(
      -18.973665961010276*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) +
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(ThetaWp()))) + 2*vu*
      KroneckerDelta(1,gO2)*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp
      ()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW
      ()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()))
      + g1p*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(
      ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhVZpVZ(unsigned gO2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*((vs*KroneckerDelta(2,gO2) + vsb*KroneckerDelta(3,gO2))*Sin(2
      *ThetaWp())*Sqr(g1p)*Sqr(QS) - vd*KroneckerDelta(0,gO2)*(-9*Sin(2*ThetaWp())
      *Sqr(g1p) + 20*Cos(ThetaWp())*Sin(ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) +
      14.696938456699067*g1*g1p*Sin(ThetaW())*Sqr(Cos(ThetaWp())) + 6*Sin(2*
      ThetaWp())*Sqr(g1)*Sqr(Sin(ThetaW())) - 14.696938456699067*g1*g1p*Sin(ThetaW
      ())*Sqr(Sin(ThetaWp())) + Cos(ThetaW())*(30.983866769659336*g1*g2*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 18.973665961010276*g1p*g2*Sqr(Cos(
      ThetaWp())) - 18.973665961010276*g1p*g2*Sqr(Sin(ThetaWp())))) + 2*vu*
      KroneckerDelta(1,gO2)*(2*Sin(2*ThetaWp())*Sqr(g1p) - 5*Sin(2*ThetaWp())*Sqr(
      g2)*Sqr(Cos(ThetaW())) + 4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(Cos(
      ThetaWp())) - 3*Sin(2*ThetaWp())*Sqr(g1)*Sqr(Sin(ThetaW())) -
      4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(Sin(ThetaWp())) + 2*Cos(ThetaW())
      *(-7.745966692414834*g1*g2*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) +
      3.1622776601683795*g1p*g2*Sqr(Cos(ThetaWp())) - 3.1622776601683795*g1p*g2*
      Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhVZpVZp(unsigned gO2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*((vs*KroneckerDelta(2,gO2) + vsb*KroneckerDelta(3,gO2))*Sqr(
      g1p)*Sqr(QS)*Sqr(Cos(ThetaWp())) + 2*vu*KroneckerDelta(1,gO2)*(-2*Cos(
      ThetaWp())*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) +
      2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(
      ThetaWp())) + (g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*
      Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(ThetaWp()))) + vd*
      KroneckerDelta(0,gO2)*(6*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(
      ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(
      ThetaWp())) + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjVWmVWm(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(vd*KroneckerDelta(0,gO2) + vu*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUhhbargWmgWm(unsigned gO1) const
{
   std::complex<double> result;

   result = -0.25*(vd*KroneckerDelta(0,gO1) + vu*KroneckerDelta(1,gO1))*Sqr(g2)
      ;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbargWmCgWmC(unsigned gO1) const
{
   std::complex<double> result;

   result = -0.25*(vd*KroneckerDelta(0,gO1) + vu*KroneckerDelta(1,gO1))*Sqr(g2)
      ;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbargZgZ(unsigned gO1) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-((vs*KroneckerDelta(2,gO1) + vsb*KroneckerDelta(3,gO1))*Sqr
      (g1p)*Sqr(QS)*Sqr(Sin(ThetaWp()))) - vd*KroneckerDelta(0,gO1)*(
      -14.696938456699067*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 10*
      Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW())*(
      -18.973665961010276*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) +
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(ThetaWp()))) - 2*vu*
      KroneckerDelta(1,gO1)*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp
      ()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW
      ()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()))
      + g1p*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(
      ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhbargZpgZ(unsigned gO1) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.0125*(-((vs*KroneckerDelta(2,gO1) + vsb*KroneckerDelta(3,gO1))*
      Sin(2*ThetaWp())*Sqr(g1p)*Sqr(QS)) + 2*vu*KroneckerDelta(1,gO1)*(
      -6.324555320336759*g1p*g2*Cos(ThetaW())*Cos(2*ThetaWp()) + 3.872983346207417
      *g1*g2*Sin(2*ThetaW())*Sin(2*ThetaWp()) - 2*Sin(2*ThetaWp())*Sqr(g1p) + 5*
      Sin(2*ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) - 4.898979485566356*g1*g1p*Sin(
      ThetaW())*Sqr(Cos(ThetaWp())) + 3*Sin(2*ThetaWp())*Sqr(g1)*Sqr(Sin(ThetaW())
      ) + 4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) + vd*
      KroneckerDelta(0,gO1)*(-9*Sin(2*ThetaWp())*Sqr(g1p) + 20*Cos(ThetaWp())*Sin(
      ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) + 14.696938456699067*g1*g1p*Sin(ThetaW
      ())*Sqr(Cos(ThetaWp())) + 6*Sin(2*ThetaWp())*Sqr(g1)*Sqr(Sin(ThetaW())) -
      14.696938456699067*g1*g1p*Sin(ThetaW())*Sqr(Sin(ThetaWp())) + Cos(ThetaW())*
      (30.983866769659336*g1*g2*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) +
      18.973665961010276*g1p*g2*Sqr(Cos(ThetaWp())) - 18.973665961010276*g1p*g2*
      Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhbargZpgZp(unsigned gO1) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-((vs*KroneckerDelta(2,gO1) + vsb*KroneckerDelta(3,gO1))*Sqr
      (g1p)*Sqr(QS)*Sqr(Cos(ThetaWp()))) - 2*vu*KroneckerDelta(1,gO1)*(-2*Cos(
      ThetaWp())*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) +
      2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(
      ThetaWp())) + (g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*
      Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(ThetaWp()))) - vd*
      KroneckerDelta(0,gO1)*(6*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(
      ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(
      ThetaWp())) + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhVZVZ(unsigned gO1, unsigned gO2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*((KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) + KroneckerDelta
      (3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p)*Sqr(QS)*Sqr(Sin(ThetaWp())) +
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(-14.696938456699067*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
      Cos(ThetaWp())) + Cos(ThetaW())*(-18.973665961010276*g1p*g2*Cos(ThetaWp())*
      Sin(ThetaWp()) + 15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp())))
      + 6*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(
      ThetaWp()))) + 2*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp()) + g1*Sin(ThetaW())*
      (7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*Sqr(Cos(ThetaWp())
      ) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + g1p*(
      2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(ThetaWp(
      ))))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhVZpVZp(unsigned gO1, unsigned gO2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*((KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) + KroneckerDelta
      (3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p)*Sqr(QS)*Sqr(Cos(ThetaWp())) + 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-2*Cos(ThetaWp())*(
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*
      g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + (g1*
      Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*
      Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(ThetaWp()))) + KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*(6*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(
      ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(
      ThetaWp())) + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-(Conj(ZP(gI2,0))*(40*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*ZP(gI1,0) - 3*QS*KroneckerDelta(2,gO1)*KroneckerDelta(
      2,gO2)*Sqr(g1p)*ZP(gI1,0) + 3*QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)
      *Sqr(g1p)*ZP(gI1,0) - 20*Conj(Sigmax)*KroneckerDelta(3,gO2)*KroneckerDelta(4
      ,gO1)*Lambdax*ZP(gI1,1) - 20*Conj(Sigmax)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Lambdax*ZP(gI1,1) + KroneckerDelta(1,gO1)*(2*
      KroneckerDelta(1,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2))*ZP(gI1,0) + 10*
      KroneckerDelta(0,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,1)) +
      KroneckerDelta(0,gO1)*(KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9*Sqr(g1p) + 10*
      Sqr(g2))*ZP(gI1,0) + 10*KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))
      *ZP(gI1,1)))) - 2*Conj(ZP(gI2,1))*(-10*Conj(Lambdax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax*ZP(gI1,0) - 10*Conj(Lambdax)*KroneckerDelta(3,
      gO1)*KroneckerDelta(4,gO2)*Sigmax*ZP(gI1,0) + 5*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,0) + 20*AbsSqr(
      Lambdax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*ZP(gI1,1) + 3*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1)*ZP(gI1,1) + 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1p)*ZP(gI1,1) - QS*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*ZP(gI1,1) + QS*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*ZP(gI1,1) + 5*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g2)*ZP(gI1,1) +
      KroneckerDelta(0,gO2)*(5*KroneckerDelta(1,gO1)*(-2*AbsSqr(Lambdax) + Sqr(g2)
      )*ZP(gI1,0) + KroneckerDelta(0,gO1)*(-3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2))*ZP
      (gI1,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = -0.05*(QS*(KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) -
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p) + KroneckerDelta(0,gO1
      )*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) -
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(
      g2)))*(Conj(UHp0(gI2,0))*UHp0(gI1,0) - Conj(UHp0(gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = -0.05*(QS*(KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) -
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p) + KroneckerDelta(0,gO1
      )*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(g2)) +
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr
      (g2)))*(Conj(UHpp(gI2,0))*UHpp(gI1,0) - Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjHpmHpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-(Conj(ZP(gI2,0))*(40*vs*AbsSqr(Lambdax)*KroneckerDelta(2,
      gO2)*ZP(gI1,0) - 3*QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p)*ZP(gI1,0) + 3*QS*vsb
      *KroneckerDelta(3,gO2)*Sqr(g1p)*ZP(gI1,0) - 20*vphi*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*Lambdax*ZP(gI1,1) - 20*vsb*Conj(Sigmax)*KroneckerDelta
      (4,gO2)*Lambdax*ZP(gI1,1) + 28.284271247461902*KroneckerDelta(2,gO2)*
      TLambdax*ZP(gI1,1) + KroneckerDelta(1,gO2)*(2*vu*(-3*Sqr(g1) + 3*Sqr(g1p) +
      5*Sqr(g2))*ZP(gI1,0) + 10*vd*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,1)) +
      KroneckerDelta(0,gO2)*(vd*(6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2))*ZP(gI1,0) +
      10*vu*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,1)))) - 2*Conj(ZP(gI2,1))*(
      14.142135623730951*Conj(TLambdax)*KroneckerDelta(2,gO2)*ZP(gI1,0) - 10*vphi*
      Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZP(gI1,0) - 10*vsb*Conj(Lambdax)*
      KroneckerDelta(4,gO2)*Sigmax*ZP(gI1,0) + 20*vs*AbsSqr(Lambdax)*
      KroneckerDelta(2,gO2)*ZP(gI1,1) - QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p)*ZP(
      gI1,1) + QS*vsb*KroneckerDelta(3,gO2)*Sqr(g1p)*ZP(gI1,1) + KroneckerDelta(1,
      gO2)*(5*vd*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,0) + vu*(3*Sqr(g1) + 2*Sqr(
      g1p) + 5*Sqr(g2))*ZP(gI1,1)) + KroneckerDelta(0,gO2)*(5*vu*(-2*AbsSqr(
      Lambdax) + Sqr(g2))*ZP(gI1,0) + vd*(-3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2))*ZP(
      gI1,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSHp0SHp0(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = -0.05*(QS*(vs*KroneckerDelta(2,gO2) - vsb*KroneckerDelta(3,gO2))*
      Sqr(g1p) + vd*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) -
      vu*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2)))*(Conj(UHp0(
      gI2,0))*UHp0(gI1,0) - Conj(UHp0(gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSHppSHpp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = -0.05*(QS*(vs*KroneckerDelta(2,gO2) - vsb*KroneckerDelta(3,gO2))*
      Sqr(g1p) + vd*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(g2)) +
      vu*KroneckerDelta(1,gO2)*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2)))*(Conj(UHpp(
      gI2,0))*UHpp(gI1,0) - Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarChaChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*(g2*KroneckerDelta(0,gO2)*UM(gI1,1)*UP(gI2,0) +
      (g2*KroneckerDelta(1,gO2)*UM(gI1,0) + Conj(Lambdax)*KroneckerDelta(2,gO2)*
      UM(gI1,1))*UP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarChaChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*(g2*Conj(UM(gI2,0))*Conj(UP(gI1,1))*
      KroneckerDelta(1,gO1) + Conj(UM(gI2,1))*(g2*Conj(UP(gI1,0))*KroneckerDelta(0
      ,gO1) + Conj(UP(gI1,1))*KroneckerDelta(2,gO1)*Lambdax));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*KroneckerDelta(gI1,gI2)*(QS*(-(KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)) + KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2))*Sqr(
      g1p) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p)
      - 5*Sqr(g2)) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*
      Sqr(g1p) + 5*Sqr(g2)));

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSvSv(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*KroneckerDelta(gI1,gI2)*(QS*(-(vs*KroneckerDelta(2,gO2)) + vsb
      *KroneckerDelta(3,gO2))*Sqr(g1p) + vd*KroneckerDelta(0,gO2)*(-3*Sqr(g1) + 3*
      Sqr(g1p) - 5*Sqr(g2)) + vu*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5
      *Sqr(g2)));

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFdFdPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1549;
   std::complex<double> tmp_1550;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1550 += Conj(Yd(j1,j1))*ZDL(gI1,j1)*ZDR(gI2,j1);
   }
   tmp_1549 += tmp_1550;
   result += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_1549;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFdFdPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1551;
   std::complex<double> tmp_1552;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1552 += Conj(ZDL(gI2,j1))*Conj(ZDR(gI1,j1))*Yd(j1,j1);
   }
   tmp_1551 += tmp_1552;
   result += (-0.7071067811865475*KroneckerDelta(0,gO1)) * tmp_1551;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFDXFDXPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1553;
   std::complex<double> tmp_1554;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1554 += Conj(Kappa(j1,j1))*ZDXL(gI1,j1)*ZDXR(gI2,j1);
   }
   tmp_1553 += tmp_1554;
   result += (-0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_1553;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFDXFDXPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1555;
   std::complex<double> tmp_1556;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1556 += Conj(ZDXL(gI2,j1))*Conj(ZDXR(gI1,j1))*Kappa(j1,j1);
   }
   tmp_1555 += tmp_1556;
   result += (-0.7071067811865475*KroneckerDelta(2,gO1)) * tmp_1555;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFeFePR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1557;
   std::complex<double> tmp_1558;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1558 += Conj(Ye(j1,j1))*ZEL(gI1,j1)*ZER(gI2,j1);
   }
   tmp_1557 += tmp_1558;
   result += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_1557;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFeFePL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1559;
   std::complex<double> tmp_1560;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1560 += Conj(ZEL(gI2,j1))*Conj(ZER(gI1,j1))*Ye(j1,j1);
   }
   tmp_1559 += tmp_1560;
   result += (-0.7071067811865475*KroneckerDelta(0,gO1)) * tmp_1559;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFuFuPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1561;
   std::complex<double> tmp_1562;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1562 += Conj(Yu(j1,j1))*ZUL(gI1,j1)*ZUR(gI2,j1);
   }
   tmp_1561 += tmp_1562;
   result += (-0.7071067811865475*KroneckerDelta(1,gO2)) * tmp_1561;

   return result;
}

std::complex<double> CLASSNAME::CpUhhbarFuFuPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1563;
   std::complex<double> tmp_1564;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1564 += Conj(ZUL(gI2,j1))*Conj(ZUR(gI1,j1))*Yu(j1,j1);
   }
   tmp_1563 += tmp_1564;
   result += (-0.7071067811865475*KroneckerDelta(1,gO1)) * tmp_1563;

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-40*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,
      gO2)*ZA(gI1,0)*ZA(gI2,0) + 3*QS*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*
      Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0) - 3*QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,
      gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0) + 10*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,1)*ZA(gI2,0) + 10*Conj(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,0) + 10
      *Conj(Lambdax)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,1)*
      ZA(gI2,0) + 10*Conj(Lambdax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,1)*ZA(gI2,0) - 10*Conj(Sigmax)*KroneckerDelta(1,gO2)*
      KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,3)*ZA(gI2,0) - 10*Conj(Lambdax)*
      KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,3)*ZA(gI2,0) - 10*
      Conj(Sigmax)*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Lambdax*ZA(gI1,4)*
      ZA(gI2,0) - 10*Conj(Lambdax)*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*
      Sigmax*ZA(gI1,4)*ZA(gI2,0) + 10*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,0)*ZA(gI2,1) + 10*Conj(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,1) + 10
      *Conj(Lambdax)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,0)*
      ZA(gI2,1) + 10*Conj(Lambdax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,0)*ZA(gI2,1) - 40*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*ZA(gI1,1)*ZA(gI2,1) + 2*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1) - 2*QS*KroneckerDelta(3,
      gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1) - 10*Conj(Sigmax)*
      KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,3)*ZA(gI2,1) - 10
      *Conj(Lambdax)*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,3)*
      ZA(gI2,1) - 10*Conj(Sigmax)*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*
      Lambdax*ZA(gI1,4)*ZA(gI2,1) - 10*Conj(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(3,gO1)*Sigmax*ZA(gI1,4)*ZA(gI2,1) - 40*AbsSqr(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(gI2,2) - 40*AbsSqr(
      Sigmax)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(gI2,2) -
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,2)*ZA(
      gI2,2) + KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1
      ,2)*ZA(gI2,2) - 20*Conj(Sigmax)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*
      KappaPr*ZA(gI1,3)*ZA(gI2,2) - 20*Conj(KappaPr)*KroneckerDelta(4,gO1)*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,2) + 20*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,4)*ZA(gI2,2) + 20
      *Conj(Sigmax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*
      ZA(gI2,2) + 20*Conj(KappaPr)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*
      Sigmax*ZA(gI1,4)*ZA(gI2,2) + 20*Conj(KappaPr)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,2) - 10*Conj(Sigmax)*
      KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,0)*ZA(gI2,3) - 10
      *Conj(Lambdax)*KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,0)*
      ZA(gI2,3) - 10*Conj(Sigmax)*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*
      Lambdax*ZA(gI1,1)*ZA(gI2,3) - 10*Conj(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,1)*ZA(gI2,3) - 20*Conj(Sigmax)*
      KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,3) - 20
      *Conj(KappaPr)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*
      ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*ZA
      (gI1,3)*ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta(4,gO1)*KroneckerDelta(4
      ,gO2)*ZA(gI1,3)*ZA(gI2,3) + KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(
      g1p)*Sqr(QS)*ZA(gI1,3)*ZA(gI2,3) - KroneckerDelta(3,gO1)*KroneckerDelta(3,
      gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,3)*ZA(gI2,3) + 20*Conj(Sigmax)*KroneckerDelta(2
      ,gO2)*KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,4)*ZA(gI2,3) + 20*Conj(Sigmax)*
      KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,3) + 20
      *Conj(KappaPr)*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,4)*
      ZA(gI2,3) + 20*Conj(KappaPr)*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,4)*ZA(gI2,3) - 10*Conj(Sigmax)*KroneckerDelta(1,gO2)*
      KroneckerDelta(3,gO1)*Lambdax*ZA(gI1,0)*ZA(gI2,4) - 10*Conj(Lambdax)*
      KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Sigmax*ZA(gI1,0)*ZA(gI2,4) - 10*
      Conj(Sigmax)*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Lambdax*ZA(gI1,1)*
      ZA(gI2,4) - 10*Conj(Lambdax)*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*
      Sigmax*ZA(gI1,1)*ZA(gI2,4) + 20*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,2)*ZA(gI2,4) + 20*Conj(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,4) + 20
      *Conj(KappaPr)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,2)*
      ZA(gI2,4) + 20*Conj(KappaPr)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,2)*ZA(gI2,4) + 20*Conj(Sigmax)*KroneckerDelta(2,gO2)*
      KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,3)*ZA(gI2,4) + 20*Conj(Sigmax)*
      KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2,4) + 20
      *Conj(KappaPr)*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,3)*
      ZA(gI2,4) + 20*Conj(KappaPr)*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,3)*ZA(gI2,4) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*ZA(gI1,4)*ZA(gI2,4) - 40*AbsSqr(Sigmax)*KroneckerDelta
      (3,gO1)*KroneckerDelta(3,gO2)*ZA(gI1,4)*ZA(gI2,4) - 80*AbsSqr(KappaPr)*
      KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(gI2,4) - 20*Conj(
      Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*KappaPr*ZA(gI1,4)*ZA(gI2
      ,4) - 20*Conj(Sigmax)*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*KappaPr*ZA
      (gI1,4)*ZA(gI2,4) - 20*Conj(KappaPr)*KroneckerDelta(2,gO2)*KroneckerDelta(3,
      gO1)*Sigmax*ZA(gI1,4)*ZA(gI2,4) - 20*Conj(KappaPr)*KroneckerDelta(2,gO1)*
      KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,4) + 2*KroneckerDelta(1,gO1)*(
      KroneckerDelta(1,gO2)*((-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr
      (g2))*ZA(gI1,0)*ZA(gI2,0) - (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*
      ZA(gI2,1) - 20*AbsSqr(Lambdax)*ZA(gI1,2)*ZA(gI2,2) + QS*Sqr(g1p)*ZA(gI1,2)*
      ZA(gI2,2) - QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) - 5*(Conj(Sigmax)*Lambdax +
      Conj(Lambdax)*Sigmax)*(KroneckerDelta(4,gO2)*(ZA(gI1,3)*ZA(gI2,0) + ZA(gI1,0
      )*ZA(gI2,3)) + KroneckerDelta(3,gO2)*(ZA(gI1,4)*ZA(gI2,0) + ZA(gI1,0)*ZA(gI2
      ,4)) - KroneckerDelta(0,gO2)*(ZA(gI1,4)*ZA(gI2,3) + ZA(gI1,3)*ZA(gI2,4)))) -
      KroneckerDelta(0,gO1)*(KroneckerDelta(0,gO2)*((6*Sqr(g1) + 9*Sqr(g1p) + 10*
      Sqr(g2))*ZA(gI1,0)*ZA(gI2,0) + 2*(20*AbsSqr(Lambdax) - 3*Sqr(g1) + 3*Sqr(g1p
      ) - 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,1) + 40*AbsSqr(Lambdax)*ZA(gI1,2)*ZA(gI2,2)
      - 3*QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) + 3*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) +
      10*(Conj(Sigmax)*Lambdax + Conj(Lambdax)*Sigmax)*(KroneckerDelta(4,gO2)*(ZA(
      gI1,3)*ZA(gI2,1) + ZA(gI1,1)*ZA(gI2,3)) + KroneckerDelta(3,gO2)*(ZA(gI1,4)*
      ZA(gI2,1) + ZA(gI1,1)*ZA(gI2,4)) - KroneckerDelta(1,gO2)*(ZA(gI1,4)*ZA(gI2,3
      ) + ZA(gI1,3)*ZA(gI2,4)))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-40*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - 40*AbsSqr(Lambdax)*Conj(ZH(gI1
      ,2))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2) - 40*AbsSqr
      (Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1) - 40*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
      KroneckerDelta(1,gO2)*KroneckerDelta(2,gO1) - 40*AbsSqr(Lambdax)*Conj(ZH(gI1
      ,2))*Conj(ZH(gI2,0))*KroneckerDelta(0,gO1)*KroneckerDelta(2,gO2) - 40*AbsSqr
      (Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,
      4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) - 40*AbsSqr(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)*KroneckerDelta
      (3,gO1) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(2
      ,gO2)*KroneckerDelta(3,gO1) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      2))*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2) - 40*
      AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,
      4))*Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1) - 40*AbsSqr(
      Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KroneckerDelta
      (4,gO1) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(3
      ,gO2)*KroneckerDelta(4,gO1) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      4))*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1) - 40*AbsSqr(Sigmax)*Conj(ZH(
      gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2) - 40*
      AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO1)*
      KroneckerDelta(4,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,
      3))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2) - 40*AbsSqr(
      Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO1)*KroneckerDelta
      (4,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(4
      ,gO1)*KroneckerDelta(4,gO2) - 240*AbsSqr(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(
      gI2,4))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2) + 20*Conj(Sigmax)*Conj(
      ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*
      KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,
      gO1)*KroneckerDelta(3,gO2)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,3))*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*KappaPr + 20*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KroneckerDelta
      (4,gO1)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*
      KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*KappaPr + 20*Conj(Sigmax)*Conj(
      ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*
      KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,
      gO1)*KroneckerDelta(4,gO2)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,4))*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*KappaPr + 20*Conj(
      Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO1)*KroneckerDelta
      (4,gO2)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*KappaPr + 20*Conj(Sigmax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*
      KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,
      gO1)*KroneckerDelta(4,gO2)*KappaPr - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*Lambdax - 10*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*KroneckerDelta
      (1,gO1)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*Lambdax - 10*Conj(Sigmax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*
      Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,
      gO2)*KroneckerDelta(3,gO1)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,0))*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Lambdax - 10*Conj(
      Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO1)*KroneckerDelta
      (3,gO2)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,0))*
      KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Lambdax - 10*Conj(Sigmax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*
      Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,
      gO2)*KroneckerDelta(4,gO1)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,1))*KroneckerDelta(0,gO1)*KroneckerDelta(4,gO2)*Lambdax - 10*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO1)*KroneckerDelta
      (4,gO2)*Lambdax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*Sigmax - 10*Conj(Lambdax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*
      Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(0,
      gO1)*KroneckerDelta(1,gO2)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,4))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*Sigmax - 10*Conj(
      Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*
      KroneckerDelta(3,gO1)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      0))*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Sigmax + 20*Conj(KappaPr)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*
      Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,
      gO1)*KroneckerDelta(3,gO2)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,0))*KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Sigmax + 20*Conj(
      KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO1)*
      KroneckerDelta(3,gO2)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      1))*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Sigmax - 10*Conj(Lambdax)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*
      Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,
      gO2)*KroneckerDelta(4,gO1)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,4))*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*Sigmax + 20*Conj(
      KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH(gI2,
      4))*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax - 10*Conj(Lambdax)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO1)*KroneckerDelta(4,gO2)*
      Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,
      gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,3))*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(
      KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO1)*
      KroneckerDelta(4,gO2)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      2))*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(KappaPr)*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*
      Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,
      gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH
      (gI2,3))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*Sigmax + 3*QS*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*Sqr(g1p)
      - 3*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)*Sqr(g1p) + 2*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO1
      )*KroneckerDelta(1,gO2)*Sqr(g1p) - 2*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1p) + 3*QS*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,0))*KroneckerDelta(0,gO2)*KroneckerDelta(2,gO1)*Sqr(g1p) + 2*QS*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*KroneckerDelta(1,gO2)*KroneckerDelta(2,gO1)*
      Sqr(g1p) + 3*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*KroneckerDelta(0,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p) + 2*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
      KroneckerDelta(1,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p) - 3*QS*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,0))*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p) - 2*QS*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*
      Sqr(g1p) - 3*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(0,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p) - 2*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*
      KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p) + 2*Conj(ZH(gI1,1))*(
      -20*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*KroneckerDelta(1,gO2)*KroneckerDelta(2,
      gO1) - 20*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2) - 5*Conj(Sigmax)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)
      *KroneckerDelta(3,gO1)*Lambdax - 5*Conj(Sigmax)*Conj(ZH(gI2,4))*
      KroneckerDelta(0,gO1)*KroneckerDelta(3,gO2)*Lambdax - 5*Conj(Sigmax)*Conj(ZH
      (gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Lambdax - 5*Conj(Sigmax
      )*Conj(ZH(gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta(4,gO2)*Lambdax - 5*
      Conj(Lambdax)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*
      Sigmax - 5*Conj(Lambdax)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO1)*
      KroneckerDelta(3,gO2)*Sigmax - 5*Conj(Lambdax)*Conj(ZH(gI2,3))*
      KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Sigmax - 5*Conj(Lambdax)*Conj(ZH
      (gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta(4,gO2)*Sigmax + QS*Conj(ZH(gI2
      ,2))*KroneckerDelta(1,gO2)*KroneckerDelta(2,gO1)*Sqr(g1p) + QS*Conj(ZH(gI2,2
      ))*KroneckerDelta(1,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p) - QS*Conj(ZH(gI2,3))
      *KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p) - QS*Conj(ZH(gI2,3))*
      KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p) + Conj(ZH(gI2,0))*(-5*(
      KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1) + KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2))*(Conj(Sigmax)*Lambdax + Conj(Lambdax)*Sigmax) +
      KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*(-20*AbsSqr(Lambdax) + 3*Sqr(g1)
      - 3*Sqr(g1p) + 5*Sqr(g2)) + KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*(
      -20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))) + Conj(ZH(gI2,1))
      *(-20*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) + QS*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p) - QS*KroneckerDelta(3,
      gO1)*KroneckerDelta(3,gO2)*Sqr(g1p) + KroneckerDelta(0,gO1)*KroneckerDelta(0
      ,gO2)*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) - 3*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(
      g2)))) - Conj(ZH(gI1,0))*(40*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*KroneckerDelta(
      0,gO2)*KroneckerDelta(2,gO1) + 40*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO1)*KroneckerDelta(2,gO2) + 10*Conj(Sigmax)*Conj(ZH(gI2,4)
      )*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Lambdax + 10*Conj(Sigmax)*Conj
      (ZH(gI2,4))*KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Lambdax + 10*Conj(
      Sigmax)*Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Lambdax
      + 10*Conj(Sigmax)*Conj(ZH(gI2,3))*KroneckerDelta(1,gO1)*KroneckerDelta(4,gO2
      )*Lambdax + 10*Conj(Lambdax)*Conj(ZH(gI2,4))*KroneckerDelta(1,gO2)*
      KroneckerDelta(3,gO1)*Sigmax + 10*Conj(Lambdax)*Conj(ZH(gI2,4))*
      KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Sigmax + 10*Conj(Lambdax)*Conj(
      ZH(gI2,3))*KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Sigmax + 10*Conj(
      Lambdax)*Conj(ZH(gI2,3))*KroneckerDelta(1,gO1)*KroneckerDelta(4,gO2)*Sigmax
      - 3*QS*Conj(ZH(gI2,2))*KroneckerDelta(0,gO2)*KroneckerDelta(2,gO1)*Sqr(g1p)
      - 3*QS*Conj(ZH(gI2,2))*KroneckerDelta(0,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)
      + 3*QS*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p)
      + 3*QS*Conj(ZH(gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)
      - 2*Conj(ZH(gI2,1))*(-5*(KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1) +
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2))*(Conj(Sigmax)*Lambdax + Conj(
      Lambdax)*Sigmax) + KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*(-20*AbsSqr(
      Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) + KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(
      g2))) + Conj(ZH(gI2,0))*(40*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2) - 3*QS*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr
      (g1p) + 3*QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p) + 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(20*AbsSqr(Lambdax) - 3*Sqr(g1)
      + 3*Sqr(g1p) - 5*Sqr(g2)) + 3*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(6
      *Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2)))) - 3*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS) + Conj(ZH(gI1,3
      ))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(
      QS) + Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)*KroneckerDelta(3
      ,gO1)*Sqr(g1p)*Sqr(QS) + Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(2,
      gO2)*KroneckerDelta(3,gO1)*Sqr(g1p)*Sqr(QS) + Conj(ZH(gI1,3))*Conj(ZH(gI2,2)
      )*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) + Conj(ZH(gI1
      ,2))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*
      Sqr(QS) + Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) - 3*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS));

   return result;
}

std::complex<double> CLASSNAME::CpUhhAhAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-40*vs*AbsSqr(Lambdax)*KroneckerDelta(2,gO2)*ZA(gI1,0)*ZA(
      gI2,0) + 3*QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0) - 3*QS*
      vsb*KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0) - 14.142135623730951*
      Conj(TLambdax)*KroneckerDelta(2,gO2)*ZA(gI1,1)*ZA(gI2,0) + 10*vphi*Conj(
      Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,0) + 10*vsb*Conj(
      Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,0) + 10*vphi*Conj(
      Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,1)*ZA(gI2,0) + 10*vsb*Conj(
      Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,1)*ZA(gI2,0) -
      14.142135623730951*KroneckerDelta(2,gO2)*TLambdax*ZA(gI1,1)*ZA(gI2,0) - 10*
      vu*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,0) - 10*vu*
      Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,0) - 10*vu*Conj(
      Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,4)*ZA(gI2,0) - 10*vu*Conj(
      Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,0) -
      14.142135623730951*Conj(TLambdax)*KroneckerDelta(2,gO2)*ZA(gI1,0)*ZA(gI2,1)
      + 10*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,1) +
      10*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,1) + 10*
      vphi*Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2,1) + 10*vsb
      *Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2,1) -
      14.142135623730951*KroneckerDelta(2,gO2)*TLambdax*ZA(gI1,0)*ZA(gI2,1) - 40*
      vs*AbsSqr(Lambdax)*KroneckerDelta(2,gO2)*ZA(gI1,1)*ZA(gI2,1) + 2*QS*vs*
      KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1) - 2*QS*vsb*KroneckerDelta
      (3,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1) - 10*vd*Conj(Sigmax)*KroneckerDelta(4,
      gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,1) - 10*vd*Conj(Lambdax)*KroneckerDelta(4,gO2)
      *Sigmax*ZA(gI1,3)*ZA(gI2,1) - 10*vd*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      Lambdax*ZA(gI1,4)*ZA(gI2,1) - 10*vd*Conj(Lambdax)*KroneckerDelta(3,gO2)*
      Sigmax*ZA(gI1,4)*ZA(gI2,1) - 40*vsb*AbsSqr(Sigmax)*KroneckerDelta(3,gO2)*ZA(
      gI1,2)*ZA(gI2,2) - 40*vphi*AbsSqr(Sigmax)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA
      (gI2,2) - vs*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,2)*ZA(gI2,2) +
      vsb*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,2)*ZA(gI2,2) -
      14.142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(gI2
      ,2) - 14.142135623730951*Conj(TSigmax)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(
      gI2,2) - 20*vphi*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2
      ,2) - 14.142135623730951*Conj(MuPhi)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*
      ZA(gI2,2) - 20*vphi*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(
      gI2,2) - 14.142135623730951*KroneckerDelta(4,gO2)*TSigmax*ZA(gI1,3)*ZA(gI2,2
      ) + 14.142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(3,gO2)*ZA(gI1,4)*ZA
      (gI2,2) - 14.142135623730951*Conj(TSigmax)*KroneckerDelta(3,gO2)*ZA(gI1,4)*
      ZA(gI2,2) + 20*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,4)*ZA(
      gI2,2) + 20*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,
      2) + 14.142135623730951*Conj(MuPhi)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*
      ZA(gI2,2) + 20*vphi*Conj(KappaPr)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(
      gI2,2) + 20*vsb*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,
      2) - 14.142135623730951*KroneckerDelta(3,gO2)*TSigmax*ZA(gI1,4)*ZA(gI2,2) -
      10*vu*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,3) - 10*vu
      *Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2,3) - 10*vd*Conj
      (Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,3) - 10*vd*Conj(
      Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,1)*ZA(gI2,3) -
      14.142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(gI2
      ,3) - 14.142135623730951*Conj(TSigmax)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(
      gI2,3) - 20*vphi*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2
      ,3) - 14.142135623730951*Conj(MuPhi)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*
      ZA(gI2,3) - 20*vphi*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*ZA(
      gI2,3) - 14.142135623730951*KroneckerDelta(4,gO2)*TSigmax*ZA(gI1,2)*ZA(gI2,3
      ) - 40*vs*AbsSqr(Sigmax)*KroneckerDelta(2,gO2)*ZA(gI1,3)*ZA(gI2,3) - 40*vphi
      *AbsSqr(Sigmax)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(gI2,3) + vs*
      KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,3)*ZA(gI2,3) - vsb*
      KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,3)*ZA(gI2,3) +
      14.142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(2,gO2)*ZA(gI1,4)*ZA(gI2
      ,3) - 14.142135623730951*Conj(TSigmax)*KroneckerDelta(2,gO2)*ZA(gI1,4)*ZA(
      gI2,3) + 20*vphi*Conj(Sigmax)*KroneckerDelta(2,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2
      ,3) + 20*vs*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,3) +
      14.142135623730951*Conj(MuPhi)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,4)*ZA(
      gI2,3) + 20*vphi*Conj(KappaPr)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2
      ,3) + 20*vs*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,3) -
      14.142135623730951*KroneckerDelta(2,gO2)*TSigmax*ZA(gI1,4)*ZA(gI2,3) - 10*
      vu*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,4) - 10*vu*
      Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2,4) - 10*vd*Conj(
      Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,4) - 10*vd*Conj(
      Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,1)*ZA(gI2,4) +
      14.142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(gI2
      ,4) - 14.142135623730951*Conj(TSigmax)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(
      gI2,4) + 20*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2
      ,4) + 20*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,4)
      + 14.142135623730951*Conj(MuPhi)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,2)*ZA(
      gI2,4) + 20*vphi*Conj(KappaPr)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,2)*ZA(gI2
      ,4) + 20*vsb*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*ZA(gI2,4)
      - 14.142135623730951*KroneckerDelta(3,gO2)*TSigmax*ZA(gI1,2)*ZA(gI2,4) +
      14.142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(2,gO2)*ZA(gI1,3)*ZA(gI2
      ,4) - 14.142135623730951*Conj(TSigmax)*KroneckerDelta(2,gO2)*ZA(gI1,3)*ZA(
      gI2,4) + 20*vphi*Conj(Sigmax)*KroneckerDelta(2,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2
      ,4) + 20*vs*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2,4) +
      14.142135623730951*Conj(MuPhi)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,3)*ZA(
      gI2,4) + 20*vphi*Conj(KappaPr)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2
      ,4) + 20*vs*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,4) -
      14.142135623730951*KroneckerDelta(2,gO2)*TSigmax*ZA(gI1,3)*ZA(gI2,4) - 40*
      vs*AbsSqr(Sigmax)*KroneckerDelta(2,gO2)*ZA(gI1,4)*ZA(gI2,4) - 40*vsb*AbsSqr(
      Sigmax)*KroneckerDelta(3,gO2)*ZA(gI1,4)*ZA(gI2,4) - 80*vphi*AbsSqr(KappaPr)*
      KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(gI2,4) - 28.284271247461902*MuPhi*Conj(
      KappaPr)*KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(gI2,4) + 28.284271247461902*Conj
      (TKappaPr)*KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(gI2,4) - 20*vsb*Conj(Sigmax)*
      KroneckerDelta(2,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,4) - 20*vs*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,4) - 28.284271247461902*Conj(
      MuPhi)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,4) - 20*vsb*Conj(
      KappaPr)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,4) - 20*vs*Conj(
      KappaPr)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,4) +
      28.284271247461902*KroneckerDelta(4,gO2)*TKappaPr*ZA(gI1,4)*ZA(gI2,4) + 2*
      KroneckerDelta(1,gO2)*(-7.0710678118654755*Conj(TLambdax)*ZA(gI1,2)*ZA(gI2,0
      ) - 7.0710678118654755*TLambdax*ZA(gI1,2)*ZA(gI2,0) - 5*vphi*Conj(Sigmax)*
      Lambdax*ZA(gI1,3)*ZA(gI2,0) - 5*vphi*Conj(Lambdax)*Sigmax*ZA(gI1,3)*ZA(gI2,0
      ) - 5*vsb*Conj(Sigmax)*Lambdax*ZA(gI1,4)*ZA(gI2,0) - 5*vsb*Conj(Lambdax)*
      Sigmax*ZA(gI1,4)*ZA(gI2,0) - 3*vu*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1) - 2*vu*Sqr(g1p
      )*ZA(gI1,1)*ZA(gI2,1) - 5*vu*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1) - 20*vu*AbsSqr(
      Lambdax)*ZA(gI1,2)*ZA(gI2,2) + QS*vu*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) - QS*vu*
      Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3) + 5*vd*Conj(Sigmax)*Lambdax*ZA(gI1,4)*ZA(gI2,3)
      + 5*vd*Conj(Lambdax)*Sigmax*ZA(gI1,4)*ZA(gI2,3) + 5*vd*Conj(Sigmax)*Lambdax
      *ZA(gI1,3)*ZA(gI2,4) + 5*vd*Conj(Lambdax)*Sigmax*ZA(gI1,3)*ZA(gI2,4) + ZA(
      gI1,0)*(vu*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*ZA(gI2
      ,0) - 5*(1.4142135623730951*Conj(TLambdax)*ZA(gI2,2) + 1.4142135623730951*
      TLambdax*ZA(gI2,2) + (Conj(Sigmax)*Lambdax + Conj(Lambdax)*Sigmax)*(vphi*ZA(
      gI2,3) + vsb*ZA(gI2,4))))) - KroneckerDelta(0,gO2)*(vd*(6*Sqr(g1) + 9*Sqr(
      g1p) + 10*Sqr(g2))*ZA(gI1,0)*ZA(gI2,0) + 14.142135623730951*Conj(TLambdax)*
      ZA(gI1,2)*ZA(gI2,1) + 14.142135623730951*TLambdax*ZA(gI1,2)*ZA(gI2,1) + 10*
      vphi*Conj(Sigmax)*Lambdax*ZA(gI1,3)*ZA(gI2,1) + 10*vphi*Conj(Lambdax)*Sigmax
      *ZA(gI1,3)*ZA(gI2,1) + 10*vsb*Conj(Sigmax)*Lambdax*ZA(gI1,4)*ZA(gI2,1) + 10*
      vsb*Conj(Lambdax)*Sigmax*ZA(gI1,4)*ZA(gI2,1) + 40*vd*AbsSqr(Lambdax)*ZA(gI1,
      2)*ZA(gI2,2) - 3*QS*vd*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) + 3*QS*vd*Sqr(g1p)*ZA(
      gI1,3)*ZA(gI2,3) - 10*vu*Conj(Sigmax)*Lambdax*ZA(gI1,4)*ZA(gI2,3) - 10*vu*
      Conj(Lambdax)*Sigmax*ZA(gI1,4)*ZA(gI2,3) - 10*vu*Conj(Sigmax)*Lambdax*ZA(gI1
      ,3)*ZA(gI2,4) - 10*vu*Conj(Lambdax)*Sigmax*ZA(gI1,3)*ZA(gI2,4) + 2*ZA(gI1,1)
      *(vd*(20*AbsSqr(Lambdax) - 3*Sqr(g1) + 3*Sqr(g1p) - 5*Sqr(g2))*ZA(gI2,1) + 5
      *(1.4142135623730951*Conj(TLambdax)*ZA(gI2,2) + 1.4142135623730951*TLambdax*
      ZA(gI2,2) + (Conj(Sigmax)*Lambdax + Conj(Lambdax)*Sigmax)*(vphi*ZA(gI2,3) +
      vsb*ZA(gI2,4))))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhhhAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.25)*(vphi*Conj(Sigmax)*Conj(ZH(gI1,3))*
      KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,0) + vsb*Conj(Sigmax)*Conj(ZH(gI1,4))*
      KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,0) + vphi*Conj(Sigmax)*Conj(ZH(gI1,1))*
      KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,0) + vu*Conj(Sigmax)*Conj(ZH(gI1,4))*
      KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,0) + vsb*Conj(Sigmax)*Conj(ZH(gI1,1))*
      KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,0) + vu*Conj(Sigmax)*Conj(ZH(gI1,3))*
      KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,0) - 1.4142135623730951*Conj(ZH(gI1,2))
      *KroneckerDelta(1,gO2)*TLambdax*ZA(gI2,0) - 1.4142135623730951*Conj(ZH(gI1,1
      ))*KroneckerDelta(2,gO2)*TLambdax*ZA(gI2,0) + vphi*Conj(Sigmax)*Conj(ZH(gI1,
      3))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,1) + vsb*Conj(Sigmax)*Conj(ZH(gI1,4
      ))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,1) + vphi*Conj(Sigmax)*Conj(ZH(gI1,0
      ))*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,1) + vd*Conj(Sigmax)*Conj(ZH(gI1,4))
      *KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,1) + vsb*Conj(Sigmax)*Conj(ZH(gI1,0))*
      KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,1) + vd*Conj(Sigmax)*Conj(ZH(gI1,3))*
      KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,1) - 1.4142135623730951*Conj(ZH(gI1,2))
      *KroneckerDelta(0,gO2)*TLambdax*ZA(gI2,1) - 1.4142135623730951*Conj(ZH(gI1,0
      ))*KroneckerDelta(2,gO2)*TLambdax*ZA(gI2,1) + 1.4142135623730951*MuPhi*Conj(
      Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*ZA(gI2,2) + 1.4142135623730951
      *Conj(TSigmax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*ZA(gI2,2) +
      1.4142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*
      ZA(gI2,2) + 1.4142135623730951*Conj(TSigmax)*Conj(ZH(gI1,3))*KroneckerDelta(
      4,gO2)*ZA(gI2,2) + 2*vphi*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)
      *KappaPr*ZA(gI2,2) + 2*vphi*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(4,
      gO2)*KappaPr*ZA(gI2,2) + 2*vsb*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(4
      ,gO2)*KappaPr*ZA(gI2,2) - 1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,4))*
      KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,2) - 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,4)
      )*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,2) - 1.4142135623730951*Conj(MuPhi)*
      Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,2) - 2*vphi*Conj(KappaPr
      )*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,2) - 2*vsb*Conj(
      KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,2) -
      1.4142135623730951*Conj(ZH(gI1,1))*KroneckerDelta(0,gO2)*TLambdax*ZA(gI2,2)
      - 1.4142135623730951*Conj(ZH(gI1,0))*KroneckerDelta(1,gO2)*TLambdax*ZA(gI2,2
      ) - 1.4142135623730951*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*TSigmax*ZA(gI2,
      2) - 1.4142135623730951*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*TSigmax*ZA(gI2
      ,2) + 1.4142135623730951*Conj(TLambdax)*(Conj(ZH(gI1,2))*(KroneckerDelta(1,
      gO2)*ZA(gI2,0) + KroneckerDelta(0,gO2)*ZA(gI2,1)) + Conj(ZH(gI1,1))*(
      KroneckerDelta(2,gO2)*ZA(gI2,0) + KroneckerDelta(0,gO2)*ZA(gI2,2)) + Conj(ZH
      (gI1,0))*(KroneckerDelta(2,gO2)*ZA(gI2,1) + KroneckerDelta(1,gO2)*ZA(gI2,2))
      ) + 1.4142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(2,
      gO2)*ZA(gI2,3) + 1.4142135623730951*Conj(TSigmax)*Conj(ZH(gI1,4))*
      KroneckerDelta(2,gO2)*ZA(gI2,3) + 1.4142135623730951*MuPhi*Conj(Sigmax)*Conj
      (ZH(gI1,2))*KroneckerDelta(4,gO2)*ZA(gI2,3) + 1.4142135623730951*Conj(
      TSigmax)*Conj(ZH(gI1,2))*KroneckerDelta(4,gO2)*ZA(gI2,3) + 2*vphi*Conj(
      Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*KappaPr*ZA(gI2,3) + 2*vphi*
      Conj(Sigmax)*Conj(ZH(gI1,2))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,3) + 2*vs*
      Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,3) - vphi*
      Conj(Sigmax)*Conj(ZH(gI1,1))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,3) - vu*
      Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,3) - vphi*
      Conj(Sigmax)*Conj(ZH(gI1,0))*KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,3) - vd*
      Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,3) - vu*
      Conj(Sigmax)*Conj(ZH(gI1,0))*KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,3) - vd*
      Conj(Sigmax)*Conj(ZH(gI1,1))*KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,3) -
      1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*Sigmax*
      ZA(gI2,3) - 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*
      Sigmax*ZA(gI2,3) - 1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,2))*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) - 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,2)
      )*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) - 2*vs*Conj(KappaPr)*Conj(ZH(gI1,4)
      )*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) - 1.4142135623730951*Conj(ZH(gI1,4)
      )*KroneckerDelta(2,gO2)*TSigmax*ZA(gI2,3) - 1.4142135623730951*Conj(ZH(gI1,2
      ))*KroneckerDelta(4,gO2)*TSigmax*ZA(gI2,3) - 1.4142135623730951*MuPhi*Conj(
      Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*ZA(gI2,4) + 1.4142135623730951
      *Conj(TSigmax)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*ZA(gI2,4) -
      1.4142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,2))*KroneckerDelta(3,gO2)*
      ZA(gI2,4) + 1.4142135623730951*Conj(TSigmax)*Conj(ZH(gI1,2))*KroneckerDelta(
      3,gO2)*ZA(gI2,4) - 2.8284271247461903*MuPhi*Conj(KappaPr)*Conj(ZH(gI1,4))*
      KroneckerDelta(4,gO2)*ZA(gI2,4) - 2.8284271247461903*Conj(TKappaPr)*Conj(ZH(
      gI1,4))*KroneckerDelta(4,gO2)*ZA(gI2,4) - 2*vphi*Conj(Sigmax)*Conj(ZH(gI1,3)
      )*KroneckerDelta(2,gO2)*KappaPr*ZA(gI2,4) - 2*vsb*Conj(Sigmax)*Conj(ZH(gI1,4
      ))*KroneckerDelta(2,gO2)*KappaPr*ZA(gI2,4) - 2*vphi*Conj(Sigmax)*Conj(ZH(gI1
      ,2))*KroneckerDelta(3,gO2)*KappaPr*ZA(gI2,4) - 2*vs*Conj(Sigmax)*Conj(ZH(gI1
      ,4))*KroneckerDelta(3,gO2)*KappaPr*ZA(gI2,4) - 2*vsb*Conj(Sigmax)*Conj(ZH(
      gI1,2))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,4) - 2*vs*Conj(Sigmax)*Conj(ZH(
      gI1,3))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,4) + 2.8284271247461903*Conj(
      MuPhi)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,4) - vsb*Conj(
      Sigmax)*Conj(ZH(gI1,1))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,4) - vu*Conj(
      Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,4) - vsb*Conj(
      Sigmax)*Conj(ZH(gI1,0))*KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,4) - vd*Conj(
      Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,4) - vu*Conj(
      Sigmax)*Conj(ZH(gI1,0))*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,4) - vd*Conj(
      Sigmax)*Conj(ZH(gI1,1))*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,4) +
      1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*Sigmax*
      ZA(gI2,4) + 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*
      Sigmax*ZA(gI2,4) + 2*vsb*Conj(KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)
      *Sigmax*ZA(gI2,4) + 1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,2))*
      KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) + 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,2)
      )*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) + 2*vs*Conj(KappaPr)*Conj(ZH(gI1,4)
      )*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) + 2*vsb*Conj(KappaPr)*Conj(ZH(gI1,2
      ))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,4) + 2*vs*Conj(KappaPr)*Conj(ZH(gI1,3
      ))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,4) + 2.8284271247461903*Conj(ZH(gI1,4
      ))*KroneckerDelta(4,gO2)*TKappaPr*ZA(gI2,4) - 1.4142135623730951*Conj(ZH(gI1
      ,3))*KroneckerDelta(2,gO2)*TSigmax*ZA(gI2,4) - 1.4142135623730951*Conj(ZH(
      gI1,2))*KroneckerDelta(3,gO2)*TSigmax*ZA(gI2,4) + Conj(Lambdax)*Sigmax*(-(
      vphi*Conj(ZH(gI1,1))*KroneckerDelta(3,gO2)*ZA(gI2,0)) - vsb*Conj(ZH(gI1,1))*
      KroneckerDelta(4,gO2)*ZA(gI2,0) - vphi*Conj(ZH(gI1,0))*KroneckerDelta(3,gO2)
      *ZA(gI2,1) - vsb*Conj(ZH(gI1,0))*KroneckerDelta(4,gO2)*ZA(gI2,1) + vphi*Conj
      (ZH(gI1,1))*KroneckerDelta(0,gO2)*ZA(gI2,3) + vphi*Conj(ZH(gI1,0))*
      KroneckerDelta(1,gO2)*ZA(gI2,3) + vu*Conj(ZH(gI1,0))*KroneckerDelta(4,gO2)*
      ZA(gI2,3) + vd*Conj(ZH(gI1,1))*KroneckerDelta(4,gO2)*ZA(gI2,3) - Conj(ZH(gI1
      ,4))*(KroneckerDelta(3,gO2)*(vu*ZA(gI2,0) + vd*ZA(gI2,1)) + KroneckerDelta(1
      ,gO2)*(vsb*ZA(gI2,0) - vd*ZA(gI2,3)) + KroneckerDelta(0,gO2)*(vsb*ZA(gI2,1)
      - vu*ZA(gI2,3))) + vsb*Conj(ZH(gI1,1))*KroneckerDelta(0,gO2)*ZA(gI2,4) + vsb
      *Conj(ZH(gI1,0))*KroneckerDelta(1,gO2)*ZA(gI2,4) + vu*Conj(ZH(gI1,0))*
      KroneckerDelta(3,gO2)*ZA(gI2,4) + vd*Conj(ZH(gI1,1))*KroneckerDelta(3,gO2)*
      ZA(gI2,4) - Conj(ZH(gI1,3))*(KroneckerDelta(4,gO2)*(vu*ZA(gI2,0) + vd*ZA(gI2
      ,1)) + KroneckerDelta(1,gO2)*(vphi*ZA(gI2,0) - vd*ZA(gI2,4)) +
      KroneckerDelta(0,gO2)*(vphi*ZA(gI2,1) - vu*ZA(gI2,4)))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhhhhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-40*vs*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*
      KroneckerDelta(0,gO2) + 14.142135623730951*Conj(TLambdax)*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,1))*KroneckerDelta(0,gO2) - 40*vd*AbsSqr(Lambdax)*Conj(ZH(gI1,2)
      )*Conj(ZH(gI2,2))*KroneckerDelta(0,gO2) + 14.142135623730951*Conj(TLambdax)*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2) - 40*vs*AbsSqr(Lambdax
      )*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*KroneckerDelta(1,gO2) - 40*vu*AbsSqr(
      Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO2) - 40*vd*
      AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*KroneckerDelta(2,gO2) - 40*
      vu*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*KroneckerDelta(2,gO2) -
      40*vsb*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)
      - 40*vphi*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(2,
      gO2) - 40*vsb*AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(
      2,gO2) - 40*vs*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta
      (2,gO2) + 14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      3))*KroneckerDelta(2,gO2) + 14.142135623730951*Conj(TSigmax)*Conj(ZH(gI1,4))
      *Conj(ZH(gI2,3))*KroneckerDelta(2,gO2) - 40*vphi*AbsSqr(Sigmax)*Conj(ZH(gI1,
      2))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2) + 14.142135623730951*MuPhi*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2) +
      14.142135623730951*Conj(TSigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(2,gO2) - 40*vs*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))
      *KroneckerDelta(2,gO2) - 40*vsb*AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2
      ))*KroneckerDelta(3,gO2) - 40*vs*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      2))*KroneckerDelta(3,gO2) + 14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(
      gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2) + 14.142135623730951*Conj(
      TSigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2) - 40*vs*
      AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(3,gO2) - 40*
      vphi*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(3,gO2) +
      14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*
      KroneckerDelta(3,gO2) + 14.142135623730951*Conj(TSigmax)*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) - 40*vphi*AbsSqr(Sigmax)*Conj(ZH(gI1,3
      ))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) - 40*vsb*AbsSqr(Sigmax)*Conj(ZH(gI1
      ,4))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) - 40*vphi*AbsSqr(Sigmax)*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2) + 14.142135623730951*MuPhi*
      Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2) +
      14.142135623730951*Conj(TSigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*
      KroneckerDelta(4,gO2) - 40*vs*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))
      *KroneckerDelta(4,gO2) + 14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,2
      ))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) + 14.142135623730951*Conj(TSigmax)*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) - 40*vphi*AbsSqr(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) - 40*vsb*
      AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) - 40*vs
      *AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2) - 40*
      vsb*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2) -
      240*vphi*AbsSqr(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(4,
      gO2) - 84.8528137423857*MuPhi*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*
      KroneckerDelta(4,gO2) - 28.284271247461902*Conj(TKappaPr)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,4))*KroneckerDelta(4,gO2) + 20*vphi*Conj(Sigmax)*Conj(ZH(gI1,4))
      *Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*KappaPr + 20*vphi*Conj(Sigmax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KappaPr + 20*vsb*Conj(
      Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KappaPr + 20*
      vphi*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*
      KappaPr + 20*vphi*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*
      KroneckerDelta(3,gO2)*KappaPr + 20*vs*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(
      gI2,4))*KroneckerDelta(3,gO2)*KappaPr + 20*vphi*Conj(Sigmax)*Conj(ZH(gI1,3))
      *Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*KappaPr + 20*vsb*Conj(Sigmax)*Conj(ZH
      (gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*KappaPr + 20*vphi*Conj(Sigmax
      )*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*KappaPr + 20*vs*Conj
      (Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*KappaPr + 20*
      vsb*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*
      KappaPr + 20*vs*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(
      4,gO2)*KappaPr - 84.8528137423857*Conj(MuPhi)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4)
      )*KroneckerDelta(4,gO2)*KappaPr - 10*vphi*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(
      ZH(gI2,1))*KroneckerDelta(0,gO2)*Lambdax - 10*vsb*Conj(Sigmax)*Conj(ZH(gI1,4
      ))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*Lambdax - 10*vu*Conj(Sigmax)*Conj(
      ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*Lambdax - 10*vu*Conj(Sigmax
      )*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*Lambdax - 10*vphi*
      Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*Lambdax -
      10*vsb*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*
      Lambdax - 10*vd*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(
      1,gO2)*Lambdax - 10*vd*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(1,gO2)*Lambdax - 10*vu*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(
      gI2,0))*KroneckerDelta(3,gO2)*Lambdax - 10*vd*Conj(Sigmax)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,1))*KroneckerDelta(3,gO2)*Lambdax - 10*vu*Conj(Sigmax)*Conj(ZH(
      gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(4,gO2)*Lambdax - 10*vd*Conj(Sigmax)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(4,gO2)*Lambdax - 10*vphi*Conj
      (Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*Sigmax - 10*
      vsb*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*
      Sigmax - 10*vu*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(
      0,gO2)*Sigmax - 10*vu*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(0,gO2)*Sigmax - 10*vphi*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,0))*KroneckerDelta(1,gO2)*Sigmax - 10*vsb*Conj(Lambdax)*Conj(ZH(gI1,4))
      *Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*Sigmax - 10*vd*Conj(Lambdax)*Conj(ZH(
      gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*Sigmax - 10*vd*Conj(Lambdax)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(1,gO2)*Sigmax +
      14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(2,gO2)*Sigmax + 20*vphi*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,3))*KroneckerDelta(2,gO2)*Sigmax + 14.142135623730951*Conj(MuPhi)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*Sigmax + 20*vphi*Conj(
      KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*Sigmax + 20*
      vsb*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*
      Sigmax - 10*vu*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,0))*KroneckerDelta(
      3,gO2)*Sigmax - 10*vd*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*
      KroneckerDelta(3,gO2)*Sigmax + 14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,4)
      )*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*Sigmax + 20*vphi*Conj(KappaPr)*Conj(
      ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*Sigmax + 14.142135623730951
      *Conj(MuPhi)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Sigmax +
      20*vphi*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*
      Sigmax + 20*vs*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(
      3,gO2)*Sigmax - 10*vu*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*
      KroneckerDelta(4,gO2)*Sigmax - 10*vd*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(
      gI2,1))*KroneckerDelta(4,gO2)*Sigmax + 14.142135623730951*Conj(MuPhi)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*Sigmax + 20*vphi*Conj(
      KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*Sigmax + 20*
      vsb*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*
      Sigmax + 14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*
      KroneckerDelta(4,gO2)*Sigmax + 20*vphi*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH
      (gI2,3))*KroneckerDelta(4,gO2)*Sigmax + 20*vs*Conj(KappaPr)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*Sigmax + 20*vsb*Conj(KappaPr)*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*Sigmax + 20*vs*Conj(KappaPr)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*Sigmax + 3*QS*vs*Conj(
      ZH(gI1,2))*Conj(ZH(gI2,0))*KroneckerDelta(0,gO2)*Sqr(g1p) - 3*QS*vsb*Conj(ZH
      (gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(0,gO2)*Sqr(g1p) + 3*QS*vd*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(0,gO2)*Sqr(g1p) - 3*QS*vd*Conj(ZH(gI1
      ,3))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*Sqr(g1p) + 2*QS*vs*Conj(ZH(gI1,2)
      )*Conj(ZH(gI2,1))*KroneckerDelta(1,gO2)*Sqr(g1p) - 2*QS*vsb*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,1))*KroneckerDelta(1,gO2)*Sqr(g1p) + 2*QS*vu*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,2))*KroneckerDelta(1,gO2)*Sqr(g1p) - 2*QS*vu*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*Sqr(g1p) + 3*QS*vd*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,0))*KroneckerDelta(2,gO2)*Sqr(g1p) + 2*QS*vu*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,1))*KroneckerDelta(2,gO2)*Sqr(g1p) - 3*QS*vd*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,0))*KroneckerDelta(3,gO2)*Sqr(g1p) - 2*QS*vu*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,1))*KroneckerDelta(3,gO2)*Sqr(g1p) - 3*vs*Conj(ZH(gI1,2))*Conj(
      ZH(gI2,2))*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS) + vsb*Conj(ZH(gI1,3))*Conj
      (ZH(gI2,2))*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS) + vsb*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS) + vs*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS) + vsb*Conj(ZH(gI1,2))
      *Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) + vs*Conj(ZH(gI1,3))
      *Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) + vs*Conj(ZH(gI1,2))
      *Conj(ZH(gI2,3))*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) - 3*vsb*Conj(ZH(gI1,
      3))*Conj(ZH(gI2,3))*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) -
      28.284271247461902*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*
      TKappaPr + 14.142135623730951*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*KroneckerDelta
      (0,gO2)*TLambdax + 14.142135623730951*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*
      KroneckerDelta(1,gO2)*TLambdax + 2*Conj(ZH(gI1,1))*(7.0710678118654755*Conj(
      TLambdax)*Conj(ZH(gI2,2))*KroneckerDelta(0,gO2) - 20*vs*AbsSqr(Lambdax)*Conj
      (ZH(gI2,2))*KroneckerDelta(1,gO2) - 20*vu*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*
      KroneckerDelta(2,gO2) - 5*vphi*Conj(Sigmax)*Conj(ZH(gI2,3))*KroneckerDelta(0
      ,gO2)*Lambdax - 5*vsb*Conj(Sigmax)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*
      Lambdax - 5*vd*Conj(Sigmax)*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Lambdax -
      5*vd*Conj(Sigmax)*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*Lambdax - 5*vphi*
      Conj(Lambdax)*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*Sigmax - 5*vsb*Conj(
      Lambdax)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*Sigmax - 5*vd*Conj(Lambdax)*
      Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Sigmax - 5*vd*Conj(Lambdax)*Conj(ZH(
      gI2,3))*KroneckerDelta(4,gO2)*Sigmax + QS*vs*Conj(ZH(gI2,2))*KroneckerDelta(
      1,gO2)*Sqr(g1p) - QS*vsb*Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*Sqr(g1p) + QS
      *vu*Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)*Sqr(g1p) - QS*vu*Conj(ZH(gI2,3))*
      KroneckerDelta(3,gO2)*Sqr(g1p) + Conj(ZH(gI2,1))*(-20*vs*AbsSqr(Lambdax)*
      KroneckerDelta(2,gO2) + QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p) - QS*vsb*
      KroneckerDelta(3,gO2)*Sqr(g1p) + vd*KroneckerDelta(0,gO2)*(-20*AbsSqr(
      Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) - 3*vu*KroneckerDelta(1,gO2)*
      (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))) + 7.0710678118654755*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO2)*TLambdax + Conj(ZH(gI2,0))*(vu*KroneckerDelta(0,gO2)*(
      -20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) + vd*
      KroneckerDelta(1,gO2)*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(
      g2)) + 5*(1.4142135623730951*Conj(TLambdax)*KroneckerDelta(2,gO2) - vphi*
      Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax - vsb*Conj(Sigmax)*KroneckerDelta
      (4,gO2)*Lambdax - Conj(Lambdax)*(vphi*KroneckerDelta(3,gO2) + vsb*
      KroneckerDelta(4,gO2))*Sigmax + 1.4142135623730951*KroneckerDelta(2,gO2)*
      TLambdax))) - Conj(ZH(gI1,0))*(40*vs*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO2) - 14.142135623730951*Conj(TLambdax)*Conj(ZH(gI2,2))*
      KroneckerDelta(1,gO2) + 40*vd*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*KroneckerDelta
      (2,gO2) + 10*vphi*Conj(Sigmax)*Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*Lambdax
      + 10*vsb*Conj(Sigmax)*Conj(ZH(gI2,4))*KroneckerDelta(1,gO2)*Lambdax + 10*vu
      *Conj(Sigmax)*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Lambdax + 10*vu*Conj(
      Sigmax)*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*Lambdax + 10*vphi*Conj(Lambdax
      )*Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*Sigmax + 10*vsb*Conj(Lambdax)*Conj(
      ZH(gI2,4))*KroneckerDelta(1,gO2)*Sigmax + 10*vu*Conj(Lambdax)*Conj(ZH(gI2,4)
      )*KroneckerDelta(3,gO2)*Sigmax + 10*vu*Conj(Lambdax)*Conj(ZH(gI2,3))*
      KroneckerDelta(4,gO2)*Sigmax - 3*QS*vs*Conj(ZH(gI2,2))*KroneckerDelta(0,gO2)
      *Sqr(g1p) + 3*QS*vsb*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*Sqr(g1p) - 3*QS*
      vd*Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)*Sqr(g1p) + 3*QS*vd*Conj(ZH(gI2,3))*
      KroneckerDelta(3,gO2)*Sqr(g1p) + Conj(ZH(gI2,0))*(40*vs*AbsSqr(Lambdax)*
      KroneckerDelta(2,gO2) - 3*QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p) + 3*QS*vsb*
      KroneckerDelta(3,gO2)*Sqr(g1p) + 2*vu*KroneckerDelta(1,gO2)*(20*AbsSqr(
      Lambdax) - 3*Sqr(g1) + 3*Sqr(g1p) - 5*Sqr(g2)) + 3*vd*KroneckerDelta(0,gO2)*
      (6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2))) - 14.142135623730951*Conj(ZH(gI2,2))*
      KroneckerDelta(1,gO2)*TLambdax - 2*Conj(ZH(gI2,1))*(vu*KroneckerDelta(0,gO2)
      *(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) + vd*
      KroneckerDelta(1,gO2)*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(
      g2)) + 5*(1.4142135623730951*Conj(TLambdax)*KroneckerDelta(2,gO2) - vphi*
      Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax - vsb*Conj(Sigmax)*KroneckerDelta
      (4,gO2)*Lambdax - Conj(Lambdax)*(vphi*KroneckerDelta(3,gO2) + vsb*
      KroneckerDelta(4,gO2))*Sigmax + 1.4142135623730951*KroneckerDelta(2,gO2)*
      TLambdax))) + 14.142135623730951*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(2,gO2)*TSigmax + 14.142135623730951*Conj(ZH(gI1,3))*Conj(ZH(
      gI2,4))*KroneckerDelta(2,gO2)*TSigmax + 14.142135623730951*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*TSigmax + 14.142135623730951*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*TSigmax + 14.142135623730951*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*TSigmax +
      14.142135623730951*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*
      TSigmax);

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1565;
   std::complex<double> tmp_1566;
   std::complex<double> tmp_1567;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1567 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1566 += tmp_1567;
   tmp_1565 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_1566;
   std::complex<double> tmp_1568;
   std::complex<double> tmp_1569;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1569 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1568 += tmp_1569;
   tmp_1565 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_1568;
   std::complex<double> tmp_1570;
   std::complex<double> tmp_1571;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1571 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1570 += tmp_1571;
   tmp_1565 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_1570;
   std::complex<double> tmp_1572;
   std::complex<double> tmp_1573;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1573 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1572 += tmp_1573;
   tmp_1565 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_1572;
   std::complex<double> tmp_1574;
   std::complex<double> tmp_1575;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1575 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1574 += tmp_1575;
   tmp_1565 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_1574;
   std::complex<double> tmp_1576;
   std::complex<double> tmp_1577;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1577 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1576 += tmp_1577;
   tmp_1565 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_1576;
   std::complex<double> tmp_1578;
   std::complex<double> tmp_1579;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1579 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1578 += tmp_1579;
   tmp_1565 += (std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_1578;
   std::complex<double> tmp_1580;
   std::complex<double> tmp_1581;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1581 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1580 += tmp_1581;
   tmp_1565 += (std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_1580;
   std::complex<double> tmp_1582;
   std::complex<double> tmp_1583;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1583 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_1582 += tmp_1583;
   tmp_1565 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_1582;
   std::complex<double> tmp_1584;
   std::complex<double> tmp_1585;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1585 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_1584 += tmp_1585;
   tmp_1565 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_1584;
   std::complex<double> tmp_1586;
   std::complex<double> tmp_1587;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1587 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1586 += tmp_1587;
   tmp_1565 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_1586;
   std::complex<double> tmp_1588;
   std::complex<double> tmp_1589;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1589 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1588 += tmp_1589;
   tmp_1565 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_1588;
   std::complex<double> tmp_1590;
   std::complex<double> tmp_1591;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1591 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1590 += tmp_1591;
   tmp_1565 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_1590;
   std::complex<double> tmp_1592;
   std::complex<double> tmp_1593;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1593 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1592 += tmp_1593;
   tmp_1565 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_1592;
   std::complex<double> tmp_1594;
   std::complex<double> tmp_1595;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1595 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1594 += tmp_1595;
   tmp_1565 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_1594;
   std::complex<double> tmp_1596;
   std::complex<double> tmp_1597;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1597 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1596 += tmp_1597;
   tmp_1565 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_1596;
   std::complex<double> tmp_1598;
   std::complex<double> tmp_1599;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1599 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_1598 += tmp_1599;
   tmp_1565 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2)
      *KroneckerDelta(2,gO1)) * tmp_1598;
   std::complex<double> tmp_1600;
   std::complex<double> tmp_1601;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1601 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_1600 += tmp_1601;
   tmp_1565 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1)
      *KroneckerDelta(2,gO2)) * tmp_1600;
   std::complex<double> tmp_1602;
   std::complex<double> tmp_1603;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1603 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_1602 += tmp_1603;
   tmp_1565 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_1602;
   std::complex<double> tmp_1604;
   std::complex<double> tmp_1605;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1605 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_1604 += tmp_1605;
   tmp_1565 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_1604;
   result += (std::complex<double>(0,-1)) * tmp_1565;

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1606;
   std::complex<double> tmp_1607;
   std::complex<double> tmp_1608;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1608 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1607 += tmp_1608;
   tmp_1606 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_1607;
   std::complex<double> tmp_1609;
   std::complex<double> tmp_1610;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1610 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1609 += tmp_1610;
   tmp_1606 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_1609;
   std::complex<double> tmp_1611;
   std::complex<double> tmp_1612;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1612 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1611 += tmp_1612;
   tmp_1606 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_1611;
   std::complex<double> tmp_1613;
   std::complex<double> tmp_1614;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1614 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1613 += tmp_1614;
   tmp_1606 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_1613;
   std::complex<double> tmp_1615;
   std::complex<double> tmp_1616;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1616 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1615 += tmp_1616;
   tmp_1606 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_1615;
   std::complex<double> tmp_1617;
   std::complex<double> tmp_1618;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1618 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1617 += tmp_1618;
   tmp_1606 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_1617;
   std::complex<double> tmp_1619;
   std::complex<double> tmp_1620;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1620 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_1619 += tmp_1620;
   tmp_1606 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_1619;
   std::complex<double> tmp_1621;
   std::complex<double> tmp_1622;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1622 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_1621 += tmp_1622;
   tmp_1606 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_1621;
   std::complex<double> tmp_1623;
   std::complex<double> tmp_1624;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1624 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_1623 += tmp_1624;
   tmp_1606 += (std::complex<double>(0,0.5)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax) * tmp_1623;
   std::complex<double> tmp_1625;
   std::complex<double> tmp_1626;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1626 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_1625 += tmp_1626;
   tmp_1606 += (std::complex<double>(0,0.5)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax) * tmp_1625;
   std::complex<double> tmp_1627;
   std::complex<double> tmp_1628;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1628 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1627 += tmp_1628;
   tmp_1606 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_1627;
   std::complex<double> tmp_1629;
   std::complex<double> tmp_1630;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1630 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1629 += tmp_1630;
   tmp_1606 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_1629;
   std::complex<double> tmp_1631;
   std::complex<double> tmp_1632;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1632 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1631 += tmp_1632;
   tmp_1606 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_1631;
   std::complex<double> tmp_1633;
   std::complex<double> tmp_1634;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1634 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1633 += tmp_1634;
   tmp_1606 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_1633;
   std::complex<double> tmp_1635;
   std::complex<double> tmp_1636;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1636 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1635 += tmp_1636;
   tmp_1606 += (std::complex<double>(0,0.075)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_1635;
   std::complex<double> tmp_1637;
   std::complex<double> tmp_1638;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1638 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1637 += tmp_1638;
   tmp_1606 += (std::complex<double>(0,-0.075)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_1637;
   std::complex<double> tmp_1639;
   std::complex<double> tmp_1640;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1640 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_1639 += tmp_1640;
   tmp_1606 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2)
      *KroneckerDelta(1,gO1)) * tmp_1639;
   std::complex<double> tmp_1641;
   std::complex<double> tmp_1642;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1642 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_1641 += tmp_1642;
   tmp_1606 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1)
      *KroneckerDelta(1,gO2)) * tmp_1641;
   std::complex<double> tmp_1643;
   std::complex<double> tmp_1644;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1644 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_1643 += tmp_1644;
   tmp_1606 += (std::complex<double>(0,0.5)*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)) * tmp_1643;
   std::complex<double> tmp_1645;
   std::complex<double> tmp_1646;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1646 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_1645 += tmp_1646;
   tmp_1606 += (std::complex<double>(0,0.5)*Conj(Sigmax)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)) * tmp_1645;
   std::complex<double> tmp_1647;
   std::complex<double> tmp_1648;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1648 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_1647 += tmp_1648;
   tmp_1606 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_1647;
   std::complex<double> tmp_1649;
   std::complex<double> tmp_1650;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1650 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2)
         ;
   }
   tmp_1649 += tmp_1650;
   tmp_1606 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_1649;
   result += (std::complex<double>(0,-1)) * tmp_1606;

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1651;
   std::complex<double> tmp_1652;
   std::complex<double> tmp_1653;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1653 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1652 += tmp_1653;
   tmp_1651 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_1652;
   std::complex<double> tmp_1654;
   std::complex<double> tmp_1655;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1655 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1654 += tmp_1655;
   tmp_1651 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_1654;
   std::complex<double> tmp_1656;
   std::complex<double> tmp_1657;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1657 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1656 += tmp_1657;
   tmp_1651 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_1656;
   std::complex<double> tmp_1658;
   std::complex<double> tmp_1659;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1659 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1658 += tmp_1659;
   tmp_1651 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_1658;
   std::complex<double> tmp_1660;
   std::complex<double> tmp_1661;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1661 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1660 += tmp_1661;
   tmp_1651 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_1660;
   std::complex<double> tmp_1662;
   std::complex<double> tmp_1663;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1663 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1662 += tmp_1663;
   tmp_1651 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_1662;
   std::complex<double> tmp_1664;
   std::complex<double> tmp_1665;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1665 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1664 += tmp_1665;
   tmp_1651 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_1664;
   std::complex<double> tmp_1666;
   std::complex<double> tmp_1667;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1667 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1666 += tmp_1667;
   tmp_1651 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_1666;
   std::complex<double> tmp_1668;
   std::complex<double> tmp_1669;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1669 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_1668 += tmp_1669;
   tmp_1651 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_1668;
   std::complex<double> tmp_1670;
   std::complex<double> tmp_1671;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1671 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_1670 += tmp_1671;
   tmp_1651 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_1670;
   std::complex<double> tmp_1672;
   std::complex<double> tmp_1673;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1673 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1672 += tmp_1673;
   tmp_1651 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_1672;
   std::complex<double> tmp_1674;
   std::complex<double> tmp_1675;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1675 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1674 += tmp_1675;
   tmp_1651 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_1674;
   std::complex<double> tmp_1676;
   std::complex<double> tmp_1677;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1677 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1676 += tmp_1677;
   tmp_1651 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_1676;
   std::complex<double> tmp_1678;
   std::complex<double> tmp_1679;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1679 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1678 += tmp_1679;
   tmp_1651 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_1678;
   std::complex<double> tmp_1680;
   std::complex<double> tmp_1681;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1681 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1680 += tmp_1681;
   tmp_1651 += (std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_1680;
   std::complex<double> tmp_1682;
   std::complex<double> tmp_1683;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1683 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1682 += tmp_1683;
   tmp_1651 += (std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_1682;
   std::complex<double> tmp_1684;
   std::complex<double> tmp_1685;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1685 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_1684 += tmp_1685;
   tmp_1651 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2)
      *KroneckerDelta(2,gO1)) * tmp_1684;
   std::complex<double> tmp_1686;
   std::complex<double> tmp_1687;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1687 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_1686 += tmp_1687;
   tmp_1651 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1)
      *KroneckerDelta(2,gO2)) * tmp_1686;
   std::complex<double> tmp_1688;
   std::complex<double> tmp_1689;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1689 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_1688 += tmp_1689;
   tmp_1651 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_1688;
   std::complex<double> tmp_1690;
   std::complex<double> tmp_1691;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1691 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_1690 += tmp_1691;
   tmp_1651 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_1690;
   result += (std::complex<double>(0,-1)) * tmp_1651;

   return result;
}

std::complex<double> CLASSNAME::CpUhhUhhconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1692;
   tmp_1692 += std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1p);
   tmp_1692 += std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1p);
   std::complex<double> tmp_1693;
   std::complex<double> tmp_1694;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1694 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1693 += tmp_1694;
   tmp_1692 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_1693;
   std::complex<double> tmp_1695;
   std::complex<double> tmp_1696;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1696 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1695 += tmp_1696;
   tmp_1692 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_1695;
   std::complex<double> tmp_1697;
   std::complex<double> tmp_1698;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1698 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1697 += tmp_1698;
   tmp_1692 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_1697;
   std::complex<double> tmp_1699;
   std::complex<double> tmp_1700;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1700 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1699 += tmp_1700;
   tmp_1692 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_1699;
   std::complex<double> tmp_1701;
   std::complex<double> tmp_1702;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1702 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1701 += tmp_1702;
   tmp_1692 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_1701;
   std::complex<double> tmp_1703;
   std::complex<double> tmp_1704;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1704 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1703 += tmp_1704;
   tmp_1692 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_1703;
   std::complex<double> tmp_1705;
   std::complex<double> tmp_1706;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1706 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_1705 += tmp_1706;
   tmp_1692 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_1705;
   std::complex<double> tmp_1707;
   std::complex<double> tmp_1708;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1708 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_1707 += tmp_1708;
   tmp_1692 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_1707;
   std::complex<double> tmp_1709;
   std::complex<double> tmp_1710;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1710 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1709 += tmp_1710;
   tmp_1692 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_1709;
   std::complex<double> tmp_1711;
   std::complex<double> tmp_1712;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1712 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1711 += tmp_1712;
   tmp_1692 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_1711;
   std::complex<double> tmp_1713;
   std::complex<double> tmp_1714;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1714 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1713 += tmp_1714;
   tmp_1692 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_1713;
   std::complex<double> tmp_1715;
   std::complex<double> tmp_1716;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1716 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1715 += tmp_1716;
   tmp_1692 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_1715;
   std::complex<double> tmp_1717;
   std::complex<double> tmp_1718;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1718 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_1717 += tmp_1718;
   tmp_1692 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2)
      *KroneckerDelta(2,gO1)) * tmp_1717;
   std::complex<double> tmp_1719;
   std::complex<double> tmp_1720;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1720 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_1719 += tmp_1720;
   tmp_1692 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1)
      *KroneckerDelta(2,gO2)) * tmp_1719;
   std::complex<double> tmp_1721;
   std::complex<double> tmp_1722;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1722 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_1721 += tmp_1722;
   tmp_1692 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_1721;
   std::complex<double> tmp_1723;
   std::complex<double> tmp_1724;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1724 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_1723 += tmp_1724;
   tmp_1692 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_1723;
   result += (std::complex<double>(0,-1)) * tmp_1692;

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSdSd(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1725;
   std::complex<double> tmp_1726;
   std::complex<double> tmp_1727;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1727 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1726 += tmp_1727;
   tmp_1725 += (std::complex<double>(0,0.05)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_1726;
   std::complex<double> tmp_1728;
   std::complex<double> tmp_1729;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1729 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1728 += tmp_1729;
   tmp_1725 += (std::complex<double>(0,0.075)*vd*KroneckerDelta(0,gO2)*Sqr(g1p)
      ) * tmp_1728;
   std::complex<double> tmp_1730;
   std::complex<double> tmp_1731;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1731 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1730 += tmp_1731;
   tmp_1725 += (std::complex<double>(0,0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_1730;
   std::complex<double> tmp_1732;
   std::complex<double> tmp_1733;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1733 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1732 += tmp_1733;
   tmp_1725 += (std::complex<double>(0,-0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_1732;
   std::complex<double> tmp_1734;
   std::complex<double> tmp_1735;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1735 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1734 += tmp_1735;
   tmp_1725 += (std::complex<double>(0,0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_1734;
   std::complex<double> tmp_1736;
   std::complex<double> tmp_1737;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1737 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1736 += tmp_1737;
   tmp_1725 += (std::complex<double>(0,-0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_1736;
   std::complex<double> tmp_1738;
   std::complex<double> tmp_1739;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1739 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1738 += tmp_1739;
   tmp_1725 += (std::complex<double>(0,-0.025)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_1738;
   std::complex<double> tmp_1740;
   std::complex<double> tmp_1741;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1741 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1740 += tmp_1741;
   tmp_1725 += (std::complex<double>(0,0.025)*QS*vsb*KroneckerDelta(3,gO2)*Sqr(
      g1p)) * tmp_1740;
   std::complex<double> tmp_1742;
   std::complex<double> tmp_1743;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1743 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_1742 += tmp_1743;
   tmp_1725 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(1,gO2)*Lambdax) *
      tmp_1742;
   std::complex<double> tmp_1744;
   std::complex<double> tmp_1745;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1745 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_1744 += tmp_1745;
   tmp_1725 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(2,gO2)*Lambdax) *
      tmp_1744;
   std::complex<double> tmp_1746;
   std::complex<double> tmp_1747;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1747 += Conj(ZD(gI2,3 + j1))*Conj(TYd(j1,j1))*ZD(gI1,j1);
   }
   tmp_1746 += tmp_1747;
   tmp_1725 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_1746;
   std::complex<double> tmp_1748;
   std::complex<double> tmp_1749;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1749 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1748 += tmp_1749;
   tmp_1725 += (std::complex<double>(0,0.1)*vd*KroneckerDelta(0,gO2)*Sqr(g1)) *
      tmp_1748;
   std::complex<double> tmp_1750;
   std::complex<double> tmp_1751;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1751 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1750 += tmp_1751;
   tmp_1725 += (std::complex<double>(0,0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1p))
      * tmp_1750;
   std::complex<double> tmp_1752;
   std::complex<double> tmp_1753;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1753 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1752 += tmp_1753;
   tmp_1725 += (std::complex<double>(0,-0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_1752;
   std::complex<double> tmp_1754;
   std::complex<double> tmp_1755;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1755 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1754 += tmp_1755;
   tmp_1725 += (std::complex<double>(0,0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_1754;
   std::complex<double> tmp_1756;
   std::complex<double> tmp_1757;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1757 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1756 += tmp_1757;
   tmp_1725 += (std::complex<double>(0,-0.05)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_1756;
   std::complex<double> tmp_1758;
   std::complex<double> tmp_1759;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1759 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1758 += tmp_1759;
   tmp_1725 += (std::complex<double>(0,0.05)*QS*vsb*KroneckerDelta(3,gO2)*Sqr(
      g1p)) * tmp_1758;
   std::complex<double> tmp_1760;
   std::complex<double> tmp_1761;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1761 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_1760 += tmp_1761;
   tmp_1725 += (std::complex<double>(0,0.5)*vs*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_1760;
   std::complex<double> tmp_1762;
   std::complex<double> tmp_1763;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1763 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_1762 += tmp_1763;
   tmp_1725 += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*KroneckerDelta(2,
      gO2)) * tmp_1762;
   std::complex<double> tmp_1764;
   std::complex<double> tmp_1765;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1765 += Conj(ZD(gI2,j1))*ZD(gI1,3 + j1)*TYd(j1,j1);
   }
   tmp_1764 += tmp_1765;
   tmp_1725 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_1764;
   std::complex<double> tmp_1766;
   std::complex<double> tmp_1767;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1767 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_1766 += tmp_1767;
   tmp_1725 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_1766
      ;
   std::complex<double> tmp_1768;
   std::complex<double> tmp_1769;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1769 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_1768 += tmp_1769;
   tmp_1725 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_1768
      ;
   result += (std::complex<double>(0,-1)) * tmp_1725;

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSDXSDX(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1770;
   std::complex<double> tmp_1771;
   std::complex<double> tmp_1772;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1772 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1771 += tmp_1772;
   tmp_1770 += (std::complex<double>(0,-0.1)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_1771;
   std::complex<double> tmp_1773;
   std::complex<double> tmp_1774;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1774 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1773 += tmp_1774;
   tmp_1770 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1p)
      ) * tmp_1773;
   std::complex<double> tmp_1775;
   std::complex<double> tmp_1776;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1776 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1775 += tmp_1776;
   tmp_1770 += (std::complex<double>(0,0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1)) *
      tmp_1775;
   std::complex<double> tmp_1777;
   std::complex<double> tmp_1778;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1778 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1777 += tmp_1778;
   tmp_1770 += (std::complex<double>(0,-0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_1777;
   std::complex<double> tmp_1779;
   std::complex<double> tmp_1780;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1780 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1779 += tmp_1780;
   tmp_1770 += (std::complex<double>(0,0.05)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_1779;
   std::complex<double> tmp_1781;
   std::complex<double> tmp_1782;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1782 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1781 += tmp_1782;
   tmp_1770 += (std::complex<double>(0,-0.05)*QS*vsb*KroneckerDelta(3,gO2)*Sqr(
      g1p)) * tmp_1781;
   std::complex<double> tmp_1783;
   std::complex<double> tmp_1784;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1784 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_1783 += tmp_1784;
   tmp_1770 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(0,gO2)*Lambdax) *
      tmp_1783;
   std::complex<double> tmp_1785;
   std::complex<double> tmp_1786;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1786 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_1785 += tmp_1786;
   tmp_1770 += (std::complex<double>(0,0.5)*vd*KroneckerDelta(1,gO2)*Lambdax) *
      tmp_1785;
   std::complex<double> tmp_1787;
   std::complex<double> tmp_1788;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1788 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_1787 += tmp_1788;
   tmp_1770 += (std::complex<double>(0,0.5)*vphi*KroneckerDelta(3,gO2)*Sigmax)
      * tmp_1787;
   std::complex<double> tmp_1789;
   std::complex<double> tmp_1790;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1790 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_1789 += tmp_1790;
   tmp_1770 += (std::complex<double>(0,0.5)*vsb*KroneckerDelta(4,gO2)*Sigmax) *
      tmp_1789;
   std::complex<double> tmp_1791;
   std::complex<double> tmp_1792;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1792 += Conj(ZDX(gI2,3 + j1))*Conj(TKappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_1791 += tmp_1792;
   tmp_1770 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_1791;
   std::complex<double> tmp_1793;
   std::complex<double> tmp_1794;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1794 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1793 += tmp_1794;
   tmp_1770 += (std::complex<double>(0,0.1)*vd*KroneckerDelta(0,gO2)*Sqr(g1)) *
      tmp_1793;
   std::complex<double> tmp_1795;
   std::complex<double> tmp_1796;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1796 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1795 += tmp_1796;
   tmp_1770 += (std::complex<double>(0,-0.225)*vd*KroneckerDelta(0,gO2)*Sqr(g1p
      )) * tmp_1795;
   std::complex<double> tmp_1797;
   std::complex<double> tmp_1798;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1798 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1797 += tmp_1798;
   tmp_1770 += (std::complex<double>(0,-0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_1797;
   std::complex<double> tmp_1799;
   std::complex<double> tmp_1800;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1800 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1799 += tmp_1800;
   tmp_1770 += (std::complex<double>(0,-0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1p)
      ) * tmp_1799;
   std::complex<double> tmp_1801;
   std::complex<double> tmp_1802;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1802 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1801 += tmp_1802;
   tmp_1770 += (std::complex<double>(0,0.075)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_1801;
   std::complex<double> tmp_1803;
   std::complex<double> tmp_1804;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1804 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1803 += tmp_1804;
   tmp_1770 += (std::complex<double>(0,-0.075)*QS*vsb*KroneckerDelta(3,gO2)*Sqr
      (g1p)) * tmp_1803;
   std::complex<double> tmp_1805;
   std::complex<double> tmp_1806;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1806 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_1805 += tmp_1806;
   tmp_1770 += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*KroneckerDelta(0,
      gO2)) * tmp_1805;
   std::complex<double> tmp_1807;
   std::complex<double> tmp_1808;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1808 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_1807 += tmp_1808;
   tmp_1770 += (std::complex<double>(0,0.5)*vd*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_1807;
   std::complex<double> tmp_1809;
   std::complex<double> tmp_1810;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1810 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_1809 += tmp_1810;
   tmp_1770 += (std::complex<double>(0,0.5)*vphi*Conj(Sigmax)*KroneckerDelta(3,
      gO2)) * tmp_1809;
   std::complex<double> tmp_1811;
   std::complex<double> tmp_1812;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1812 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_1811 += tmp_1812;
   tmp_1770 += (std::complex<double>(0,0.5)*vsb*Conj(Sigmax)*KroneckerDelta(4,
      gO2)) * tmp_1811;
   std::complex<double> tmp_1813;
   std::complex<double> tmp_1814;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1814 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*TKappa(j1,j1);
   }
   tmp_1813 += tmp_1814;
   tmp_1770 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_1813;
   std::complex<double> tmp_1815;
   std::complex<double> tmp_1816;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1816 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_1815 += tmp_1816;
   tmp_1770 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_1815
      ;
   std::complex<double> tmp_1817;
   std::complex<double> tmp_1818;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1818 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2)
         ;
   }
   tmp_1817 += tmp_1818;
   tmp_1770 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_1817
      ;
   result += (std::complex<double>(0,-1)) * tmp_1770;

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSeSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1819;
   std::complex<double> tmp_1820;
   std::complex<double> tmp_1821;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1821 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1820 += tmp_1821;
   tmp_1819 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_1820;
   std::complex<double> tmp_1822;
   std::complex<double> tmp_1823;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1823 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1822 += tmp_1823;
   tmp_1819 += (std::complex<double>(0,0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1p))
      * tmp_1822;
   std::complex<double> tmp_1824;
   std::complex<double> tmp_1825;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1825 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1824 += tmp_1825;
   tmp_1819 += (std::complex<double>(0,0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_1824;
   std::complex<double> tmp_1826;
   std::complex<double> tmp_1827;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1827 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1826 += tmp_1827;
   tmp_1819 += (std::complex<double>(0,0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_1826;
   std::complex<double> tmp_1828;
   std::complex<double> tmp_1829;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1829 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1828 += tmp_1829;
   tmp_1819 += (std::complex<double>(0,0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_1828;
   std::complex<double> tmp_1830;
   std::complex<double> tmp_1831;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1831 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1830 += tmp_1831;
   tmp_1819 += (std::complex<double>(0,-0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_1830;
   std::complex<double> tmp_1832;
   std::complex<double> tmp_1833;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1833 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1832 += tmp_1833;
   tmp_1819 += (std::complex<double>(0,-0.05)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_1832;
   std::complex<double> tmp_1834;
   std::complex<double> tmp_1835;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1835 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1834 += tmp_1835;
   tmp_1819 += (std::complex<double>(0,0.05)*QS*vsb*KroneckerDelta(3,gO2)*Sqr(
      g1p)) * tmp_1834;
   std::complex<double> tmp_1836;
   std::complex<double> tmp_1837;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1837 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_1836 += tmp_1837;
   tmp_1819 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(1,gO2)*Lambdax) *
      tmp_1836;
   std::complex<double> tmp_1838;
   std::complex<double> tmp_1839;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1839 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_1838 += tmp_1839;
   tmp_1819 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(2,gO2)*Lambdax) *
      tmp_1838;
   std::complex<double> tmp_1840;
   std::complex<double> tmp_1841;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1841 += Conj(ZE(gI2,3 + j1))*Conj(TYe(j1,j1))*ZE(gI1,j1);
   }
   tmp_1840 += tmp_1841;
   tmp_1819 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_1840;
   std::complex<double> tmp_1842;
   std::complex<double> tmp_1843;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1843 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1842 += tmp_1843;
   tmp_1819 += (std::complex<double>(0,0.3)*vd*KroneckerDelta(0,gO2)*Sqr(g1)) *
      tmp_1842;
   std::complex<double> tmp_1844;
   std::complex<double> tmp_1845;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1845 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1844 += tmp_1845;
   tmp_1819 += (std::complex<double>(0,0.075)*vd*KroneckerDelta(0,gO2)*Sqr(g1p)
      ) * tmp_1844;
   std::complex<double> tmp_1846;
   std::complex<double> tmp_1847;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1847 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1846 += tmp_1847;
   tmp_1819 += (std::complex<double>(0,-0.3)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_1846;
   std::complex<double> tmp_1848;
   std::complex<double> tmp_1849;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1849 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1848 += tmp_1849;
   tmp_1819 += (std::complex<double>(0,0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_1848;
   std::complex<double> tmp_1850;
   std::complex<double> tmp_1851;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1851 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1850 += tmp_1851;
   tmp_1819 += (std::complex<double>(0,-0.025)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_1850;
   std::complex<double> tmp_1852;
   std::complex<double> tmp_1853;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1853 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1852 += tmp_1853;
   tmp_1819 += (std::complex<double>(0,0.025)*QS*vsb*KroneckerDelta(3,gO2)*Sqr(
      g1p)) * tmp_1852;
   std::complex<double> tmp_1854;
   std::complex<double> tmp_1855;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1855 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_1854 += tmp_1855;
   tmp_1819 += (std::complex<double>(0,0.5)*vs*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_1854;
   std::complex<double> tmp_1856;
   std::complex<double> tmp_1857;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1857 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_1856 += tmp_1857;
   tmp_1819 += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*KroneckerDelta(2,
      gO2)) * tmp_1856;
   std::complex<double> tmp_1858;
   std::complex<double> tmp_1859;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1859 += Conj(ZE(gI2,j1))*ZE(gI1,3 + j1)*TYe(j1,j1);
   }
   tmp_1858 += tmp_1859;
   tmp_1819 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_1858;
   std::complex<double> tmp_1860;
   std::complex<double> tmp_1861;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1861 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_1860 += tmp_1861;
   tmp_1819 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_1860
      ;
   std::complex<double> tmp_1862;
   std::complex<double> tmp_1863;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1863 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_1862 += tmp_1863;
   tmp_1819 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_1862
      ;
   result += (std::complex<double>(0,-1)) * tmp_1819;

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjSuSu(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1864;
   tmp_1864 += std::complex<double>(0,0.025)*QS*vsb*KroneckerDelta(3,gO2)*
      KroneckerDelta(gI1,gI2)*Sqr(g1p);
   std::complex<double> tmp_1865;
   std::complex<double> tmp_1866;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1866 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1865 += tmp_1866;
   tmp_1864 += (std::complex<double>(0,0.05)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_1865;
   std::complex<double> tmp_1867;
   std::complex<double> tmp_1868;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1868 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1867 += tmp_1868;
   tmp_1864 += (std::complex<double>(0,0.075)*vd*KroneckerDelta(0,gO2)*Sqr(g1p)
      ) * tmp_1867;
   std::complex<double> tmp_1869;
   std::complex<double> tmp_1870;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1870 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1869 += tmp_1870;
   tmp_1864 += (std::complex<double>(0,-0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_1869;
   std::complex<double> tmp_1871;
   std::complex<double> tmp_1872;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1872 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1871 += tmp_1872;
   tmp_1864 += (std::complex<double>(0,-0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_1871;
   std::complex<double> tmp_1873;
   std::complex<double> tmp_1874;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1874 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1873 += tmp_1874;
   tmp_1864 += (std::complex<double>(0,0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_1873;
   std::complex<double> tmp_1875;
   std::complex<double> tmp_1876;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1876 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1875 += tmp_1876;
   tmp_1864 += (std::complex<double>(0,0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_1875;
   std::complex<double> tmp_1877;
   std::complex<double> tmp_1878;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1878 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1877 += tmp_1878;
   tmp_1864 += (std::complex<double>(0,-0.025)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_1877;
   std::complex<double> tmp_1879;
   std::complex<double> tmp_1880;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1880 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_1879 += tmp_1880;
   tmp_1864 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(0,gO2)*Lambdax) *
      tmp_1879;
   std::complex<double> tmp_1881;
   std::complex<double> tmp_1882;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1882 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_1881 += tmp_1882;
   tmp_1864 += (std::complex<double>(0,0.5)*vd*KroneckerDelta(2,gO2)*Lambdax) *
      tmp_1881;
   std::complex<double> tmp_1883;
   std::complex<double> tmp_1884;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1884 += Conj(ZU(gI2,3 + j1))*Conj(TYu(j1,j1))*ZU(gI1,j1);
   }
   tmp_1883 += tmp_1884;
   tmp_1864 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,
      gO2)) * tmp_1883;
   std::complex<double> tmp_1885;
   std::complex<double> tmp_1886;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1886 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1885 += tmp_1886;
   tmp_1864 += (std::complex<double>(0,-0.2)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_1885;
   std::complex<double> tmp_1887;
   std::complex<double> tmp_1888;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1888 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1887 += tmp_1888;
   tmp_1864 += (std::complex<double>(0,0.075)*vd*KroneckerDelta(0,gO2)*Sqr(g1p)
      ) * tmp_1887;
   std::complex<double> tmp_1889;
   std::complex<double> tmp_1890;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1890 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1889 += tmp_1890;
   tmp_1864 += (std::complex<double>(0,0.2)*vu*KroneckerDelta(1,gO2)*Sqr(g1)) *
      tmp_1889;
   std::complex<double> tmp_1891;
   std::complex<double> tmp_1892;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1892 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1891 += tmp_1892;
   tmp_1864 += (std::complex<double>(0,0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_1891;
   std::complex<double> tmp_1893;
   std::complex<double> tmp_1894;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1894 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1893 += tmp_1894;
   tmp_1864 += (std::complex<double>(0,-0.025)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_1893;
   std::complex<double> tmp_1895;
   std::complex<double> tmp_1896;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1896 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_1895 += tmp_1896;
   tmp_1864 += (std::complex<double>(0,0.5)*vs*Conj(Lambdax)*KroneckerDelta(0,
      gO2)) * tmp_1895;
   std::complex<double> tmp_1897;
   std::complex<double> tmp_1898;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1898 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_1897 += tmp_1898;
   tmp_1864 += (std::complex<double>(0,0.5)*vd*Conj(Lambdax)*KroneckerDelta(2,
      gO2)) * tmp_1897;
   std::complex<double> tmp_1899;
   std::complex<double> tmp_1900;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1900 += Conj(ZU(gI2,j1))*ZU(gI1,3 + j1)*TYu(j1,j1);
   }
   tmp_1899 += tmp_1900;
   tmp_1864 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,
      gO2)) * tmp_1899;
   std::complex<double> tmp_1901;
   std::complex<double> tmp_1902;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1902 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_1901 += tmp_1902;
   tmp_1864 += (std::complex<double>(0,-1)*vu*KroneckerDelta(1,gO2)) * tmp_1901
      ;
   std::complex<double> tmp_1903;
   std::complex<double> tmp_1904;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1904 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_1903 += tmp_1904;
   tmp_1864 += (std::complex<double>(0,-1)*vu*KroneckerDelta(1,gO2)) * tmp_1903
      ;
   result += (std::complex<double>(0,-1)) * tmp_1864;

   return result;
}

std::complex<double> CLASSNAME::CpUhhChiChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*(1.4142135623730951*(10*Conj(Lambdax)*KroneckerDelta(2,gO2)*(
      ZN(gI1,3)*ZN(gI2,2) + ZN(gI1,2)*ZN(gI2,3)) - 2.23606797749979*g1p*QS*
      KroneckerDelta(2,gO2)*ZN(gI1,7)*ZN(gI2,4) + 2.23606797749979*g1p*QS*
      KroneckerDelta(3,gO2)*ZN(gI1,7)*ZN(gI2,5) - 20*Conj(KappaPr)*KroneckerDelta(
      4,gO2)*ZN(gI1,6)*ZN(gI2,6) + 10*Conj(Sigmax)*(KroneckerDelta(4,gO2)*(ZN(gI1,
      5)*ZN(gI2,4) + ZN(gI1,4)*ZN(gI2,5)) + KroneckerDelta(3,gO2)*(ZN(gI1,6)*ZN(
      gI2,4) + ZN(gI1,4)*ZN(gI2,6)) + KroneckerDelta(2,gO2)*(ZN(gI1,6)*ZN(gI2,5) +
      ZN(gI1,5)*ZN(gI2,6))) - 2.23606797749979*g1p*QS*KroneckerDelta(2,gO2)*ZN(
      gI1,4)*ZN(gI2,7) + 2.23606797749979*g1p*QS*KroneckerDelta(3,gO2)*ZN(gI1,5)*
      ZN(gI2,7)) + 2*KroneckerDelta(1,gO2)*((-3.872983346207417*g1*ZN(gI1,0) + 5*
      g2*ZN(gI1,1) + 3.1622776601683795*g1p*ZN(gI1,7))*ZN(gI2,3) +
      7.0710678118654755*Conj(Lambdax)*(ZN(gI1,4)*ZN(gI2,2) + ZN(gI1,2)*ZN(gI2,4))
      + ZN(gI1,3)*(-3.872983346207417*g1*ZN(gI2,0) + 5*g2*ZN(gI2,1) +
      3.1622776601683795*g1p*ZN(gI2,7))) + KroneckerDelta(0,gO2)*(
      7.745966692414834*g1*ZN(gI1,0)*ZN(gI2,2) - 10*g2*ZN(gI1,1)*ZN(gI2,2) +
      9.486832980505138*g1p*ZN(gI1,7)*ZN(gI2,2) + 14.142135623730951*Conj(Lambdax)
      *ZN(gI1,4)*ZN(gI2,3) + 14.142135623730951*Conj(Lambdax)*ZN(gI1,3)*ZN(gI2,4)
      + ZN(gI1,2)*(7.745966692414834*g1*ZN(gI2,0) - 10*g2*ZN(gI2,1) +
      9.486832980505138*g1p*ZN(gI2,7))));

   return result;
}

std::complex<double> CLASSNAME::CpUhhChiChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*(-10*g2*Conj(ZN(gI1,1))*Conj(ZN(gI2,2))*KroneckerDelta(0,gO1)
      + 9.486832980505138*g1p*Conj(ZN(gI1,7))*Conj(ZN(gI2,2))*KroneckerDelta(0,gO1
      ) - 7.745966692414834*g1*Conj(ZN(gI1,3))*Conj(ZN(gI2,0))*KroneckerDelta(1,
      gO1) + 10*g2*Conj(ZN(gI1,3))*Conj(ZN(gI2,1))*KroneckerDelta(1,gO1) + 10*g2*
      Conj(ZN(gI1,1))*Conj(ZN(gI2,3))*KroneckerDelta(1,gO1) + 6.324555320336759*
      g1p*Conj(ZN(gI1,7))*Conj(ZN(gI2,3))*KroneckerDelta(1,gO1) +
      6.324555320336759*g1p*Conj(ZN(gI1,3))*Conj(ZN(gI2,7))*KroneckerDelta(1,gO1)
      + 7.745966692414834*g1*Conj(ZN(gI1,0))*(Conj(ZN(gI2,2))*KroneckerDelta(0,gO1
      ) - Conj(ZN(gI2,3))*KroneckerDelta(1,gO1)) - 3.1622776601683795*g1p*QS*Conj(
      ZN(gI1,7))*Conj(ZN(gI2,4))*KroneckerDelta(2,gO1) - 3.1622776601683795*g1p*QS
      *Conj(ZN(gI1,4))*Conj(ZN(gI2,7))*KroneckerDelta(2,gO1) + 3.1622776601683795*
      g1p*QS*Conj(ZN(gI1,7))*Conj(ZN(gI2,5))*KroneckerDelta(3,gO1) +
      3.1622776601683795*g1p*QS*Conj(ZN(gI1,5))*Conj(ZN(gI2,7))*KroneckerDelta(3,
      gO1) - 28.284271247461902*Conj(ZN(gI1,6))*Conj(ZN(gI2,6))*KroneckerDelta(4,
      gO1)*KappaPr + 14.142135623730951*Conj(ZN(gI1,4))*Conj(ZN(gI2,3))*
      KroneckerDelta(0,gO1)*Lambdax + 14.142135623730951*Conj(ZN(gI1,3))*Conj(ZN(
      gI2,4))*KroneckerDelta(0,gO1)*Lambdax + 14.142135623730951*Conj(ZN(gI1,4))*
      Conj(ZN(gI2,2))*KroneckerDelta(1,gO1)*Lambdax + 14.142135623730951*Conj(ZN(
      gI1,3))*Conj(ZN(gI2,2))*KroneckerDelta(2,gO1)*Lambdax + Conj(ZN(gI1,2))*(
      7.745966692414834*g1*Conj(ZN(gI2,0))*KroneckerDelta(0,gO1) - 10*g2*Conj(ZN(
      gI2,1))*KroneckerDelta(0,gO1) + 1.4142135623730951*(6.708203932499369*g1p*
      Conj(ZN(gI2,7))*KroneckerDelta(0,gO1) + 10*(Conj(ZN(gI2,4))*KroneckerDelta(1
      ,gO1) + Conj(ZN(gI2,3))*KroneckerDelta(2,gO1))*Lambdax)) +
      14.142135623730951*Conj(ZN(gI1,6))*Conj(ZN(gI2,5))*KroneckerDelta(2,gO1)*
      Sigmax + 14.142135623730951*Conj(ZN(gI1,5))*Conj(ZN(gI2,6))*KroneckerDelta(2
      ,gO1)*Sigmax + 14.142135623730951*Conj(ZN(gI1,6))*Conj(ZN(gI2,4))*
      KroneckerDelta(3,gO1)*Sigmax + 14.142135623730951*Conj(ZN(gI1,4))*Conj(ZN(
      gI2,6))*KroneckerDelta(3,gO1)*Sigmax + 14.142135623730951*Conj(ZN(gI1,5))*
      Conj(ZN(gI2,4))*KroneckerDelta(4,gO1)*Sigmax + 14.142135623730951*Conj(ZN(
      gI1,4))*Conj(ZN(gI2,5))*KroneckerDelta(4,gO1)*Sigmax);

   return result;
}

std::complex<double> CLASSNAME::CpUhhconjVWmHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*g2*(Conj(ZP(gI2,0))*KroneckerDelta(0,gO2) - Conj(ZP(gI2,1))*
      KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CLASSNAME::CpUhhVZAh(unsigned gO2, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = std::complex<double>(0,-0.05)*(KroneckerDelta(0,gO2)*(10*g2*Cos(
      ThetaW())*Cos(ThetaWp()) + 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())
      - 9.486832980505138*g1p*Sin(ThetaWp()))*ZA(gI2,0) - 2*KroneckerDelta(1,gO2)
      *(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*
      Sin(ThetaW()) + 3.1622776601683795*g1p*Sin(ThetaWp()))*ZA(gI2,1) +
      3.1622776601683795*g1p*QS*Sin(ThetaWp())*(KroneckerDelta(2,gO2)*ZA(gI2,2) -
      KroneckerDelta(3,gO2)*ZA(gI2,3)));

   return result;
}

std::complex<double> CLASSNAME::CpUhhVZpAh(unsigned gO2, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(KroneckerDelta(0,gO2)*(
      9.486832980505138*g1p*Cos(ThetaWp()) + 2*(5*g2*Cos(ThetaW()) +
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZA(gI2,0) + 2*
      KroneckerDelta(1,gO2)*(3.1622776601683795*g1p*Cos(ThetaWp()) - (5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZA(gI2,1) +
      3.1622776601683795*g1p*QS*Cos(ThetaWp())*(-(KroneckerDelta(2,gO2)*ZA(gI2,2))
      + KroneckerDelta(3,gO2)*ZA(gI2,3)));

   return result;
}

std::complex<double> CLASSNAME::CpUAhbargWmgWm(unsigned gO1) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.25)*(vd*KroneckerDelta(0,gO1) - vu*
      KroneckerDelta(1,gO1))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUAhbargWmCgWmC(unsigned gO1) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.25)*(vd*KroneckerDelta(0,gO1) - vu*
      KroneckerDelta(1,gO1))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhVZVZ(unsigned gO1, unsigned gO2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*((KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) + KroneckerDelta
      (3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p)*Sqr(QS)*Sqr(Sin(ThetaWp())) +
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(-14.696938456699067*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
      Cos(ThetaWp())) + Cos(ThetaW())*(-18.973665961010276*g1p*g2*Cos(ThetaWp())*
      Sin(ThetaWp()) + 15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp())))
      + 6*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(
      ThetaWp()))) + 2*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp()) + g1*Sin(ThetaW())*
      (7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*Sqr(Cos(ThetaWp())
      ) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + g1p*(
      2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(ThetaWp(
      ))))));

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhVZpVZp(unsigned gO1, unsigned gO2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*((KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) + KroneckerDelta
      (3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p)*Sqr(QS)*Sqr(Cos(ThetaWp())) + 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-2*Cos(ThetaWp())*(
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*
      g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + (g1*
      Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*
      Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(ThetaWp()))) + KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*(6*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(
      ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(
      ThetaWp())) + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(2*Conj(ZP(gI2,1))*(-10*Conj(Lambdax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax*ZP(gI1,0) - 10*Conj(Lambdax)*KroneckerDelta(3,
      gO1)*KroneckerDelta(4,gO2)*Sigmax*ZP(gI1,0) + 5*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,0) - 20*AbsSqr(
      Lambdax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*ZP(gI1,1) - 3*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1)*ZP(gI1,1) - 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1p)*ZP(gI1,1) + QS*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*ZP(gI1,1) - QS*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*ZP(gI1,1) - 5*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g2)*ZP(gI1,1) +
      KroneckerDelta(0,gO2)*(5*KroneckerDelta(1,gO1)*(-2*AbsSqr(Lambdax) + Sqr(g2)
      )*ZP(gI1,0) + KroneckerDelta(0,gO1)*(3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(g2))*ZP(
      gI1,1))) - Conj(ZP(gI2,0))*(40*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*ZP(gI1,0) - 3*QS*KroneckerDelta(2,gO1)*KroneckerDelta(
      2,gO2)*Sqr(g1p)*ZP(gI1,0) + 3*QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)
      *Sqr(g1p)*ZP(gI1,0) + 20*Conj(Sigmax)*KroneckerDelta(3,gO2)*KroneckerDelta(4
      ,gO1)*Lambdax*ZP(gI1,1) + 20*Conj(Sigmax)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Lambdax*ZP(gI1,1) + KroneckerDelta(1,gO1)*(2*
      KroneckerDelta(1,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2))*ZP(gI1,0) - 10*
      KroneckerDelta(0,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,1)) +
      KroneckerDelta(0,gO1)*(KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9*Sqr(g1p) + 10*
      Sqr(g2))*ZP(gI1,0) - 10*KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))
      *ZP(gI1,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = -0.05*(QS*(KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) -
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p) + KroneckerDelta(0,gO1
      )*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) -
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(
      g2)))*(Conj(UHp0(gI2,0))*UHp0(gI1,0) - Conj(UHp0(gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = -0.05*(QS*(KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) -
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p) + KroneckerDelta(0,gO1
      )*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(g2)) +
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr
      (g2)))*(Conj(UHpp(gI2,0))*UHpp(gI1,0) - Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjHpmHpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.25)*(Conj(ZP(gI2,1))*(-2*(
      1.4142135623730951*Conj(TLambdax)*KroneckerDelta(2,gO2) + Conj(Lambdax)*(
      vphi*KroneckerDelta(3,gO2) + vsb*KroneckerDelta(4,gO2))*Sigmax) + vu*
      KroneckerDelta(0,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2)) + vd*KroneckerDelta(1,
      gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2)))*ZP(gI1,0) + Conj(ZP(gI2,0))*(-(vu*
      KroneckerDelta(0,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))) - vd*KroneckerDelta(1,
      gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2)) + 2*(Conj(Sigmax)*(vphi*KroneckerDelta(3
      ,gO2) + vsb*KroneckerDelta(4,gO2))*Lambdax + 1.4142135623730951*
      KroneckerDelta(2,gO2)*TLambdax))*ZP(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarChaChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,-0.7071067811865475)*(g2*KroneckerDelta(0,
      gO2)*UM(gI1,1)*UP(gI2,0) + (g2*KroneckerDelta(1,gO2)*UM(gI1,0) - Conj(
      Lambdax)*KroneckerDelta(2,gO2)*UM(gI1,1))*UP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarChaChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,0.7071067811865475)*(g2*Conj(UM(gI2,0))*
      Conj(UP(gI1,1))*KroneckerDelta(1,gO1) + Conj(UM(gI2,1))*(g2*Conj(UP(gI1,0))*
      KroneckerDelta(0,gO1) - Conj(UP(gI1,1))*KroneckerDelta(2,gO1)*Lambdax));

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*KroneckerDelta(gI1,gI2)*(QS*(-(KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)) + KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2))*Sqr(
      g1p) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p)
      - 5*Sqr(g2)) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*
      Sqr(g1p) + 5*Sqr(g2)));

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFdFdPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1905;
   std::complex<double> tmp_1906;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1906 += Conj(Yd(j1,j1))*ZDL(gI1,j1)*ZDR(gI2,j1);
   }
   tmp_1905 += tmp_1906;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(0,gO2)
      ) * tmp_1905;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFdFdPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1907;
   std::complex<double> tmp_1908;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1908 += Conj(ZDL(gI2,j1))*Conj(ZDR(gI1,j1))*Yd(j1,j1);
   }
   tmp_1907 += tmp_1908;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,gO1
      )) * tmp_1907;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFDXFDXPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1909;
   std::complex<double> tmp_1910;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1910 += Conj(Kappa(j1,j1))*ZDXL(gI1,j1)*ZDXR(gI2,j1);
   }
   tmp_1909 += tmp_1910;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,gO2)
      ) * tmp_1909;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFDXFDXPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1911;
   std::complex<double> tmp_1912;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1912 += Conj(ZDXL(gI2,j1))*Conj(ZDXR(gI1,j1))*Kappa(j1,j1);
   }
   tmp_1911 += tmp_1912;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,gO1
      )) * tmp_1911;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFeFePR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1913;
   std::complex<double> tmp_1914;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1914 += Conj(Ye(j1,j1))*ZEL(gI1,j1)*ZER(gI2,j1);
   }
   tmp_1913 += tmp_1914;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(0,gO2)
      ) * tmp_1913;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFeFePL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1915;
   std::complex<double> tmp_1916;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1916 += Conj(ZEL(gI2,j1))*Conj(ZER(gI1,j1))*Ye(j1,j1);
   }
   tmp_1915 += tmp_1916;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,gO1
      )) * tmp_1915;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFuFuPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1917;
   std::complex<double> tmp_1918;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1918 += Conj(Yu(j1,j1))*ZUL(gI1,j1)*ZUR(gI2,j1);
   }
   tmp_1917 += tmp_1918;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(1,gO2)
      ) * tmp_1917;

   return result;
}

std::complex<double> CLASSNAME::CpUAhbarFuFuPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1919;
   std::complex<double> tmp_1920;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1920 += Conj(ZUL(gI2,j1))*Conj(ZUR(gI1,j1))*Yu(j1,j1);
   }
   tmp_1919 += tmp_1920;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,gO1
      )) * tmp_1919;

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-40*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,
      gO2)*ZA(gI1,0)*ZA(gI2,0) + 3*QS*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*
      Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0) - 3*QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,
      gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0) - 10*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,1)*ZA(gI2,0) - 10*Conj(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,0) - 10
      *Conj(Lambdax)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,1)*
      ZA(gI2,0) - 10*Conj(Lambdax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,1)*ZA(gI2,0) - 40*AbsSqr(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)*ZA(gI1,2)*ZA(gI2,0) + 3*QS*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,0) - 10*Conj(Sigmax)*
      KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,3)*ZA(gI2,0) - 10
      *Conj(Lambdax)*KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,3)*
      ZA(gI2,0) - 3*QS*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p)*ZA(gI1
      ,3)*ZA(gI2,0) - 10*Conj(Sigmax)*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*
      Lambdax*ZA(gI1,4)*ZA(gI2,0) - 10*Conj(Lambdax)*KroneckerDelta(1,gO2)*
      KroneckerDelta(3,gO1)*Sigmax*ZA(gI1,4)*ZA(gI2,0) - 10*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,0)*ZA(gI2,1) - 10
      *Conj(Sigmax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*
      ZA(gI2,1) - 10*Conj(Lambdax)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*
      Sigmax*ZA(gI1,0)*ZA(gI2,1) - 10*Conj(Lambdax)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2,1) - 40*AbsSqr(Lambdax)*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*ZA(gI1,1)*ZA(gI2,1) + 2*QS*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1) - 2
      *QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1)
      - 40*AbsSqr(Lambdax)*KroneckerDelta(1,gO2)*KroneckerDelta(2,gO1)*ZA(gI1,2)*
      ZA(gI2,1) + 2*QS*KroneckerDelta(1,gO2)*KroneckerDelta(2,gO1)*Sqr(g1p)*ZA(gI1
      ,2)*ZA(gI2,1) - 10*Conj(Sigmax)*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*
      Lambdax*ZA(gI1,3)*ZA(gI2,1) - 10*Conj(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,3)*ZA(gI2,1) - 2*QS*KroneckerDelta(1,gO2
      )*KroneckerDelta(3,gO1)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,1) - 10*Conj(Sigmax)*
      KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Lambdax*ZA(gI1,4)*ZA(gI2,1) - 10
      *Conj(Lambdax)*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Sigmax*ZA(gI1,4)*
      ZA(gI2,1) - 40*AbsSqr(Lambdax)*KroneckerDelta(0,gO2)*KroneckerDelta(2,gO1)*
      ZA(gI1,0)*ZA(gI2,2) + 3*QS*KroneckerDelta(0,gO2)*KroneckerDelta(2,gO1)*Sqr(
      g1p)*ZA(gI1,0)*ZA(gI2,2) - 40*AbsSqr(Lambdax)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*ZA(gI1,1)*ZA(gI2,2) + 2*QS*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,2) - 40*AbsSqr(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(gI2,2) - 40*AbsSqr(
      Sigmax)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(gI2,2) - 3*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,2)*ZA(
      gI2,2) + KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1
      ,2)*ZA(gI2,2) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1
      )*ZA(gI1,3)*ZA(gI2,2) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(3,gO2)*ZA(gI1,3)*ZA(gI2,2) + 20*Conj(Sigmax)*KroneckerDelta(4
      ,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2,2) + 20*Conj(KappaPr)*
      KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,2) +
      KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p)*Sqr(QS)*ZA(gI1,3)*ZA(
      gI2,2) + KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1
      ,3)*ZA(gI2,2) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1
      )*ZA(gI1,4)*ZA(gI2,2) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(gI2,2) + 20*Conj(Sigmax)*KroneckerDelta(3
      ,gO2)*KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,4)*ZA(gI2,2) + 20*Conj(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,2) + 20
      *Conj(KappaPr)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,4)*
      ZA(gI2,2) + 20*Conj(KappaPr)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,4)*ZA(gI2,2) - 10*Conj(Sigmax)*KroneckerDelta(1,gO2)*
      KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,0)*ZA(gI2,3) - 10*Conj(Lambdax)*
      KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,0)*ZA(gI2,3) - 3*
      QS*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,3)
      - 10*Conj(Sigmax)*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Lambdax*ZA(gI1
      ,1)*ZA(gI2,3) - 10*Conj(Lambdax)*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)
      *Sigmax*ZA(gI1,1)*ZA(gI2,3) - 2*QS*KroneckerDelta(1,gO2)*KroneckerDelta(3,
      gO1)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO2)*
      KroneckerDelta(3,gO1)*ZA(gI1,2)*ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta
      (2,gO1)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(gI2,3) + 20*Conj(Sigmax)*
      KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,3) + 20
      *Conj(KappaPr)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*
      ZA(gI2,3) + KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p)*Sqr(QS)*ZA(
      gI1,2)*ZA(gI2,3) + KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(
      QS)*ZA(gI1,2)*ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*ZA(gI1,3)*ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta
      (4,gO1)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(gI2,3) + KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,3)*ZA(gI2,3) - 3*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,3)*ZA(
      gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*ZA(
      gI1,4)*ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,
      gO2)*ZA(gI1,4)*ZA(gI2,3) + 20*Conj(Sigmax)*KroneckerDelta(2,gO2)*
      KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,4)*ZA(gI2,3) + 20*Conj(Sigmax)*
      KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,3) + 20
      *Conj(KappaPr)*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,4)*
      ZA(gI2,3) + 20*Conj(KappaPr)*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,4)*ZA(gI2,3) - 10*Conj(Sigmax)*KroneckerDelta(1,gO2)*
      KroneckerDelta(3,gO1)*Lambdax*ZA(gI1,0)*ZA(gI2,4) - 10*Conj(Lambdax)*
      KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Sigmax*ZA(gI1,0)*ZA(gI2,4) - 10*
      Conj(Sigmax)*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Lambdax*ZA(gI1,1)*
      ZA(gI2,4) - 10*Conj(Lambdax)*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*
      Sigmax*ZA(gI1,1)*ZA(gI2,4) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO2)*
      KroneckerDelta(4,gO1)*ZA(gI1,2)*ZA(gI2,4) - 40*AbsSqr(Sigmax)*KroneckerDelta
      (2,gO1)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(gI2,4) + 20*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,2)*ZA(gI2,4) + 20
      *Conj(Sigmax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*
      ZA(gI2,4) + 20*Conj(KappaPr)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*
      Sigmax*ZA(gI1,2)*ZA(gI2,4) + 20*Conj(KappaPr)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*ZA(gI2,4) - 40*AbsSqr(Sigmax)*
      KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*ZA(gI1,3)*ZA(gI2,4) - 40*AbsSqr(
      Sigmax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(gI2,4) + 20
      *Conj(Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,3)*
      ZA(gI2,4) + 20*Conj(Sigmax)*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*
      KappaPr*ZA(gI1,3)*ZA(gI2,4) + 20*Conj(KappaPr)*KroneckerDelta(2,gO2)*
      KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,3)*ZA(gI2,4) + 20*Conj(KappaPr)*
      KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,4) - 40*
      AbsSqr(Sigmax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*ZA(gI1,4)*ZA(gI2,
      4) - 40*AbsSqr(Sigmax)*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*ZA(gI1,4)
      *ZA(gI2,4) - 240*AbsSqr(KappaPr)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)
      *ZA(gI1,4)*ZA(gI2,4) + 20*Conj(Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(
      3,gO1)*KappaPr*ZA(gI1,4)*ZA(gI2,4) + 20*Conj(Sigmax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,4) + 20*Conj(KappaPr)*
      KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*Sigmax*ZA(gI1,4)*ZA(gI2,4) + 20*
      Conj(KappaPr)*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*
      ZA(gI2,4) + 2*KroneckerDelta(1,gO1)*(-5*Conj(Sigmax)*KroneckerDelta(4,gO2)*
      Lambdax*ZA(gI1,3)*ZA(gI2,0) - 5*Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*
      ZA(gI1,3)*ZA(gI2,0) - 5*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,4)
      *ZA(gI2,0) - 5*Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,0
      ) - 20*AbsSqr(Lambdax)*KroneckerDelta(2,gO2)*ZA(gI1,2)*ZA(gI2,1) + QS*
      KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,1) - QS*KroneckerDelta(3,gO2
      )*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,1) - 20*AbsSqr(Lambdax)*KroneckerDelta(2,gO2)*ZA
      (gI1,1)*ZA(gI2,2) + QS*KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,2) -
      5*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,3) - 5*Conj(
      Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2,3) - QS*
      KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,3) + KroneckerDelta(1,gO2)*(
      (-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,0)*ZA(gI2,
      0) - 3*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,1) - 20*AbsSqr(
      Lambdax)*ZA(gI1,2)*ZA(gI2,2) + QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) - QS*Sqr(g1p)
      *ZA(gI1,3)*ZA(gI2,3)) - 5*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,
      0)*ZA(gI2,4) - 5*Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2
      ,4) + KroneckerDelta(0,gO2)*((-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) +
      5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,0) + (-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(
      g1p) + 5*Sqr(g2))*ZA(gI1,0)*ZA(gI2,1) - 5*(Conj(Sigmax)*Lambdax + Conj(
      Lambdax)*Sigmax)*(ZA(gI1,4)*ZA(gI2,3) + ZA(gI1,3)*ZA(gI2,4)))) -
      KroneckerDelta(0,gO1)*(40*AbsSqr(Lambdax)*KroneckerDelta(2,gO2)*ZA(gI1,2)*ZA
      (gI2,0) - 3*QS*KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,0) + 3*QS*
      KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,0) + 10*Conj(Sigmax)*
      KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,1) + 10*Conj(Lambdax)*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,1) + 10*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,4)*ZA(gI2,1) + 10*Conj(Lambdax)*
      KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,1) + 40*AbsSqr(Lambdax)*
      KroneckerDelta(2,gO2)*ZA(gI1,0)*ZA(gI2,2) - 3*QS*KroneckerDelta(2,gO2)*Sqr(
      g1p)*ZA(gI1,0)*ZA(gI2,2) + 3*QS*KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(
      gI2,3) + 10*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,3) +
      10*Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,1)*ZA(gI2,3) +
      KroneckerDelta(0,gO2)*(3*(6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2))*ZA(gI1,0)*ZA(
      gI2,0) + 2*(20*AbsSqr(Lambdax) - 3*Sqr(g1) + 3*Sqr(g1p) - 5*Sqr(g2))*ZA(gI1,
      1)*ZA(gI2,1) + 40*AbsSqr(Lambdax)*ZA(gI1,2)*ZA(gI2,2) - 3*QS*Sqr(g1p)*ZA(gI1
      ,2)*ZA(gI2,2) + 3*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) + 10*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,4) + 10*Conj(Lambdax)*
      KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,1)*ZA(gI2,4) - 2*KroneckerDelta(1,gO2)*(
      (-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,
      0) + (-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,0)*ZA
      (gI2,1) - 5*(Conj(Sigmax)*Lambdax + Conj(Lambdax)*Sigmax)*(ZA(gI1,4)*ZA(gI2,
      3) + ZA(gI1,3)*ZA(gI2,4)))));

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-40*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - 40*AbsSqr(Lambdax)*Conj(ZH(gI1
      ,2))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2) - 40*AbsSqr
      (Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,
      2))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2) - 40*AbsSqr(
      Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO1)*KroneckerDelta
      (3,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(4
      ,gO1)*KroneckerDelta(4,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      3))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2) - 80*AbsSqr(KappaPr)*Conj(ZH
      (gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2) - 20*
      Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*
      KroneckerDelta(3,gO1)*KappaPr - 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      4))*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*KappaPr + 20*Conj(Sigmax)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*
      KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,
      gO2)*KroneckerDelta(4,gO1)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,2))*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*KappaPr + 20*Conj(
      Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*KroneckerDelta
      (4,gO1)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*KappaPr + 20*Conj(Sigmax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*
      KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,
      gO1)*KroneckerDelta(4,gO2)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH
      (gI2,4))*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*KappaPr - 20*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO1)*KroneckerDelta
      (4,gO2)*KappaPr - 20*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*
      KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*KappaPr + 10*Conj(Sigmax)*Conj(
      ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*
      Lambdax + 10*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,
      gO2)*KroneckerDelta(1,gO1)*Lambdax + 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*Lambdax + 10*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO1)*KroneckerDelta
      (1,gO2)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*
      KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Lambdax - 10*Conj(Sigmax)*Conj(
      ZH(gI1,4))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*
      Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,
      gO1)*KroneckerDelta(3,gO2)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,0))*KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Lambdax - 10*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*KroneckerDelta
      (4,gO1)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*
      KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Lambdax - 10*Conj(Sigmax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO1)*KroneckerDelta(4,gO2)*
      Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,
      gO1)*KroneckerDelta(4,gO2)*Lambdax + 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(
      ZH(gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*Sigmax + 10*Conj(
      Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Sigmax + 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      3))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*Sigmax + 10*Conj(Lambdax)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*
      Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,
      gO2)*KroneckerDelta(3,gO1)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,0))*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Sigmax - 20*Conj(
      KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*
      KroneckerDelta(3,gO1)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      1))*KroneckerDelta(0,gO1)*KroneckerDelta(3,gO2)*Sigmax - 10*Conj(Lambdax)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*
      Sigmax - 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,
      gO1)*KroneckerDelta(3,gO2)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,1))*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Sigmax - 10*Conj(
      Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*
      KroneckerDelta(4,gO1)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      3))*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*Sigmax + 20*Conj(KappaPr)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*
      Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,
      gO2)*KroneckerDelta(4,gO1)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH
      (gI2,4))*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax - 10*Conj(
      Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO1)*
      KroneckerDelta(4,gO2)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      0))*KroneckerDelta(1,gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(KappaPr)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*
      Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,
      gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,2))*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(
      KappaPr)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax - 20*Conj(KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      2))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*Sigmax - 20*Conj(KappaPr)*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*
      Sigmax + 3*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p) - 3*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*Sqr(g1p) + 2*QS*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1p) - 2*QS*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*
      Sqr(g1p) + 2*Conj(ZH(gI1,1))*(-5*(Conj(ZH(gI2,4))*(KroneckerDelta(0,gO2)*
      KroneckerDelta(3,gO1) + KroneckerDelta(0,gO1)*KroneckerDelta(3,gO2)) + Conj(
      ZH(gI2,3))*(KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1) + KroneckerDelta(0,
      gO1)*KroneckerDelta(4,gO2)) - Conj(ZH(gI2,0))*(KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1) + KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)))*(Conj(
      Sigmax)*Lambdax + Conj(Lambdax)*Sigmax) + Conj(ZH(gI2,1))*(-20*AbsSqr(
      Lambdax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) + QS*KroneckerDelta(2,
      gO1)*KroneckerDelta(2,gO2)*Sqr(g1p) - QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)
      *(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2)))) - Conj(
      ZH(gI1,0))*(10*(Conj(ZH(gI2,4))*(KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)
      + KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)) + Conj(ZH(gI2,3))*(
      KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1) + KroneckerDelta(1,gO1)*
      KroneckerDelta(4,gO2)) - Conj(ZH(gI2,1))*(KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1) + KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)))*(Conj(
      Sigmax)*Lambdax + Conj(Lambdax)*Sigmax) + Conj(ZH(gI2,0))*(40*AbsSqr(Lambdax
      )*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) - 3*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p) + 3*QS*KroneckerDelta(3,gO1)*KroneckerDelta(3
      ,gO2)*Sqr(g1p) + 2*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(20*AbsSqr(
      Lambdax) - 3*Sqr(g1) + 3*Sqr(g1p) - 5*Sqr(g2)) + KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2)))) - Conj(ZH(gI1,
      2))*Conj(ZH(gI2,2))*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr
      (QS) + Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO1)*KroneckerDelta(
      2,gO2)*Sqr(g1p)*Sqr(QS) + Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(3,
      gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) - Conj(ZH(gI1,3))*Conj(ZH(gI2,3)
      )*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS));

   return result;
}

std::complex<double> CLASSNAME::CpUAhAhAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.25)*(-(vphi*Conj(Sigmax)*KroneckerDelta(3,
      gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,0)) - vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*
      Lambdax*ZA(gI1,1)*ZA(gI2,0) - 1.4142135623730951*KroneckerDelta(2,gO2)*
      TLambdax*ZA(gI1,1)*ZA(gI2,0) - 1.4142135623730951*KroneckerDelta(1,gO2)*
      TLambdax*ZA(gI1,2)*ZA(gI2,0) - vphi*Conj(Sigmax)*KroneckerDelta(1,gO2)*
      Lambdax*ZA(gI1,3)*ZA(gI2,0) + vu*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*
      ZA(gI1,3)*ZA(gI2,0) - vsb*Conj(Sigmax)*KroneckerDelta(1,gO2)*Lambdax*ZA(gI1,
      4)*ZA(gI2,0) + vu*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,4)*ZA(
      gI2,0) - vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,1)
      - vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,1) -
      1.4142135623730951*KroneckerDelta(2,gO2)*TLambdax*ZA(gI1,0)*ZA(gI2,1) -
      1.4142135623730951*KroneckerDelta(0,gO2)*TLambdax*ZA(gI1,2)*ZA(gI2,1) - vphi
      *Conj(Sigmax)*KroneckerDelta(0,gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,1) + vd*Conj(
      Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,1) - vsb*Conj(Sigmax)
      *KroneckerDelta(0,gO2)*Lambdax*ZA(gI1,4)*ZA(gI2,1) + vd*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,4)*ZA(gI2,1) - 1.4142135623730951*
      KroneckerDelta(1,gO2)*TLambdax*ZA(gI1,0)*ZA(gI2,2) - 1.4142135623730951*
      KroneckerDelta(0,gO2)*TLambdax*ZA(gI1,1)*ZA(gI2,2) - 1.4142135623730951*
      MuPhi*Conj(Sigmax)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(gI2,2) +
      1.4142135623730951*Conj(TSigmax)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(gI2,2) -
      2*vphi*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2,2) +
      1.4142135623730951*Conj(MuPhi)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2
      ,2) + 2*vphi*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,2)
      - 1.4142135623730951*KroneckerDelta(4,gO2)*TSigmax*ZA(gI1,3)*ZA(gI2,2) -
      1.4142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(3,gO2)*ZA(gI1,4)*ZA(gI2
      ,2) + 1.4142135623730951*Conj(TSigmax)*KroneckerDelta(3,gO2)*ZA(gI1,4)*ZA(
      gI2,2) - 2*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,
      2) + 2*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,2) +
      1.4142135623730951*Conj(MuPhi)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2
      ,2) + 2*vphi*Conj(KappaPr)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,2)
      - 2*vsb*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,2) -
      1.4142135623730951*KroneckerDelta(3,gO2)*TSigmax*ZA(gI1,4)*ZA(gI2,2) +
      1.4142135623730951*Conj(TLambdax)*(KroneckerDelta(2,gO2)*(ZA(gI1,1)*ZA(gI2,0
      ) + ZA(gI1,0)*ZA(gI2,1)) + KroneckerDelta(1,gO2)*(ZA(gI1,2)*ZA(gI2,0) + ZA(
      gI1,0)*ZA(gI2,2)) + KroneckerDelta(0,gO2)*(ZA(gI1,2)*ZA(gI2,1) + ZA(gI1,1)*
      ZA(gI2,2))) - vphi*Conj(Sigmax)*KroneckerDelta(1,gO2)*Lambdax*ZA(gI1,0)*ZA(
      gI2,3) + vu*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,3) -
      vphi*Conj(Sigmax)*KroneckerDelta(0,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,3) + vd*
      Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,3) -
      1.4142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(gI2
      ,3) + 1.4142135623730951*Conj(TSigmax)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(
      gI2,3) - 2*vphi*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,
      3) + 1.4142135623730951*Conj(MuPhi)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*
      ZA(gI2,3) + 2*vphi*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*ZA(
      gI2,3) - 1.4142135623730951*KroneckerDelta(4,gO2)*TSigmax*ZA(gI1,2)*ZA(gI2,3
      ) - 1.4142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(2,gO2)*ZA(gI1,4)*ZA
      (gI2,3) + 1.4142135623730951*Conj(TSigmax)*KroneckerDelta(2,gO2)*ZA(gI1,4)*
      ZA(gI2,3) - 2*vphi*Conj(Sigmax)*KroneckerDelta(2,gO2)*KappaPr*ZA(gI1,4)*ZA(
      gI2,3) + 2*vs*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,3)
      + vu*Conj(Sigmax)*KroneckerDelta(0,gO2)*Lambdax*ZA(gI1,4)*ZA(gI2,3) + vd*
      Conj(Sigmax)*KroneckerDelta(1,gO2)*Lambdax*ZA(gI1,4)*ZA(gI2,3) +
      1.4142135623730951*Conj(MuPhi)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2
      ,3) + 2*vphi*Conj(KappaPr)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,3)
      - 2*vs*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,3) -
      1.4142135623730951*KroneckerDelta(2,gO2)*TSigmax*ZA(gI1,4)*ZA(gI2,3) - vsb*
      Conj(Sigmax)*KroneckerDelta(1,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,4) + vu*Conj(
      Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,4) - vsb*Conj(Sigmax)
      *KroneckerDelta(0,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,4) + vd*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,4) - 1.4142135623730951*MuPhi
      *Conj(Sigmax)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(gI2,4) + 1.4142135623730951
      *Conj(TSigmax)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(gI2,4) - 2*vphi*Conj(
      Sigmax)*KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,4) + 2*vsb*Conj(
      Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,4) +
      1.4142135623730951*Conj(MuPhi)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,2)*ZA(gI2
      ,4) + 2*vphi*Conj(KappaPr)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,2)*ZA(gI2,4)
      - 2*vsb*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*ZA(gI2,4) -
      1.4142135623730951*KroneckerDelta(3,gO2)*TSigmax*ZA(gI1,2)*ZA(gI2,4) -
      1.4142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(2,gO2)*ZA(gI1,3)*ZA(gI2
      ,4) + 1.4142135623730951*Conj(TSigmax)*KroneckerDelta(2,gO2)*ZA(gI1,3)*ZA(
      gI2,4) - 2*vphi*Conj(Sigmax)*KroneckerDelta(2,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2,
      4) + 2*vs*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2,4) +
      vu*Conj(Sigmax)*KroneckerDelta(0,gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,4) + vd*Conj(
      Sigmax)*KroneckerDelta(1,gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,4) +
      1.4142135623730951*Conj(MuPhi)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2
      ,4) + 2*vphi*Conj(KappaPr)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,4)
      - 2*vs*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,4) -
      1.4142135623730951*KroneckerDelta(2,gO2)*TSigmax*ZA(gI1,3)*ZA(gI2,4) +
      8.485281374238571*MuPhi*Conj(KappaPr)*KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(gI2
      ,4) - 2.8284271247461903*Conj(TKappaPr)*KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(
      gI2,4) + 2*vsb*Conj(Sigmax)*KroneckerDelta(2,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,4
      ) + 2*vs*Conj(Sigmax)*KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,4) -
      8.485281374238571*Conj(MuPhi)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2
      ,4) - 2*vsb*Conj(KappaPr)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,4) -
      2*vs*Conj(KappaPr)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,4) +
      2.8284271247461903*KroneckerDelta(4,gO2)*TKappaPr*ZA(gI1,4)*ZA(gI2,4) + Conj
      (Lambdax)*Sigmax*(vphi*KroneckerDelta(1,gO2)*ZA(gI1,3)*ZA(gI2,0) + vsb*
      KroneckerDelta(1,gO2)*ZA(gI1,4)*ZA(gI2,0) + vphi*KroneckerDelta(0,gO2)*ZA(
      gI1,3)*ZA(gI2,1) + vsb*KroneckerDelta(0,gO2)*ZA(gI1,4)*ZA(gI2,1) + vphi*
      KroneckerDelta(1,gO2)*ZA(gI1,0)*ZA(gI2,3) + vphi*KroneckerDelta(0,gO2)*ZA(
      gI1,1)*ZA(gI2,3) - vu*KroneckerDelta(0,gO2)*ZA(gI1,4)*ZA(gI2,3) - vd*
      KroneckerDelta(1,gO2)*ZA(gI1,4)*ZA(gI2,3) - KroneckerDelta(4,gO2)*(ZA(gI1,3)
      *(vu*ZA(gI2,0) + vd*ZA(gI2,1)) + ZA(gI1,1)*(-(vsb*ZA(gI2,0)) + vd*ZA(gI2,3))
      + ZA(gI1,0)*(-(vsb*ZA(gI2,1)) + vu*ZA(gI2,3))) + vsb*KroneckerDelta(1,gO2)*
      ZA(gI1,0)*ZA(gI2,4) + vsb*KroneckerDelta(0,gO2)*ZA(gI1,1)*ZA(gI2,4) - vu*
      KroneckerDelta(0,gO2)*ZA(gI1,3)*ZA(gI2,4) - vd*KroneckerDelta(1,gO2)*ZA(gI1,
      3)*ZA(gI2,4) - KroneckerDelta(3,gO2)*(ZA(gI1,4)*(vu*ZA(gI2,0) + vd*ZA(gI2,1)
      ) + ZA(gI1,1)*(-(vphi*ZA(gI2,0)) + vd*ZA(gI2,4)) + ZA(gI1,0)*(-(vphi*ZA(gI2,
      1)) + vu*ZA(gI2,4)))));

   return result;
}

std::complex<double> CLASSNAME::CpUAhhhAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-40*vs*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*KroneckerDelta(0,gO2)
      *ZA(gI2,0) - 14.142135623730951*Conj(TLambdax)*Conj(ZH(gI1,2))*
      KroneckerDelta(1,gO2)*ZA(gI2,0) + 10*vphi*Conj(Sigmax)*Conj(ZH(gI1,3))*
      KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,0) + 10*vsb*Conj(Sigmax)*Conj(ZH(gI1,4)
      )*KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,0) - 10*vu*Conj(Sigmax)*Conj(ZH(gI1,4
      ))*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,0) - 10*vu*Conj(Sigmax)*Conj(ZH(gI1,
      3))*KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,0) + 10*vphi*Conj(Lambdax)*Conj(ZH(
      gI1,3))*KroneckerDelta(1,gO2)*Sigmax*ZA(gI2,0) + 10*vsb*Conj(Lambdax)*Conj(
      ZH(gI1,4))*KroneckerDelta(1,gO2)*Sigmax*ZA(gI2,0) - 10*vu*Conj(Lambdax)*Conj
      (ZH(gI1,4))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,0) - 10*vu*Conj(Lambdax)*
      Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,0) + 3*QS*vs*Conj(ZH(gI1
      ,2))*KroneckerDelta(0,gO2)*Sqr(g1p)*ZA(gI2,0) - 3*QS*vsb*Conj(ZH(gI1,3))*
      KroneckerDelta(0,gO2)*Sqr(g1p)*ZA(gI2,0) - 14.142135623730951*Conj(ZH(gI1,2)
      )*KroneckerDelta(1,gO2)*TLambdax*ZA(gI2,0) - 14.142135623730951*Conj(
      TLambdax)*Conj(ZH(gI1,2))*KroneckerDelta(0,gO2)*ZA(gI2,1) - 40*vs*AbsSqr(
      Lambdax)*Conj(ZH(gI1,2))*KroneckerDelta(1,gO2)*ZA(gI2,1) + 10*vphi*Conj(
      Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,1) + 10*vsb*
      Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,1) - 10*vd
      *Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,1) - 10*
      vd*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,1) + 10
      *vphi*Conj(Lambdax)*Conj(ZH(gI1,3))*KroneckerDelta(0,gO2)*Sigmax*ZA(gI2,1) +
      10*vsb*Conj(Lambdax)*Conj(ZH(gI1,4))*KroneckerDelta(0,gO2)*Sigmax*ZA(gI2,1)
      - 10*vd*Conj(Lambdax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,1
      ) - 10*vd*Conj(Lambdax)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,
      1) + 2*QS*vs*Conj(ZH(gI1,2))*KroneckerDelta(1,gO2)*Sqr(g1p)*ZA(gI2,1) - 2*QS
      *vsb*Conj(ZH(gI1,3))*KroneckerDelta(1,gO2)*Sqr(g1p)*ZA(gI2,1) -
      14.142135623730951*Conj(ZH(gI1,2))*KroneckerDelta(0,gO2)*TLambdax*ZA(gI2,1)
      - 40*vsb*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*ZA(gI2,2) - 40
      *vphi*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*ZA(gI2,2) -
      14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*
      ZA(gI2,2) - 14.142135623730951*Conj(TSigmax)*Conj(ZH(gI1,4))*KroneckerDelta(
      3,gO2)*ZA(gI2,2) + 14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,3))*
      KroneckerDelta(4,gO2)*ZA(gI2,2) - 14.142135623730951*Conj(TSigmax)*Conj(ZH(
      gI1,3))*KroneckerDelta(4,gO2)*ZA(gI2,2) - 20*vphi*Conj(Sigmax)*Conj(ZH(gI1,4
      ))*KroneckerDelta(3,gO2)*KappaPr*ZA(gI2,2) + 20*vphi*Conj(Sigmax)*Conj(ZH(
      gI1,3))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,2) + 20*vsb*Conj(Sigmax)*Conj(
      ZH(gI1,4))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,2) - 14.142135623730951*Conj
      (MuPhi)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,2) - 20*vphi*
      Conj(KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,2) +
      14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Sigmax*
      ZA(gI2,2) + 20*vphi*Conj(KappaPr)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI2,2) + 20*vsb*Conj(KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2
      )*Sigmax*ZA(gI2,2) - vs*Conj(ZH(gI1,2))*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(
      QS)*ZA(gI2,2) + vsb*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS)*
      ZA(gI2,2) - 14.142135623730951*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*TSigmax
      *ZA(gI2,2) - 14.142135623730951*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*
      TSigmax*ZA(gI2,2) - 14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,4))*
      KroneckerDelta(2,gO2)*ZA(gI2,3) - 14.142135623730951*Conj(TSigmax)*Conj(ZH(
      gI1,4))*KroneckerDelta(2,gO2)*ZA(gI2,3) - 40*vs*AbsSqr(Sigmax)*Conj(ZH(gI1,2
      ))*KroneckerDelta(3,gO2)*ZA(gI2,3) - 40*vphi*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*
      KroneckerDelta(3,gO2)*ZA(gI2,3) + 14.142135623730951*MuPhi*Conj(Sigmax)*Conj
      (ZH(gI1,2))*KroneckerDelta(4,gO2)*ZA(gI2,3) - 14.142135623730951*Conj(
      TSigmax)*Conj(ZH(gI1,2))*KroneckerDelta(4,gO2)*ZA(gI2,3) - 20*vphi*Conj(
      Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*KappaPr*ZA(gI2,3) + 20*vphi*
      Conj(Sigmax)*Conj(ZH(gI1,2))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,3) + 20*vs
      *Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,3) - 10*
      vu*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,3) - 10
      *vd*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,3) -
      10*vu*Conj(Lambdax)*Conj(ZH(gI1,4))*KroneckerDelta(0,gO2)*Sigmax*ZA(gI2,3) -
      10*vd*Conj(Lambdax)*Conj(ZH(gI1,4))*KroneckerDelta(1,gO2)*Sigmax*ZA(gI2,3)
      - 14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*
      Sigmax*ZA(gI2,3) - 20*vphi*Conj(KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(2,
      gO2)*Sigmax*ZA(gI2,3) + 14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,2))*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) + 20*vphi*Conj(KappaPr)*Conj(ZH(gI1,2
      ))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) + 20*vs*Conj(KappaPr)*Conj(ZH(gI1,
      4))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) + vs*Conj(ZH(gI1,2))*
      KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI2,3) - vsb*Conj(ZH(gI1,3))*
      KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI2,3) - 14.142135623730951*Conj(
      ZH(gI1,4))*KroneckerDelta(2,gO2)*TSigmax*ZA(gI2,3) - 14.142135623730951*Conj
      (ZH(gI1,2))*KroneckerDelta(4,gO2)*TSigmax*ZA(gI2,3) + 14.142135623730951*
      MuPhi*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*ZA(gI2,4) -
      14.142135623730951*Conj(TSigmax)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*ZA(
      gI2,4) + 14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,2))*
      KroneckerDelta(3,gO2)*ZA(gI2,4) - 14.142135623730951*Conj(TSigmax)*Conj(ZH(
      gI1,2))*KroneckerDelta(3,gO2)*ZA(gI2,4) - 40*vs*AbsSqr(Sigmax)*Conj(ZH(gI1,2
      ))*KroneckerDelta(4,gO2)*ZA(gI2,4) - 40*vsb*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*
      KroneckerDelta(4,gO2)*ZA(gI2,4) - 80*vphi*AbsSqr(KappaPr)*Conj(ZH(gI1,4))*
      KroneckerDelta(4,gO2)*ZA(gI2,4) - 28.284271247461902*MuPhi*Conj(KappaPr)*
      Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*ZA(gI2,4) + 28.284271247461902*Conj(
      TKappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*ZA(gI2,4) + 20*vphi*Conj(
      Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*KappaPr*ZA(gI2,4) + 20*vsb*
      Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*KappaPr*ZA(gI2,4) + 20*
      vphi*Conj(Sigmax)*Conj(ZH(gI1,2))*KroneckerDelta(3,gO2)*KappaPr*ZA(gI2,4) +
      20*vs*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*KappaPr*ZA(gI2,4) -
      20*vsb*Conj(Sigmax)*Conj(ZH(gI1,2))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,4)
      - 20*vs*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,4
      ) - 28.284271247461902*Conj(MuPhi)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*
      KappaPr*ZA(gI2,4) - 10*vu*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(0,gO2)
      *Lambdax*ZA(gI2,4) - 10*vd*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(1,gO2
      )*Lambdax*ZA(gI2,4) - 10*vu*Conj(Lambdax)*Conj(ZH(gI1,3))*KroneckerDelta(0,
      gO2)*Sigmax*ZA(gI2,4) - 10*vd*Conj(Lambdax)*Conj(ZH(gI1,3))*KroneckerDelta(1
      ,gO2)*Sigmax*ZA(gI2,4) + 14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,3))*
      KroneckerDelta(2,gO2)*Sigmax*ZA(gI2,4) + 20*vphi*Conj(KappaPr)*Conj(ZH(gI1,3
      ))*KroneckerDelta(2,gO2)*Sigmax*ZA(gI2,4) + 20*vsb*Conj(KappaPr)*Conj(ZH(gI1
      ,4))*KroneckerDelta(2,gO2)*Sigmax*ZA(gI2,4) + 14.142135623730951*Conj(MuPhi)
      *Conj(ZH(gI1,2))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) + 20*vphi*Conj(
      KappaPr)*Conj(ZH(gI1,2))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) + 20*vs*Conj
      (KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) - 20*vsb*
      Conj(KappaPr)*Conj(ZH(gI1,2))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,4) - 20*vs
      *Conj(KappaPr)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,4) +
      28.284271247461902*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*TKappaPr*ZA(gI2,4)
      - 14.142135623730951*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*TSigmax*ZA(gI2,4)
      - 14.142135623730951*Conj(ZH(gI1,2))*KroneckerDelta(3,gO2)*TSigmax*ZA(gI2,4
      ) + 2*Conj(ZH(gI1,1))*(-7.0710678118654755*Conj(TLambdax)*KroneckerDelta(2,
      gO2)*ZA(gI2,0) - 5*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,0)
      - 5*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,0) - 5*vphi*Conj(
      Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,0) - 5*vsb*Conj(Lambdax)*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,0) - 7.0710678118654755*KroneckerDelta(2
      ,gO2)*TLambdax*ZA(gI2,0) - 3*vu*KroneckerDelta(1,gO2)*Sqr(g1)*ZA(gI2,1) - 2*
      vu*KroneckerDelta(1,gO2)*Sqr(g1p)*ZA(gI2,1) - 5*vu*KroneckerDelta(1,gO2)*Sqr
      (g2)*ZA(gI2,1) - 20*vu*AbsSqr(Lambdax)*KroneckerDelta(2,gO2)*ZA(gI2,2) + QS*
      vu*KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI2,2) + 5*vd*Conj(Sigmax)*
      KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,3) + 5*vd*Conj(Lambdax)*KroneckerDelta(
      4,gO2)*Sigmax*ZA(gI2,3) - QS*vu*KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI2,3) + 5
      *vd*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,4) + 5*vd*Conj(Lambdax
      )*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) + KroneckerDelta(0,gO2)*(vu*(-20*
      AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*ZA(gI2,0) - 5*(
      1.4142135623730951*Conj(TLambdax)*ZA(gI2,2) + 1.4142135623730951*TLambdax*ZA
      (gI2,2) + (Conj(Sigmax)*Lambdax + Conj(Lambdax)*Sigmax)*(vphi*ZA(gI2,3) +
      vsb*ZA(gI2,4))))) - Conj(ZH(gI1,0))*(vd*KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9
      *Sqr(g1p) + 10*Sqr(g2))*ZA(gI2,0) + 14.142135623730951*Conj(TLambdax)*
      KroneckerDelta(2,gO2)*ZA(gI2,1) + 10*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)
      *Lambdax*ZA(gI2,1) + 10*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(
      gI2,1) + 10*vphi*Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,1) + 10*
      vsb*Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,1) +
      14.142135623730951*KroneckerDelta(2,gO2)*TLambdax*ZA(gI2,1) + 40*vd*AbsSqr(
      Lambdax)*KroneckerDelta(2,gO2)*ZA(gI2,2) - 3*QS*vd*KroneckerDelta(2,gO2)*Sqr
      (g1p)*ZA(gI2,2) - 10*vu*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,3)
      - 10*vu*Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) + 3*QS*vd*
      KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI2,3) - 10*vu*Conj(Sigmax)*KroneckerDelta
      (3,gO2)*Lambdax*ZA(gI2,4) - 10*vu*Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax
      *ZA(gI2,4) + 2*KroneckerDelta(1,gO2)*(vd*(20*AbsSqr(Lambdax) - 3*Sqr(g1) + 3
      *Sqr(g1p) - 5*Sqr(g2))*ZA(gI2,1) + 5*(1.4142135623730951*Conj(TLambdax)*ZA(
      gI2,2) + 1.4142135623730951*TLambdax*ZA(gI2,2) + (Conj(Sigmax)*Lambdax +
      Conj(Lambdax)*Sigmax)*(vphi*ZA(gI2,3) + vsb*ZA(gI2,4))))));

   return result;
}

std::complex<double> CLASSNAME::CpUAhhhhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.25)*(1.4142135623730951*MuPhi*Conj(Sigmax
      )*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO2) + 1.4142135623730951
      *Conj(TSigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO2) +
      1.4142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(2,gO2) + 1.4142135623730951*Conj(TSigmax)*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,4))*KroneckerDelta(2,gO2) + 1.4142135623730951*Conj(TLambdax)*(
      Conj(ZH(gI1,2))*(Conj(ZH(gI2,1))*KroneckerDelta(0,gO2) + Conj(ZH(gI2,0))*
      KroneckerDelta(1,gO2)) + Conj(ZH(gI1,1))*(Conj(ZH(gI2,2))*KroneckerDelta(0,
      gO2) + Conj(ZH(gI2,0))*KroneckerDelta(2,gO2)) + Conj(ZH(gI1,0))*(Conj(ZH(gI2
      ,2))*KroneckerDelta(1,gO2) + Conj(ZH(gI2,1))*KroneckerDelta(2,gO2))) +
      1.4142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*
      KroneckerDelta(3,gO2) + 1.4142135623730951*Conj(TSigmax)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,2))*KroneckerDelta(3,gO2) + 1.4142135623730951*MuPhi*Conj(Sigmax
      )*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) + 1.4142135623730951
      *Conj(TSigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) -
      1.4142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*
      KroneckerDelta(4,gO2) + 1.4142135623730951*Conj(TSigmax)*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,2))*KroneckerDelta(4,gO2) - 1.4142135623730951*MuPhi*Conj(Sigmax
      )*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) + 1.4142135623730951
      *Conj(TSigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) -
      2.8284271247461903*MuPhi*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*
      KroneckerDelta(4,gO2) - 2.8284271247461903*Conj(TKappaPr)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,4))*KroneckerDelta(4,gO2) + 2*vphi*Conj(Sigmax)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*KappaPr + 2*vphi*Conj(Sigmax)*Conj(ZH(
      gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KappaPr + 2*vsb*Conj(Sigmax)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KappaPr + 2*vphi*Conj(
      Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*KappaPr + 2*
      vphi*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*
      KappaPr + 2*vs*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(3
      ,gO2)*KappaPr - 2*vphi*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*
      KroneckerDelta(4,gO2)*KappaPr - 2*vsb*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(
      gI2,2))*KroneckerDelta(4,gO2)*KappaPr - 2*vphi*Conj(Sigmax)*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*KappaPr - 2*vs*Conj(Sigmax)*Conj(ZH(
      gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*KappaPr - 2*vsb*Conj(Sigmax)*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*KappaPr - 2*vs*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*KappaPr +
      2.8284271247461903*Conj(MuPhi)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*
      KroneckerDelta(4,gO2)*KappaPr + vphi*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(
      gI2,1))*KroneckerDelta(0,gO2)*Lambdax + vsb*Conj(Sigmax)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*Lambdax + vphi*Conj(Sigmax)*Conj(ZH(
      gI1,1))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*Lambdax + vu*Conj(Sigmax)*Conj
      (ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*Lambdax + vsb*Conj(Sigmax)
      *Conj(ZH(gI1,1))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*Lambdax + vu*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*Lambdax + vphi
      *Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*Lambdax
      + vsb*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*
      Lambdax + vphi*Conj(Sigmax)*Conj(ZH(gI1,0))*Conj(ZH(gI2,3))*KroneckerDelta(1
      ,gO2)*Lambdax + vd*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(1,gO2)*Lambdax + vsb*Conj(Sigmax)*Conj(ZH(gI1,0))*Conj(ZH(gI2
      ,4))*KroneckerDelta(1,gO2)*Lambdax + vd*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,4))*KroneckerDelta(1,gO2)*Lambdax - vphi*Conj(Sigmax)*Conj(ZH(gI1,1))*
      Conj(ZH(gI2,0))*KroneckerDelta(3,gO2)*Lambdax - vu*Conj(Sigmax)*Conj(ZH(gI1,
      4))*Conj(ZH(gI2,0))*KroneckerDelta(3,gO2)*Lambdax - vphi*Conj(Sigmax)*Conj(
      ZH(gI1,0))*Conj(ZH(gI2,1))*KroneckerDelta(3,gO2)*Lambdax - vd*Conj(Sigmax)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(3,gO2)*Lambdax - vu*Conj(
      Sigmax)*Conj(ZH(gI1,0))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Lambdax - vd*
      Conj(Sigmax)*Conj(ZH(gI1,1))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Lambdax -
      vsb*Conj(Sigmax)*Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*KroneckerDelta(4,gO2)*
      Lambdax - vu*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(4,
      gO2)*Lambdax - vsb*Conj(Sigmax)*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*
      KroneckerDelta(4,gO2)*Lambdax - vd*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      1))*KroneckerDelta(4,gO2)*Lambdax - vu*Conj(Sigmax)*Conj(ZH(gI1,0))*Conj(ZH(
      gI2,3))*KroneckerDelta(4,gO2)*Lambdax - vd*Conj(Sigmax)*Conj(ZH(gI1,1))*Conj
      (ZH(gI2,3))*KroneckerDelta(4,gO2)*Lambdax - 1.4142135623730951*Conj(MuPhi)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*Sigmax - 2*vphi*Conj(
      KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*Sigmax -
      1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(2,gO2)*Sigmax - 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(
      gI2,4))*KroneckerDelta(2,gO2)*Sigmax - 2*vsb*Conj(KappaPr)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*Sigmax - 1.4142135623730951*Conj(MuPhi
      )*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*Sigmax - 2*vphi*Conj
      (KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*Sigmax -
      1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*
      KroneckerDelta(3,gO2)*Sigmax - 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH(
      gI2,4))*KroneckerDelta(3,gO2)*Sigmax - 2*vs*Conj(KappaPr)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Sigmax + 1.4142135623730951*Conj(MuPhi
      )*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*Sigmax + 2*vphi*Conj
      (KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*Sigmax + 2*
      vsb*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*
      Sigmax + 1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*
      KroneckerDelta(4,gO2)*Sigmax + 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH(
      gI2,3))*KroneckerDelta(4,gO2)*Sigmax + 2*vs*Conj(KappaPr)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*Sigmax + 2*vsb*Conj(KappaPr)*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*Sigmax + 2*vs*Conj(KappaPr)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*Sigmax + Conj(Lambdax)
      *(-(vphi*Conj(ZH(gI1,1))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)) - vsb*Conj(
      ZH(gI1,1))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2) - vphi*Conj(ZH(gI1,0))*Conj
      (ZH(gI2,3))*KroneckerDelta(1,gO2) - vsb*Conj(ZH(gI1,0))*Conj(ZH(gI2,4))*
      KroneckerDelta(1,gO2) + vphi*Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*KroneckerDelta(
      3,gO2) + vphi*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*KroneckerDelta(3,gO2) + vu*
      Conj(ZH(gI1,0))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) + vd*Conj(ZH(gI1,1))*
      Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) - Conj(ZH(gI1,4))*(Conj(ZH(gI2,3))*(vu
      *KroneckerDelta(0,gO2) + vd*KroneckerDelta(1,gO2)) + Conj(ZH(gI2,1))*(vsb*
      KroneckerDelta(0,gO2) - vd*KroneckerDelta(3,gO2)) + Conj(ZH(gI2,0))*(vsb*
      KroneckerDelta(1,gO2) - vu*KroneckerDelta(3,gO2))) + vsb*Conj(ZH(gI1,1))*
      Conj(ZH(gI2,0))*KroneckerDelta(4,gO2) + vsb*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*
      KroneckerDelta(4,gO2) + vu*Conj(ZH(gI1,0))*Conj(ZH(gI2,3))*KroneckerDelta(4,
      gO2) + vd*Conj(ZH(gI1,1))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) - Conj(ZH(
      gI1,3))*(Conj(ZH(gI2,4))*(vu*KroneckerDelta(0,gO2) + vd*KroneckerDelta(1,gO2
      )) + Conj(ZH(gI2,1))*(vphi*KroneckerDelta(0,gO2) - vd*KroneckerDelta(4,gO2))
      + Conj(ZH(gI2,0))*(vphi*KroneckerDelta(1,gO2) - vu*KroneckerDelta(4,gO2))))
      *Sigmax + 2.8284271247461903*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(
      4,gO2)*TKappaPr - 1.4142135623730951*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
      KroneckerDelta(0,gO2)*TLambdax - 1.4142135623730951*Conj(ZH(gI1,1))*Conj(ZH(
      gI2,2))*KroneckerDelta(0,gO2)*TLambdax - 1.4142135623730951*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*TLambdax - 1.4142135623730951*Conj(ZH(
      gI1,0))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO2)*TLambdax - 1.4142135623730951*
      Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*KroneckerDelta(2,gO2)*TLambdax -
      1.4142135623730951*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*KroneckerDelta(2,gO2)*
      TLambdax - 1.4142135623730951*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta
      (2,gO2)*TSigmax - 1.4142135623730951*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(2,gO2)*TSigmax - 1.4142135623730951*Conj(ZH(gI1,4))*Conj(ZH(
      gI2,2))*KroneckerDelta(3,gO2)*TSigmax - 1.4142135623730951*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*TSigmax - 1.4142135623730951*Conj(ZH(
      gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*TSigmax - 1.4142135623730951*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*TSigmax);

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1921;
   std::complex<double> tmp_1922;
   std::complex<double> tmp_1923;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1923 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1922 += tmp_1923;
   tmp_1921 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_1922;
   std::complex<double> tmp_1924;
   std::complex<double> tmp_1925;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1925 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1924 += tmp_1925;
   tmp_1921 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_1924;
   std::complex<double> tmp_1926;
   std::complex<double> tmp_1927;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1927 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1926 += tmp_1927;
   tmp_1921 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_1926;
   std::complex<double> tmp_1928;
   std::complex<double> tmp_1929;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1929 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1928 += tmp_1929;
   tmp_1921 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_1928;
   std::complex<double> tmp_1930;
   std::complex<double> tmp_1931;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1931 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1930 += tmp_1931;
   tmp_1921 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_1930;
   std::complex<double> tmp_1932;
   std::complex<double> tmp_1933;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1933 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1932 += tmp_1933;
   tmp_1921 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_1932;
   std::complex<double> tmp_1934;
   std::complex<double> tmp_1935;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1935 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1934 += tmp_1935;
   tmp_1921 += (std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_1934;
   std::complex<double> tmp_1936;
   std::complex<double> tmp_1937;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1937 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1936 += tmp_1937;
   tmp_1921 += (std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_1936;
   std::complex<double> tmp_1938;
   std::complex<double> tmp_1939;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1939 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_1938 += tmp_1939;
   tmp_1921 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_1938;
   std::complex<double> tmp_1940;
   std::complex<double> tmp_1941;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1941 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_1940 += tmp_1941;
   tmp_1921 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_1940;
   std::complex<double> tmp_1942;
   std::complex<double> tmp_1943;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1943 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1942 += tmp_1943;
   tmp_1921 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_1942;
   std::complex<double> tmp_1944;
   std::complex<double> tmp_1945;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1945 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1944 += tmp_1945;
   tmp_1921 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_1944;
   std::complex<double> tmp_1946;
   std::complex<double> tmp_1947;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1947 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1946 += tmp_1947;
   tmp_1921 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_1946;
   std::complex<double> tmp_1948;
   std::complex<double> tmp_1949;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1949 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1948 += tmp_1949;
   tmp_1921 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_1948;
   std::complex<double> tmp_1950;
   std::complex<double> tmp_1951;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1951 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1950 += tmp_1951;
   tmp_1921 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_1950;
   std::complex<double> tmp_1952;
   std::complex<double> tmp_1953;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1953 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1952 += tmp_1953;
   tmp_1921 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_1952;
   std::complex<double> tmp_1954;
   std::complex<double> tmp_1955;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1955 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_1954 += tmp_1955;
   tmp_1921 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2
      )*KroneckerDelta(2,gO1)) * tmp_1954;
   std::complex<double> tmp_1956;
   std::complex<double> tmp_1957;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1957 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_1956 += tmp_1957;
   tmp_1921 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1
      )*KroneckerDelta(2,gO2)) * tmp_1956;
   std::complex<double> tmp_1958;
   std::complex<double> tmp_1959;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1959 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_1958 += tmp_1959;
   tmp_1921 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_1958;
   std::complex<double> tmp_1960;
   std::complex<double> tmp_1961;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1961 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_1960 += tmp_1961;
   tmp_1921 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_1960;
   result += (std::complex<double>(0,-1)) * tmp_1921;

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_1962;
   std::complex<double> tmp_1963;
   std::complex<double> tmp_1964;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1964 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1963 += tmp_1964;
   tmp_1962 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_1963;
   std::complex<double> tmp_1965;
   std::complex<double> tmp_1966;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1966 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1965 += tmp_1966;
   tmp_1962 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_1965;
   std::complex<double> tmp_1967;
   std::complex<double> tmp_1968;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1968 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1967 += tmp_1968;
   tmp_1962 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_1967;
   std::complex<double> tmp_1969;
   std::complex<double> tmp_1970;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1970 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1969 += tmp_1970;
   tmp_1962 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_1969;
   std::complex<double> tmp_1971;
   std::complex<double> tmp_1972;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1972 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1971 += tmp_1972;
   tmp_1962 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_1971;
   std::complex<double> tmp_1973;
   std::complex<double> tmp_1974;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1974 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1973 += tmp_1974;
   tmp_1962 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_1973;
   std::complex<double> tmp_1975;
   std::complex<double> tmp_1976;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1976 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_1975 += tmp_1976;
   tmp_1962 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_1975;
   std::complex<double> tmp_1977;
   std::complex<double> tmp_1978;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1978 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_1977 += tmp_1978;
   tmp_1962 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_1977;
   std::complex<double> tmp_1979;
   std::complex<double> tmp_1980;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1980 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_1979 += tmp_1980;
   tmp_1962 += (std::complex<double>(0,-0.5)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax) * tmp_1979;
   std::complex<double> tmp_1981;
   std::complex<double> tmp_1982;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1982 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_1981 += tmp_1982;
   tmp_1962 += (std::complex<double>(0,-0.5)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax) * tmp_1981;
   std::complex<double> tmp_1983;
   std::complex<double> tmp_1984;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1984 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1983 += tmp_1984;
   tmp_1962 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_1983;
   std::complex<double> tmp_1985;
   std::complex<double> tmp_1986;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1986 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1985 += tmp_1986;
   tmp_1962 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_1985;
   std::complex<double> tmp_1987;
   std::complex<double> tmp_1988;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1988 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1987 += tmp_1988;
   tmp_1962 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_1987;
   std::complex<double> tmp_1989;
   std::complex<double> tmp_1990;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1990 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1989 += tmp_1990;
   tmp_1962 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_1989;
   std::complex<double> tmp_1991;
   std::complex<double> tmp_1992;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1992 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1991 += tmp_1992;
   tmp_1962 += (std::complex<double>(0,0.075)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_1991;
   std::complex<double> tmp_1993;
   std::complex<double> tmp_1994;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1994 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1993 += tmp_1994;
   tmp_1962 += (std::complex<double>(0,-0.075)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_1993;
   std::complex<double> tmp_1995;
   std::complex<double> tmp_1996;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1996 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_1995 += tmp_1996;
   tmp_1962 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2
      )*KroneckerDelta(1,gO1)) * tmp_1995;
   std::complex<double> tmp_1997;
   std::complex<double> tmp_1998;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1998 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_1997 += tmp_1998;
   tmp_1962 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1
      )*KroneckerDelta(1,gO2)) * tmp_1997;
   std::complex<double> tmp_1999;
   std::complex<double> tmp_2000;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2000 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_1999 += tmp_2000;
   tmp_1962 += (std::complex<double>(0,-0.5)*Conj(Sigmax)*KroneckerDelta(3,gO2)
      *KroneckerDelta(4,gO1)) * tmp_1999;
   std::complex<double> tmp_2001;
   std::complex<double> tmp_2002;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2002 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2001 += tmp_2002;
   tmp_1962 += (std::complex<double>(0,-0.5)*Conj(Sigmax)*KroneckerDelta(3,gO1)
      *KroneckerDelta(4,gO2)) * tmp_2001;
   std::complex<double> tmp_2003;
   std::complex<double> tmp_2004;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2004 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_2003 += tmp_2004;
   tmp_1962 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2003;
   std::complex<double> tmp_2005;
   std::complex<double> tmp_2006;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2006 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2)
         ;
   }
   tmp_2005 += tmp_2006;
   tmp_1962 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2005;
   result += (std::complex<double>(0,-1)) * tmp_1962;

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_2007;
   std::complex<double> tmp_2008;
   std::complex<double> tmp_2009;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2009 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2008 += tmp_2009;
   tmp_2007 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2008;
   std::complex<double> tmp_2010;
   std::complex<double> tmp_2011;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2011 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2010 += tmp_2011;
   tmp_2007 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2010;
   std::complex<double> tmp_2012;
   std::complex<double> tmp_2013;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2013 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2012 += tmp_2013;
   tmp_2007 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2012;
   std::complex<double> tmp_2014;
   std::complex<double> tmp_2015;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2015 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2014 += tmp_2015;
   tmp_2007 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2014;
   std::complex<double> tmp_2016;
   std::complex<double> tmp_2017;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2017 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2016 += tmp_2017;
   tmp_2007 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2016;
   std::complex<double> tmp_2018;
   std::complex<double> tmp_2019;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2019 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2018 += tmp_2019;
   tmp_2007 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2018;
   std::complex<double> tmp_2020;
   std::complex<double> tmp_2021;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2021 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2020 += tmp_2021;
   tmp_2007 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2020;
   std::complex<double> tmp_2022;
   std::complex<double> tmp_2023;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2023 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2022 += tmp_2023;
   tmp_2007 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2022;
   std::complex<double> tmp_2024;
   std::complex<double> tmp_2025;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2025 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2024 += tmp_2025;
   tmp_2007 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_2024;
   std::complex<double> tmp_2026;
   std::complex<double> tmp_2027;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2027 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2026 += tmp_2027;
   tmp_2007 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_2026;
   std::complex<double> tmp_2028;
   std::complex<double> tmp_2029;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2029 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2028 += tmp_2029;
   tmp_2007 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2028;
   std::complex<double> tmp_2030;
   std::complex<double> tmp_2031;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2031 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2030 += tmp_2031;
   tmp_2007 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2030;
   std::complex<double> tmp_2032;
   std::complex<double> tmp_2033;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2033 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2032 += tmp_2033;
   tmp_2007 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2032;
   std::complex<double> tmp_2034;
   std::complex<double> tmp_2035;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2035 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2034 += tmp_2035;
   tmp_2007 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2034;
   std::complex<double> tmp_2036;
   std::complex<double> tmp_2037;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2037 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2036 += tmp_2037;
   tmp_2007 += (std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2036;
   std::complex<double> tmp_2038;
   std::complex<double> tmp_2039;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2039 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2038 += tmp_2039;
   tmp_2007 += (std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2038;
   std::complex<double> tmp_2040;
   std::complex<double> tmp_2041;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2041 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2040 += tmp_2041;
   tmp_2007 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2
      )*KroneckerDelta(2,gO1)) * tmp_2040;
   std::complex<double> tmp_2042;
   std::complex<double> tmp_2043;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2043 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2042 += tmp_2043;
   tmp_2007 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1
      )*KroneckerDelta(2,gO2)) * tmp_2042;
   std::complex<double> tmp_2044;
   std::complex<double> tmp_2045;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2045 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_2044 += tmp_2045;
   tmp_2007 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2044;
   std::complex<double> tmp_2046;
   std::complex<double> tmp_2047;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2047 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_2046 += tmp_2047;
   tmp_2007 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2046;
   result += (std::complex<double>(0,-1)) * tmp_2007;

   return result;
}

std::complex<double> CLASSNAME::CpUAhUAhconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   std::complex<double> tmp_2048;
   std::complex<double> tmp_2049;
   std::complex<double> tmp_2050;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2050 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2049 += tmp_2050;
   tmp_2048 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2049;
   std::complex<double> tmp_2051;
   std::complex<double> tmp_2052;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2052 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2051 += tmp_2052;
   tmp_2048 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2051;
   std::complex<double> tmp_2053;
   std::complex<double> tmp_2054;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2054 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2053 += tmp_2054;
   tmp_2048 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2053;
   std::complex<double> tmp_2055;
   std::complex<double> tmp_2056;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2056 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2055 += tmp_2056;
   tmp_2048 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2055;
   std::complex<double> tmp_2057;
   std::complex<double> tmp_2058;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2058 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2057 += tmp_2058;
   tmp_2048 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2057;
   std::complex<double> tmp_2059;
   std::complex<double> tmp_2060;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2060 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2059 += tmp_2060;
   tmp_2048 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2059;
   std::complex<double> tmp_2061;
   std::complex<double> tmp_2062;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2062 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2061 += tmp_2062;
   tmp_2048 += (std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2061;
   std::complex<double> tmp_2063;
   std::complex<double> tmp_2064;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2064 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2063 += tmp_2064;
   tmp_2048 += (std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2063;
   std::complex<double> tmp_2065;
   std::complex<double> tmp_2066;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2066 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2065 += tmp_2066;
   tmp_2048 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_2065;
   std::complex<double> tmp_2067;
   std::complex<double> tmp_2068;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2068 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2067 += tmp_2068;
   tmp_2048 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_2067;
   std::complex<double> tmp_2069;
   std::complex<double> tmp_2070;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2070 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2069 += tmp_2070;
   tmp_2048 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2069;
   std::complex<double> tmp_2071;
   std::complex<double> tmp_2072;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2072 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2071 += tmp_2072;
   tmp_2048 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2071;
   std::complex<double> tmp_2073;
   std::complex<double> tmp_2074;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2074 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2073 += tmp_2074;
   tmp_2048 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2073;
   std::complex<double> tmp_2075;
   std::complex<double> tmp_2076;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2076 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2075 += tmp_2076;
   tmp_2048 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2075;
   std::complex<double> tmp_2077;
   std::complex<double> tmp_2078;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2078 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2077 += tmp_2078;
   tmp_2048 += (std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2077;
   std::complex<double> tmp_2079;
   std::complex<double> tmp_2080;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2080 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2079 += tmp_2080;
   tmp_2048 += (std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2079;
   std::complex<double> tmp_2081;
   std::complex<double> tmp_2082;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2082 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2081 += tmp_2082;
   tmp_2048 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2
      )*KroneckerDelta(2,gO1)) * tmp_2081;
   std::complex<double> tmp_2083;
   std::complex<double> tmp_2084;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2084 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2083 += tmp_2084;
   tmp_2048 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1
      )*KroneckerDelta(2,gO2)) * tmp_2083;
   std::complex<double> tmp_2085;
   std::complex<double> tmp_2086;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2086 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_2085 += tmp_2086;
   tmp_2048 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_2085;
   std::complex<double> tmp_2087;
   std::complex<double> tmp_2088;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2088 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_2087 += tmp_2088;
   tmp_2048 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_2087;
   result += (std::complex<double>(0,-1)) * tmp_2048;

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjSdSd(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2089;
   std::complex<double> tmp_2090;
   std::complex<double> tmp_2091;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2091 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2090 += tmp_2091;
   tmp_2089 += (-0.5*vs*KroneckerDelta(1,gO2)*Lambdax) * tmp_2090;
   std::complex<double> tmp_2092;
   std::complex<double> tmp_2093;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2093 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2092 += tmp_2093;
   tmp_2089 += (-0.5*vu*KroneckerDelta(2,gO2)*Lambdax) * tmp_2092;
   std::complex<double> tmp_2094;
   std::complex<double> tmp_2095;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2095 += Conj(ZD(gI2,3 + j1))*Conj(TYd(j1,j1))*ZD(gI1,j1);
   }
   tmp_2094 += tmp_2095;
   tmp_2089 += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_2094;
   std::complex<double> tmp_2096;
   std::complex<double> tmp_2097;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2097 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2096 += tmp_2097;
   tmp_2089 += (0.5*vs*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_2096;
   std::complex<double> tmp_2098;
   std::complex<double> tmp_2099;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2099 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2098 += tmp_2099;
   tmp_2089 += (0.5*vu*Conj(Lambdax)*KroneckerDelta(2,gO2)) * tmp_2098;
   std::complex<double> tmp_2100;
   std::complex<double> tmp_2101;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2101 += Conj(ZD(gI2,j1))*ZD(gI1,3 + j1)*TYd(j1,j1);
   }
   tmp_2100 += tmp_2101;
   tmp_2089 += (0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_2100;
   result += (std::complex<double>(0,-1)) * tmp_2089;

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjSDXSDX(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2102;
   std::complex<double> tmp_2103;
   std::complex<double> tmp_2104;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2104 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2103 += tmp_2104;
   tmp_2102 += (-0.5*vu*KroneckerDelta(0,gO2)*Lambdax) * tmp_2103;
   std::complex<double> tmp_2105;
   std::complex<double> tmp_2106;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2106 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2105 += tmp_2106;
   tmp_2102 += (-0.5*vd*KroneckerDelta(1,gO2)*Lambdax) * tmp_2105;
   std::complex<double> tmp_2107;
   std::complex<double> tmp_2108;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2108 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2107 += tmp_2108;
   tmp_2102 += (-0.5*vphi*KroneckerDelta(3,gO2)*Sigmax) * tmp_2107;
   std::complex<double> tmp_2109;
   std::complex<double> tmp_2110;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2110 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2109 += tmp_2110;
   tmp_2102 += (-0.5*vsb*KroneckerDelta(4,gO2)*Sigmax) * tmp_2109;
   std::complex<double> tmp_2111;
   std::complex<double> tmp_2112;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2112 += Conj(ZDX(gI2,3 + j1))*Conj(TKappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2111 += tmp_2112;
   tmp_2102 += (-0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_2111;
   std::complex<double> tmp_2113;
   std::complex<double> tmp_2114;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2114 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2113 += tmp_2114;
   tmp_2102 += (0.5*vu*Conj(Lambdax)*KroneckerDelta(0,gO2)) * tmp_2113;
   std::complex<double> tmp_2115;
   std::complex<double> tmp_2116;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2116 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2115 += tmp_2116;
   tmp_2102 += (0.5*vd*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_2115;
   std::complex<double> tmp_2117;
   std::complex<double> tmp_2118;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2118 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2117 += tmp_2118;
   tmp_2102 += (0.5*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)) * tmp_2117;
   std::complex<double> tmp_2119;
   std::complex<double> tmp_2120;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2120 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2119 += tmp_2120;
   tmp_2102 += (0.5*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)) * tmp_2119;
   std::complex<double> tmp_2121;
   std::complex<double> tmp_2122;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2122 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*TKappa(j1,j1);
   }
   tmp_2121 += tmp_2122;
   tmp_2102 += (0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_2121;
   result += (std::complex<double>(0,-1)) * tmp_2102;

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjSeSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2123;
   std::complex<double> tmp_2124;
   std::complex<double> tmp_2125;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2125 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2124 += tmp_2125;
   tmp_2123 += (-0.5*vs*KroneckerDelta(1,gO2)*Lambdax) * tmp_2124;
   std::complex<double> tmp_2126;
   std::complex<double> tmp_2127;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2127 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2126 += tmp_2127;
   tmp_2123 += (-0.5*vu*KroneckerDelta(2,gO2)*Lambdax) * tmp_2126;
   std::complex<double> tmp_2128;
   std::complex<double> tmp_2129;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2129 += Conj(ZE(gI2,3 + j1))*Conj(TYe(j1,j1))*ZE(gI1,j1);
   }
   tmp_2128 += tmp_2129;
   tmp_2123 += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_2128;
   std::complex<double> tmp_2130;
   std::complex<double> tmp_2131;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2131 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2130 += tmp_2131;
   tmp_2123 += (0.5*vs*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_2130;
   std::complex<double> tmp_2132;
   std::complex<double> tmp_2133;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2133 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2132 += tmp_2133;
   tmp_2123 += (0.5*vu*Conj(Lambdax)*KroneckerDelta(2,gO2)) * tmp_2132;
   std::complex<double> tmp_2134;
   std::complex<double> tmp_2135;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2135 += Conj(ZE(gI2,j1))*ZE(gI1,3 + j1)*TYe(j1,j1);
   }
   tmp_2134 += tmp_2135;
   tmp_2123 += (0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_2134;
   result += (std::complex<double>(0,-1)) * tmp_2123;

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjSuSu(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2136;
   std::complex<double> tmp_2137;
   std::complex<double> tmp_2138;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2138 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2137 += tmp_2138;
   tmp_2136 += (-0.5*vs*KroneckerDelta(0,gO2)*Lambdax) * tmp_2137;
   std::complex<double> tmp_2139;
   std::complex<double> tmp_2140;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2140 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2139 += tmp_2140;
   tmp_2136 += (-0.5*vd*KroneckerDelta(2,gO2)*Lambdax) * tmp_2139;
   std::complex<double> tmp_2141;
   std::complex<double> tmp_2142;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2142 += Conj(ZU(gI2,3 + j1))*Conj(TYu(j1,j1))*ZU(gI1,j1);
   }
   tmp_2141 += tmp_2142;
   tmp_2136 += (-0.7071067811865475*KroneckerDelta(1,gO2)) * tmp_2141;
   std::complex<double> tmp_2143;
   std::complex<double> tmp_2144;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2144 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2143 += tmp_2144;
   tmp_2136 += (0.5*vs*Conj(Lambdax)*KroneckerDelta(0,gO2)) * tmp_2143;
   std::complex<double> tmp_2145;
   std::complex<double> tmp_2146;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2146 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2145 += tmp_2146;
   tmp_2136 += (0.5*vd*Conj(Lambdax)*KroneckerDelta(2,gO2)) * tmp_2145;
   std::complex<double> tmp_2147;
   std::complex<double> tmp_2148;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2148 += Conj(ZU(gI2,j1))*ZU(gI1,3 + j1)*TYu(j1,j1);
   }
   tmp_2147 += tmp_2148;
   tmp_2136 += (0.7071067811865475*KroneckerDelta(1,gO2)) * tmp_2147;
   result += (std::complex<double>(0,-1)) * tmp_2136;

   return result;
}

std::complex<double> CLASSNAME::CpUAhChiChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = std::complex<double>(0,-0.05)*(1.4142135623730951*(10*Conj(Lambdax)
      *KroneckerDelta(2,gO2)*(ZN(gI1,3)*ZN(gI2,2) + ZN(gI1,2)*ZN(gI2,3)) +
      2.23606797749979*g1p*QS*KroneckerDelta(2,gO2)*ZN(gI1,7)*ZN(gI2,4) -
      2.23606797749979*g1p*QS*KroneckerDelta(3,gO2)*ZN(gI1,7)*ZN(gI2,5) - 20*Conj(
      KappaPr)*KroneckerDelta(4,gO2)*ZN(gI1,6)*ZN(gI2,6) + 10*Conj(Sigmax)*(
      KroneckerDelta(4,gO2)*(ZN(gI1,5)*ZN(gI2,4) + ZN(gI1,4)*ZN(gI2,5)) +
      KroneckerDelta(3,gO2)*(ZN(gI1,6)*ZN(gI2,4) + ZN(gI1,4)*ZN(gI2,6)) +
      KroneckerDelta(2,gO2)*(ZN(gI1,6)*ZN(gI2,5) + ZN(gI1,5)*ZN(gI2,6))) +
      2.23606797749979*g1p*QS*KroneckerDelta(2,gO2)*ZN(gI1,4)*ZN(gI2,7) -
      2.23606797749979*g1p*QS*KroneckerDelta(3,gO2)*ZN(gI1,5)*ZN(gI2,7)) +
      KroneckerDelta(0,gO2)*(-7.745966692414834*g1*ZN(gI1,0)*ZN(gI2,2) + 10*g2*ZN(
      gI1,1)*ZN(gI2,2) - 9.486832980505138*g1p*ZN(gI1,7)*ZN(gI2,2) +
      14.142135623730951*Conj(Lambdax)*ZN(gI1,4)*ZN(gI2,3) + 14.142135623730951*
      Conj(Lambdax)*ZN(gI1,3)*ZN(gI2,4) + ZN(gI1,2)*(-7.745966692414834*g1*ZN(gI2,
      0) + 10*g2*ZN(gI2,1) - 9.486832980505138*g1p*ZN(gI2,7))) + 2*KroneckerDelta(
      1,gO2)*((3.872983346207417*g1*ZN(gI1,0) - 5*g2*ZN(gI1,1) -
      3.1622776601683795*g1p*ZN(gI1,7))*ZN(gI2,3) + 7.0710678118654755*Conj(
      Lambdax)*(ZN(gI1,4)*ZN(gI2,2) + ZN(gI1,2)*ZN(gI2,4)) + ZN(gI1,3)*(
      3.872983346207417*g1*ZN(gI2,0) - 5*g2*ZN(gI2,1) - 3.1622776601683795*g1p*ZN(
      gI2,7))));

   return result;
}

std::complex<double> CLASSNAME::CpUAhChiChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(10*g2*Conj(ZN(gI1,1))*Conj(ZN(gI2,2))
      *KroneckerDelta(0,gO1) - 9.486832980505138*g1p*Conj(ZN(gI1,7))*Conj(ZN(gI2,2
      ))*KroneckerDelta(0,gO1) + 7.745966692414834*g1*Conj(ZN(gI1,3))*Conj(ZN(gI2,
      0))*KroneckerDelta(1,gO1) - 10*g2*Conj(ZN(gI1,3))*Conj(ZN(gI2,1))*
      KroneckerDelta(1,gO1) - 10*g2*Conj(ZN(gI1,1))*Conj(ZN(gI2,3))*KroneckerDelta
      (1,gO1) - 6.324555320336759*g1p*Conj(ZN(gI1,7))*Conj(ZN(gI2,3))*
      KroneckerDelta(1,gO1) - 6.324555320336759*g1p*Conj(ZN(gI1,3))*Conj(ZN(gI2,7)
      )*KroneckerDelta(1,gO1) + 7.745966692414834*g1*Conj(ZN(gI1,0))*(-(Conj(ZN(
      gI2,2))*KroneckerDelta(0,gO1)) + Conj(ZN(gI2,3))*KroneckerDelta(1,gO1)) +
      3.1622776601683795*g1p*QS*Conj(ZN(gI1,7))*Conj(ZN(gI2,4))*KroneckerDelta(2,
      gO1) + 3.1622776601683795*g1p*QS*Conj(ZN(gI1,4))*Conj(ZN(gI2,7))*
      KroneckerDelta(2,gO1) - 3.1622776601683795*g1p*QS*Conj(ZN(gI1,7))*Conj(ZN(
      gI2,5))*KroneckerDelta(3,gO1) - 3.1622776601683795*g1p*QS*Conj(ZN(gI1,5))*
      Conj(ZN(gI2,7))*KroneckerDelta(3,gO1) - 28.284271247461902*Conj(ZN(gI1,6))*
      Conj(ZN(gI2,6))*KroneckerDelta(4,gO1)*KappaPr + 14.142135623730951*Conj(ZN(
      gI1,4))*Conj(ZN(gI2,3))*KroneckerDelta(0,gO1)*Lambdax + 14.142135623730951*
      Conj(ZN(gI1,3))*Conj(ZN(gI2,4))*KroneckerDelta(0,gO1)*Lambdax +
      14.142135623730951*Conj(ZN(gI1,4))*Conj(ZN(gI2,2))*KroneckerDelta(1,gO1)*
      Lambdax + 14.142135623730951*Conj(ZN(gI1,3))*Conj(ZN(gI2,2))*KroneckerDelta(
      2,gO1)*Lambdax + Conj(ZN(gI1,2))*(-7.745966692414834*g1*Conj(ZN(gI2,0))*
      KroneckerDelta(0,gO1) + 10*g2*Conj(ZN(gI2,1))*KroneckerDelta(0,gO1) +
      1.4142135623730951*(-6.708203932499369*g1p*Conj(ZN(gI2,7))*KroneckerDelta(0,
      gO1) + 10*(Conj(ZN(gI2,4))*KroneckerDelta(1,gO1) + Conj(ZN(gI2,3))*
      KroneckerDelta(2,gO1))*Lambdax)) + 14.142135623730951*Conj(ZN(gI1,6))*Conj(
      ZN(gI2,5))*KroneckerDelta(2,gO1)*Sigmax + 14.142135623730951*Conj(ZN(gI1,5))
      *Conj(ZN(gI2,6))*KroneckerDelta(2,gO1)*Sigmax + 14.142135623730951*Conj(ZN(
      gI1,6))*Conj(ZN(gI2,4))*KroneckerDelta(3,gO1)*Sigmax + 14.142135623730951*
      Conj(ZN(gI1,4))*Conj(ZN(gI2,6))*KroneckerDelta(3,gO1)*Sigmax +
      14.142135623730951*Conj(ZN(gI1,5))*Conj(ZN(gI2,4))*KroneckerDelta(4,gO1)*
      Sigmax + 14.142135623730951*Conj(ZN(gI1,4))*Conj(ZN(gI2,5))*KroneckerDelta(4
      ,gO1)*Sigmax);

   return result;
}

std::complex<double> CLASSNAME::CpUAhconjVWmHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.5)*g2*(Conj(ZP(gI2,0))*KroneckerDelta(0,
      gO2) + Conj(ZP(gI2,1))*KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CLASSNAME::CpUAhVZhh(unsigned gO2, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = std::complex<double>(0,-0.05)*(3.1622776601683795*g1p*QS*(Conj(ZH(
      gI2,2))*KroneckerDelta(2,gO2) - Conj(ZH(gI2,3))*KroneckerDelta(3,gO2))*Sin(
      ThetaWp()) + Conj(ZH(gI2,0))*KroneckerDelta(0,gO2)*(10*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      9.486832980505138*g1p*Sin(ThetaWp())) - 2*Conj(ZH(gI2,1))*KroneckerDelta(1,
      gO2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp()
      )*Sin(ThetaW()) + 3.1622776601683795*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpUAhVZphh(unsigned gO2, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(3.1622776601683795*g1p*QS*Cos(ThetaWp
      ())*(-(Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)) + Conj(ZH(gI2,3))*
      KroneckerDelta(3,gO2)) + 2*Conj(ZH(gI2,1))*KroneckerDelta(1,gO2)*(
      3.1622776601683795*g1p*Cos(ThetaWp()) - (5*g2*Cos(ThetaW()) +
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())) + Conj(ZH(gI2,0))*
      KroneckerDelta(0,gO2)*(9.486832980505138*g1p*Cos(ThetaWp()) + 2*(5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVWmVP(unsigned gO2) const
{
   std::complex<double> result;

   result = -0.3872983346207417*g1*g2*Cos(ThetaW())*(vd*KroneckerDelta(0,gO2) -
      vu*KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVZVWm(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.11180339887498948*g2*(vd*KroneckerDelta(0,gO2)*(
      3.4641016151377544*g1*Cos(ThetaWp())*Sin(ThetaW()) - 4.242640687119286*g1p*
      Sin(ThetaWp())) - 2*vu*KroneckerDelta(1,gO2)*(1.7320508075688772*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 1.4142135623730951*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVZpVWm(unsigned gO2) const
{
   std::complex<double> result;

   result = -0.11180339887498948*g2*(2*vu*KroneckerDelta(1,gO2)*(
      1.4142135623730951*g1p*Cos(ThetaWp()) - 1.7320508075688772*g1*Sin(ThetaW())*
      Sin(ThetaWp())) + vd*KroneckerDelta(0,gO2)*(4.242640687119286*g1p*Cos(
      ThetaWp()) + 3.4641016151377544*g1*Sin(ThetaW())*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbargWmCgZ(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO1)*(-5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp())) + vd*KroneckerDelta(0,gO1)*(10*g2*Cos
      (ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()
      ) + 9.486832980505138*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmgWmCbargZ(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO2)*(5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp())) + vd*KroneckerDelta(0,gO2)*(-10*g2*
      Cos(ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(
      ThetaW()) + 9.486832980505138*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbargWmCgZp(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO1)*(3.1622776601683795*g1p*Cos(
      ThetaWp()) + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(
      ThetaWp())) + vd*KroneckerDelta(0,gO1)*(9.486832980505138*g1p*Cos(ThetaWp())
      + 2*(-5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp(
      ))));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmgWmCbargZp(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO2)*(3.1622776601683795*g1p*Cos(
      ThetaWp()) - (5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(
      ThetaWp())) + vd*KroneckerDelta(0,gO2)*(9.486832980505138*g1p*Cos(ThetaWp())
      + 2*(5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()
      )));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbargZgWm(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO1)*(5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp())) + vd*KroneckerDelta(0,gO1)*(-10*g2*
      Cos(ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(
      ThetaW()) + 9.486832980505138*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmgZbargWm(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO2)*(-5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp())) + vd*KroneckerDelta(0,gO2)*(10*g2*Cos
      (ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()
      ) + 9.486832980505138*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbargZpgWm(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO1)*(3.1622776601683795*g1p*Cos(
      ThetaWp()) - (5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(
      ThetaWp())) + vd*KroneckerDelta(0,gO1)*(9.486832980505138*g1p*Cos(ThetaWp())
      + 2*(5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()
      )));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmgZpbargWm(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO2)*(3.1622776601683795*g1p*Cos(
      ThetaWp()) + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(
      ThetaWp())) + vd*KroneckerDelta(0,gO2)*(9.486832980505138*g1p*Cos(ThetaWp())
      + 2*(-5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp(
      ))));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*(2*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(
      2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(2*ThetaWp()) + 5*Sqr(g2)*Sqr(Cos(
      ThetaW()))*Sqr(Cos(ThetaWp())) - 2*Cos(ThetaW())*(3.1622776601683795*g1p*g2*
      Cos(ThetaWp())*Sin(ThetaWp()) + 3.872983346207417*g1*g2*Sin(ThetaW())*Sqr(
      Cos(ThetaWp()))) + 3*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 2*Sqr(
      g1p)*Sqr(Sin(ThetaWp()))) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(
      -14.696938456699067*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 10*
      Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW())*(
      18.973665961010276*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) - 15.491933384829668
      *g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(Cos(ThetaWp()))*
      Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*(2*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(
      -4.898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) +
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp()) + 2*Sqr(g1p)*Sqr(
      Cos(ThetaWp())) - 7.745966692414834*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(
      Sin(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + 3*Sqr(
      g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()))) + KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*(Cos(ThetaWp())*(-18.973665961010276*g1p*g2*Cos(ThetaW
      ())*Sin(ThetaWp()) + 14.696938456699067*g1*g1p*Sin(ThetaW())*Sin(ThetaWp()))
      + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(-7.745966692414834*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW()) + 5*Sqr(g2)*Sqr(Cos(ThetaW())) + 3*Sqr(g1)*Sqr(Sin(ThetaW())
      ))*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZP(gI2,1))*(-2*KroneckerDelta(1,gO1)*KroneckerDelta(1,
      gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZP(gI1,1) + KroneckerDelta(0,gO1)*
      (-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*(KroneckerDelta(1
      ,gO2)*ZP(gI1,0) + KroneckerDelta(0,gO2)*ZP(gI1,1))) - Conj(ZP(gI2,0))*(
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr
      (g2))*ZP(gI1,0) - KroneckerDelta(1,gO1)*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3
      *Sqr(g1p) + 5*Sqr(g2))*(KroneckerDelta(1,gO2)*ZP(gI1,0) + KroneckerDelta(0,
      gO2)*ZP(gI1,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*
      Sqr(g1p) - 5*Sqr(g2)) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-3*Sqr(
      g1) - 2*Sqr(g1p) + 5*Sqr(g2)))*(Conj(UHp0(gI2,0))*UHp0(gI1,0) - Conj(UHp0(
      gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*
      Sqr(g1p) + 5*Sqr(g2)) - KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(
      g1) + 2*Sqr(g1p) + 5*Sqr(g2)))*(Conj(UHpp(gI2,0))*UHpp(gI1,0) - Conj(UHpp(
      gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmconjSHp0SHpp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.35355339059327373*(vd*KroneckerDelta(0,gO2) + vu*KroneckerDelta(
      1,gO2))*Sqr(g2)*(Conj(UHpp(gI2,0))*UHp0(gI1,0) + Conj(UHpp(gI2,1))*UHp0(gI1,
      1));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmHpmAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.25)*(Conj(ZP(gI1,0))*KroneckerDelta(1,gO2
      )*(-(vu*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZA(gI2,0)) - vd*(-2*AbsSqr(Lambdax) +
      Sqr(g2))*ZA(gI2,1) + 2*(1.4142135623730951*TLambdax*ZA(gI2,2) + Conj(Sigmax
      )*Lambdax*(vphi*ZA(gI2,3) + vsb*ZA(gI2,4)))) + Conj(ZP(gI1,1))*
      KroneckerDelta(0,gO2)*(vu*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZA(gI2,0) + vd*(-2*
      AbsSqr(Lambdax) + Sqr(g2))*ZA(gI2,1) - 2*(1.4142135623730951*Conj(TLambdax)*
      ZA(gI2,2) + Conj(Lambdax)*Sigmax*(vphi*ZA(gI2,3) + vsb*ZA(gI2,4)))));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmHpmhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-40*vs*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*Conj(ZP(gI1,0))*
      KroneckerDelta(0,gO2) - 28.284271247461902*Conj(TLambdax)*Conj(ZH(gI2,2))*
      Conj(ZP(gI1,1))*KroneckerDelta(0,gO2) - 40*vs*AbsSqr(Lambdax)*Conj(ZH(gI2,2)
      )*Conj(ZP(gI1,1))*KroneckerDelta(1,gO2) + 20*vphi*Conj(Sigmax)*Conj(ZH(gI2,3
      ))*Conj(ZP(gI1,0))*KroneckerDelta(1,gO2)*Lambdax + 20*vsb*Conj(Sigmax)*Conj(
      ZH(gI2,4))*Conj(ZP(gI1,0))*KroneckerDelta(1,gO2)*Lambdax + 20*vphi*Conj(
      Lambdax)*Conj(ZH(gI2,3))*Conj(ZP(gI1,1))*KroneckerDelta(0,gO2)*Sigmax + 20*
      vsb*Conj(Lambdax)*Conj(ZH(gI2,4))*Conj(ZP(gI1,1))*KroneckerDelta(0,gO2)*
      Sigmax + 3*QS*vs*Conj(ZH(gI2,2))*Conj(ZP(gI1,0))*KroneckerDelta(0,gO2)*Sqr(
      g1p) - 3*QS*vsb*Conj(ZH(gI2,3))*Conj(ZP(gI1,0))*KroneckerDelta(0,gO2)*Sqr(
      g1p) + 2*QS*vs*Conj(ZH(gI2,2))*Conj(ZP(gI1,1))*KroneckerDelta(1,gO2)*Sqr(g1p
      ) - 2*QS*vsb*Conj(ZH(gI2,3))*Conj(ZP(gI1,1))*KroneckerDelta(1,gO2)*Sqr(g1p)
      + 2*Conj(ZH(gI2,1))*(Conj(ZP(gI1,0))*(vu*KroneckerDelta(0,gO2)*(3*Sqr(g1) -
      3*Sqr(g1p) - 5*Sqr(g2)) - 5*vd*KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax) +
      Sqr(g2))) - Conj(ZP(gI1,1))*(5*vd*KroneckerDelta(0,gO2)*(-2*AbsSqr(Lambdax)
      + Sqr(g2)) + vu*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))))
      - Conj(ZH(gI2,0))*(2*Conj(ZP(gI1,1))*(5*vu*KroneckerDelta(0,gO2)*(-2*AbsSqr
      (Lambdax) + Sqr(g2)) + vd*KroneckerDelta(1,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p) + 5
      *Sqr(g2))) + Conj(ZP(gI1,0))*(10*vu*KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax
      ) + Sqr(g2)) + vd*KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2)
      ))) - 28.284271247461902*Conj(ZH(gI2,2))*Conj(ZP(gI1,0))*KroneckerDelta(1,
      gO2)*TLambdax);

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2149;
   tmp_2149 += std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1);
   tmp_2149 += std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1p);
   tmp_2149 += std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g2);
   tmp_2149 += std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1);
   tmp_2149 += std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1p);
   tmp_2149 += std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g2);
   std::complex<double> tmp_2150;
   std::complex<double> tmp_2151;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2151 += AbsSqr(Ye(j2,j2))*Conj(ZV(gI2,j2))*ZV(gI1,j2);
   }
   tmp_2150 += tmp_2151;
   tmp_2149 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2150;
   result += (std::complex<double>(0,-1)) * tmp_2149;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbarFuFdPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2152;
   std::complex<double> tmp_2153;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2153 += Conj(Yd(j1,j1))*ZDR(gI2,j1)*ZUL(gI1,j1);
   }
   tmp_2152 += tmp_2153;
   result += (KroneckerDelta(0,gO2)) * tmp_2152;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbarFuFdPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2154;
   std::complex<double> tmp_2155;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2155 += Conj(ZDL(gI2,j1))*Conj(ZUR(gI1,j1))*Yu(j1,j1);
   }
   tmp_2154 += tmp_2155;
   result += (KroneckerDelta(1,gO1)) * tmp_2154;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmbarFvFePR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += Conj(Ye(gI1,gI1))*KroneckerDelta(0,gO2)*ZER(gI2,gI1);
   }

   return result;
}

double CLASSNAME::CpconjUHpmbarFvFePL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmconjSvSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2156;
   std::complex<double> tmp_2157;
   std::complex<double> tmp_2158;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2158 += Conj(ZE(gI2,j1))*ZV(gI1,j1);
   }
   tmp_2157 += tmp_2158;
   tmp_2156 += (std::complex<double>(0.,-0.35355339059327373)*vd*KroneckerDelta
      (0,gO2)*Sqr(g2)) * tmp_2157;
   std::complex<double> tmp_2159;
   std::complex<double> tmp_2160;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2160 += Conj(ZE(gI2,j1))*ZV(gI1,j1);
   }
   tmp_2159 += tmp_2160;
   tmp_2156 += (std::complex<double>(0.,-0.35355339059327373)*vu*KroneckerDelta
      (1,gO2)*Sqr(g2)) * tmp_2159;
   std::complex<double> tmp_2161;
   std::complex<double> tmp_2162;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2162 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZV(gI1,j1);
   }
   tmp_2161 += tmp_2162;
   tmp_2156 += (std::complex<double>(0.,0.7071067811865475)*vs*KroneckerDelta(1
      ,gO2)*Lambdax) * tmp_2161;
   std::complex<double> tmp_2163;
   std::complex<double> tmp_2164;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2164 += Conj(ZE(gI2,3 + j1))*Conj(TYe(j1,j1))*ZV(gI1,j1);
   }
   tmp_2163 += tmp_2164;
   tmp_2156 += (std::complex<double>(0,1)*KroneckerDelta(0,gO2)) * tmp_2163;
   std::complex<double> tmp_2165;
   std::complex<double> tmp_2166;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2166 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,j2))*ZV(gI1,j2);
   }
   tmp_2165 += tmp_2166;
   tmp_2156 += (std::complex<double>(0.,0.7071067811865475)*vd*KroneckerDelta(0
      ,gO2)) * tmp_2165;
   result += (std::complex<double>(0,-1)) * tmp_2156;

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-(KroneckerDelta(0,gO1)*(KroneckerDelta(0,gO2)*((6*Sqr(g1) +
      9*Sqr(g1p) + 10*Sqr(g2))*ZA(gI1,0)*ZA(gI2,0) + 2*(-3*Sqr(g1) + 3*Sqr(g1p) +
      5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,1) + 40*AbsSqr(Lambdax)*ZA(gI1,2)*ZA(gI2,2) - 3
      *QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) + 3*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) - 10*
      KroneckerDelta(1,gO2)*((-2*AbsSqr(Lambdax) + Sqr(g2))*ZA(gI1,1)*ZA(gI2,0) +
      (-2*AbsSqr(Lambdax) + Sqr(g2))*ZA(gI1,0)*ZA(gI2,1) - 2*Conj(Sigmax)*Lambdax*
      (ZA(gI1,4)*ZA(gI2,3) + ZA(gI1,3)*ZA(gI2,4))))) + 2*KroneckerDelta(1,gO1)*(
      KroneckerDelta(1,gO2)*((3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(g2))*ZA(gI1,0)*ZA(gI2
      ,0) - (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,1) - 20*AbsSqr(
      Lambdax)*ZA(gI1,2)*ZA(gI2,2) + QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) - QS*Sqr(g1p)
      *ZA(gI1,3)*ZA(gI2,3)) + 5*KroneckerDelta(0,gO2)*((-2*AbsSqr(Lambdax) + Sqr(
      g2))*ZA(gI1,1)*ZA(gI2,0) + (-2*AbsSqr(Lambdax) + Sqr(g2))*ZA(gI1,0)*ZA(gI2,1
      ) - 2*Conj(Lambdax)*Sigmax*(ZA(gI1,4)*ZA(gI2,3) + ZA(gI1,3)*ZA(gI2,4)))));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*(-40*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - 40*AbsSqr(Lambdax)*Conj(ZH(gI1
      ,2))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2) + 20*Conj(
      Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta
      (1,gO2)*Lambdax + 20*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*Lambdax + 20*Conj(Lambdax)*Conj(
      ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*
      Sigmax + 20*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,
      gO2)*KroneckerDelta(1,gO1)*Sigmax + 3*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*Sqr(g1p) - 3*QS*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*Sqr(g1p) + 2*QS*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*
      Sqr(g1p) - 2*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p) + 2*Conj(ZH(gI1,1))*(-5*Conj(ZH(gI2,0))*(
      KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1) + KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2))*(-2*AbsSqr(Lambdax) + Sqr(g2)) + Conj(ZH(gI2,1))*(
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(
      g2)) - KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) +
      5*Sqr(g2)))) - Conj(ZH(gI1,0))*(10*Conj(ZH(gI2,1))*(KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1) + KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2))*(-2*
      AbsSqr(Lambdax) + Sqr(g2)) + Conj(ZH(gI2,0))*(2*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2)) + KroneckerDelta
      (0,gO1)*KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2)))));

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2167;
   std::complex<double> tmp_2168;
   std::complex<double> tmp_2169;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2169 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2168 += tmp_2169;
   tmp_2167 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2168;
   std::complex<double> tmp_2170;
   std::complex<double> tmp_2171;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2171 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2170 += tmp_2171;
   tmp_2167 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2170;
   std::complex<double> tmp_2172;
   std::complex<double> tmp_2173;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2173 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2172 += tmp_2173;
   tmp_2167 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2172;
   std::complex<double> tmp_2174;
   std::complex<double> tmp_2175;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2175 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2174 += tmp_2175;
   tmp_2167 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2174;
   std::complex<double> tmp_2176;
   std::complex<double> tmp_2177;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2177 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2176 += tmp_2177;
   tmp_2167 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2176;
   std::complex<double> tmp_2178;
   std::complex<double> tmp_2179;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2179 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2178 += tmp_2179;
   tmp_2167 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2178;
   std::complex<double> tmp_2180;
   std::complex<double> tmp_2181;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2181 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2180 += tmp_2181;
   tmp_2167 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2180;
   std::complex<double> tmp_2182;
   std::complex<double> tmp_2183;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2183 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2182 += tmp_2183;
   tmp_2167 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2182;
   std::complex<double> tmp_2184;
   std::complex<double> tmp_2185;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2185 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2184 += tmp_2185;
   tmp_2167 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2184;
   std::complex<double> tmp_2186;
   std::complex<double> tmp_2187;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2187 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2186 += tmp_2187;
   tmp_2167 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2186;
   std::complex<double> tmp_2188;
   std::complex<double> tmp_2189;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2189 += AbsSqr(Yu(j2,j2))*Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_2188 += tmp_2189;
   tmp_2167 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_2188;
   std::complex<double> tmp_2190;
   std::complex<double> tmp_2191;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2191 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_2190 += tmp_2191;
   tmp_2167 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2190;
   result += (std::complex<double>(0,-1)) * tmp_2167;

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2192;
   std::complex<double> tmp_2193;
   std::complex<double> tmp_2194;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2194 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2193 += tmp_2194;
   tmp_2192 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2193;
   std::complex<double> tmp_2195;
   std::complex<double> tmp_2196;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2196 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2195 += tmp_2196;
   tmp_2192 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2195;
   std::complex<double> tmp_2197;
   std::complex<double> tmp_2198;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2198 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2197 += tmp_2198;
   tmp_2192 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2197;
   std::complex<double> tmp_2199;
   std::complex<double> tmp_2200;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2200 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2199 += tmp_2200;
   tmp_2192 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2199;
   std::complex<double> tmp_2201;
   std::complex<double> tmp_2202;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2202 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2201 += tmp_2202;
   tmp_2192 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (1,gO2)*Lambdax) * tmp_2201;
   std::complex<double> tmp_2203;
   std::complex<double> tmp_2204;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2204 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2203 += tmp_2204;
   tmp_2192 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2203;
   std::complex<double> tmp_2205;
   std::complex<double> tmp_2206;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2206 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2205 += tmp_2206;
   tmp_2192 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2205;
   std::complex<double> tmp_2207;
   std::complex<double> tmp_2208;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2208 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2207 += tmp_2208;
   tmp_2192 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2207;
   std::complex<double> tmp_2209;
   std::complex<double> tmp_2210;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2210 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2209 += tmp_2210;
   tmp_2192 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2209;
   std::complex<double> tmp_2211;
   std::complex<double> tmp_2212;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2212 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2211 += tmp_2212;
   tmp_2192 += (std::complex<double>(0,-1)*Conj(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)) * tmp_2211;
   result += (std::complex<double>(0,-1)) * tmp_2192;

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2213;
   std::complex<double> tmp_2214;
   std::complex<double> tmp_2215;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2215 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2214 += tmp_2215;
   tmp_2213 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2214;
   std::complex<double> tmp_2216;
   std::complex<double> tmp_2217;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2217 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2216 += tmp_2217;
   tmp_2213 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2216;
   std::complex<double> tmp_2218;
   std::complex<double> tmp_2219;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2219 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2218 += tmp_2219;
   tmp_2213 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2218;
   std::complex<double> tmp_2220;
   std::complex<double> tmp_2221;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2221 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2220 += tmp_2221;
   tmp_2213 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2220;
   std::complex<double> tmp_2222;
   std::complex<double> tmp_2223;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2223 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2222 += tmp_2223;
   tmp_2213 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2222;
   std::complex<double> tmp_2224;
   std::complex<double> tmp_2225;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2225 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2224 += tmp_2225;
   tmp_2213 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2224;
   std::complex<double> tmp_2226;
   std::complex<double> tmp_2227;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2227 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2226 += tmp_2227;
   tmp_2213 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2226;
   std::complex<double> tmp_2228;
   std::complex<double> tmp_2229;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2229 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2228 += tmp_2229;
   tmp_2213 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2228;
   std::complex<double> tmp_2230;
   std::complex<double> tmp_2231;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2231 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2230 += tmp_2231;
   tmp_2213 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2230;
   std::complex<double> tmp_2232;
   std::complex<double> tmp_2233;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2233 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2232 += tmp_2233;
   tmp_2213 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2232;
   std::complex<double> tmp_2234;
   std::complex<double> tmp_2235;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2235 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_2234 += tmp_2235;
   tmp_2213 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2234;
   result += (std::complex<double>(0,-1)) * tmp_2213;

   return result;
}

std::complex<double> CLASSNAME::CpUHpmconjUHpmconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2236;
   std::complex<double> tmp_2237;
   std::complex<double> tmp_2238;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2238 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2237 += tmp_2238;
   tmp_2236 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2237;
   std::complex<double> tmp_2239;
   std::complex<double> tmp_2240;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2240 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2239 += tmp_2240;
   tmp_2236 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2239;
   std::complex<double> tmp_2241;
   std::complex<double> tmp_2242;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2242 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2241 += tmp_2242;
   tmp_2236 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2241;
   std::complex<double> tmp_2243;
   std::complex<double> tmp_2244;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2244 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2243 += tmp_2244;
   tmp_2236 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2243;
   std::complex<double> tmp_2245;
   std::complex<double> tmp_2246;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2246 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2245 += tmp_2246;
   tmp_2236 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2245;
   std::complex<double> tmp_2247;
   std::complex<double> tmp_2248;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2248 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2247 += tmp_2248;
   tmp_2236 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2247;
   std::complex<double> tmp_2249;
   std::complex<double> tmp_2250;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2250 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2249 += tmp_2250;
   tmp_2236 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2249;
   std::complex<double> tmp_2251;
   std::complex<double> tmp_2252;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2252 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2251 += tmp_2252;
   tmp_2236 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2251;
   std::complex<double> tmp_2253;
   std::complex<double> tmp_2254;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2254 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2253 += tmp_2254;
   tmp_2236 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2253;
   std::complex<double> tmp_2255;
   std::complex<double> tmp_2256;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2256 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2255 += tmp_2256;
   tmp_2236 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2255;
   std::complex<double> tmp_2257;
   std::complex<double> tmp_2258;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2258 += AbsSqr(Yd(j2,j2))*Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_2257 += tmp_2258;
   tmp_2236 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2257;
   std::complex<double> tmp_2259;
   std::complex<double> tmp_2260;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2260 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_2259 += tmp_2260;
   tmp_2236 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_2259;
   result += (std::complex<double>(0,-1)) * tmp_2236;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmconjSuSd(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2261;
   std::complex<double> tmp_2262;
   std::complex<double> tmp_2263;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2263 += Conj(ZD(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2262 += tmp_2263;
   tmp_2261 += (std::complex<double>(0.,-0.35355339059327373)*vd*KroneckerDelta
      (0,gO2)*Sqr(g2)) * tmp_2262;
   std::complex<double> tmp_2264;
   std::complex<double> tmp_2265;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2265 += Conj(ZD(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2264 += tmp_2265;
   tmp_2261 += (std::complex<double>(0.,-0.35355339059327373)*vu*KroneckerDelta
      (1,gO2)*Sqr(g2)) * tmp_2264;
   std::complex<double> tmp_2266;
   std::complex<double> tmp_2267;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2267 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2266 += tmp_2267;
   tmp_2261 += (std::complex<double>(0.,0.7071067811865475)*vs*KroneckerDelta(1
      ,gO2)*Lambdax) * tmp_2266;
   std::complex<double> tmp_2268;
   std::complex<double> tmp_2269;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2269 += Conj(ZD(gI2,3 + j1))*Conj(TYd(j1,j1))*ZU(gI1,j1);
   }
   tmp_2268 += tmp_2269;
   tmp_2261 += (std::complex<double>(0,1)*KroneckerDelta(0,gO2)) * tmp_2268;
   std::complex<double> tmp_2270;
   std::complex<double> tmp_2271;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2271 += Conj(ZD(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2270 += tmp_2271;
   tmp_2261 += (std::complex<double>(0.,0.7071067811865475)*vs*Conj(Lambdax)*
      KroneckerDelta(0,gO2)) * tmp_2270;
   std::complex<double> tmp_2272;
   std::complex<double> tmp_2273;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2273 += Conj(ZD(gI2,j1))*ZU(gI1,3 + j1)*TYu(j1,j1);
   }
   tmp_2272 += tmp_2273;
   tmp_2261 += (std::complex<double>(0,1)*KroneckerDelta(1,gO2)) * tmp_2272;
   std::complex<double> tmp_2274;
   std::complex<double> tmp_2275;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2275 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,j2))*ZU(gI1,j2);
   }
   tmp_2274 += tmp_2275;
   tmp_2261 += (std::complex<double>(0.,0.7071067811865475)*vd*KroneckerDelta(0
      ,gO2)) * tmp_2274;
   std::complex<double> tmp_2276;
   std::complex<double> tmp_2277;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2277 += AbsSqr(Yu(j2,j2))*Conj(ZD(gI2,j2))*ZU(gI1,j2);
   }
   tmp_2276 += tmp_2277;
   tmp_2261 += (std::complex<double>(0.,0.7071067811865475)*vu*KroneckerDelta(1
      ,gO2)) * tmp_2276;
   std::complex<double> tmp_2278;
   std::complex<double> tmp_2279;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2279 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*Yu(j2,j2)*ZU(gI1,3 +
         j2);
   }
   tmp_2278 += tmp_2279;
   tmp_2261 += (std::complex<double>(0.,0.7071067811865475)*vu*KroneckerDelta(0
      ,gO2)) * tmp_2278;
   std::complex<double> tmp_2280;
   std::complex<double> tmp_2281;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2281 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*Yu(j2,j2)*ZU(gI1,3 +
         j2);
   }
   tmp_2280 += tmp_2281;
   tmp_2261 += (std::complex<double>(0.,0.7071067811865475)*vd*KroneckerDelta(1
      ,gO2)) * tmp_2280;
   result += (std::complex<double>(0,-1)) * tmp_2261;

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmChiChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(Conj(Lambdax)*KroneckerDelta(0,gO2)*UP(gI2,1)*ZN(gI1,4)) - 0.1*
      KroneckerDelta(1,gO2)*(10*g2*UP(gI2,0)*ZN(gI1,3) + UP(gI2,1)*(
      5.477225575051661*g1*ZN(gI1,0) + 7.0710678118654755*g2*ZN(gI1,1) -
      4.47213595499958*g1p*ZN(gI1,7)));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmChiChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UM(gI2,0))*Conj(ZN(gI1,2))*KroneckerDelta(0,gO1)) + 0.1*
      Conj(UM(gI2,1))*(5.477225575051661*g1*Conj(ZN(gI1,0))*KroneckerDelta(0,gO1)
      + 7.0710678118654755*g2*Conj(ZN(gI1,1))*KroneckerDelta(0,gO1) +
      6.708203932499369*g1p*Conj(ZN(gI1,7))*KroneckerDelta(0,gO1) - 10*Conj(ZN(gI1
      ,4))*KroneckerDelta(1,gO1)*Lambdax);

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVPHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Conj(ZP(gI2,gO2))*Cos(ThetaW());
   }
   if (gI2 < 2) {
      result += -0.5*g2*Conj(ZP(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVZHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZP(gI2,0))*KroneckerDelta(0,gO2)*(-10*g2*Cos(ThetaW())*
      Cos(ThetaWp()) + 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      9.486832980505138*g1p*Sin(ThetaWp())) + 2*Conj(ZP(gI2,1))*KroneckerDelta(1,
      gO2)*(-5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp(
      ))*Sin(ThetaW()) + 3.1622776601683795*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVZpHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(2*Conj(ZP(gI2,1))*KroneckerDelta(1,gO2)*(3.1622776601683795*
      g1p*Cos(ThetaWp()) + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()
      ))*Sin(ThetaWp())) + Conj(ZP(gI2,0))*KroneckerDelta(0,gO2)*(
      -9.486832980505138*g1p*Cos(ThetaWp()) + 2*(5*g2*Cos(ThetaW()) -
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVWmAh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.5)*g2*(KroneckerDelta(0,gO2)*ZA(gI2,0) +
      KroneckerDelta(1,gO2)*ZA(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjUHpmVWmhh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*g2*(Conj(ZH(gI2,0))*KroneckerDelta(0,gO2) - Conj(ZH(gI2,1))*
      KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0VZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*
      ThetaWp()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin
      (ThetaW()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp())) + g1p*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*
      g1p*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0VZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*(-2*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*
      Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(
      ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + (g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*(Conj(ZP(gI2,0))*(3*Sqr(g1) - 3*Sqr(g1p) - 5*
      Sqr(g2))*ZP(gI1,0) + Conj(ZP(gI2,1))*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2))*
      ZP(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*(-(Conj(UHp0(gI2,1))*(-2
      *KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*UHp0(gI1,1) + KroneckerDelta(0,
      gO1)*(KroneckerDelta(1,gO2)*UHp0(gI1,0) + KroneckerDelta(0,gO2)*UHp0(gI1,1))
      )) + Conj(UHp0(gI2,0))*(2*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*UHp0(
      gI1,0) - KroneckerDelta(1,gO1)*(KroneckerDelta(1,gO2)*UHp0(gI1,0) +
      KroneckerDelta(0,gO2)*UHp0(gI1,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-(Conj(UHpp(gI2,0))*(KroneckerDelta(0,gO1)*KroneckerDelta(0,
      gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*UHpp(gI1,0) + KroneckerDelta(1,gO1
      )*(KroneckerDelta(1,gO2)*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2))*UHpp(gI1,0) +
      10*KroneckerDelta(0,gO2)*Sqr(g2)*UHpp(gI1,1)))) - Conj(UHpp(gI2,1))*(
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(
      g2))*UHpp(gI1,1) + KroneckerDelta(0,gO1)*(10*KroneckerDelta(1,gO2)*Sqr(g2)*
      UHpp(gI1,0) + KroneckerDelta(0,gO2)*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2))*
      UHpp(gI1,1))));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0conjHpmSHpp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.35355339059327373*(Conj(UHpp(gI2,0))*KroneckerDelta(0,gO2) +
      Conj(UHpp(gI2,1))*KroneckerDelta(1,gO2))*Sqr(g2)*(vd*ZP(gI1,0) + vu*ZP(gI1,1
      ));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0SHp0hh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = -0.05*(Conj(UHp0(gI1,0))*KroneckerDelta(0,gO2) - Conj(UHp0(gI1,1))*
      KroneckerDelta(1,gO2))*(QS*(vs*Conj(ZH(gI2,2)) - vsb*Conj(ZH(gI2,3)))*Sqr(
      g1p) + vd*Conj(ZH(gI2,0))*(3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) - vu*Conj(ZH(
      gI2,1))*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2)));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0ChiPChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*KroneckerDelta(1,gO2)*(-0.7745966692414834*g1*ZN
      (gI2,0) + g2*ZN(gI2,1) + 0.6324555320336759*g1p*ZN(gI2,7))*ZNp(gI1,1);

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0ChiPChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*(0.7745966692414834*g1*Conj(ZN(gI2,0)) - g2*Conj
      (ZN(gI2,1)) - 0.6324555320336759*g1p*Conj(ZN(gI2,7)))*Conj(ZNp(gI1,0))*
      KroneckerDelta(0,gO1);

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0barChaChaPPR(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(1,gO2)*UM(gI1,0));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0barChaChaPPL(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   result = -(g2*Conj(UP(gI1,0))*KroneckerDelta(0,gO1));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*KroneckerDelta(gI1,gI2)*(3*Sqr(g1) + 2*Sqr(
      g1p) + 5*Sqr(g2));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0AhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*((3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,
      0)*ZA(gI2,0) - (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,1) + QS
      *Sqr(g1p)*(ZA(gI1,2)*ZA(gI2,2) - ZA(gI1,3)*ZA(gI2,3)));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0hhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*(QS*(Conj(ZH(gI1,2))*Conj(ZH(gI2,2)) - Conj(
      ZH(gI1,3))*Conj(ZH(gI2,3)))*Sqr(g1p) + Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*(3*
      Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) - Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*(3*Sqr(
      g1) + 2*Sqr(g1p) + 5*Sqr(g2)));

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2282;
   std::complex<double> tmp_2283;
   std::complex<double> tmp_2284;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2284 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2283 += tmp_2284;
   tmp_2282 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2283;
   std::complex<double> tmp_2285;
   std::complex<double> tmp_2286;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2286 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2285 += tmp_2286;
   tmp_2282 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2285;
   std::complex<double> tmp_2287;
   std::complex<double> tmp_2288;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2288 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2287 += tmp_2288;
   tmp_2282 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2287;
   std::complex<double> tmp_2289;
   std::complex<double> tmp_2290;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2290 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2289 += tmp_2290;
   tmp_2282 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2289;
   std::complex<double> tmp_2291;
   std::complex<double> tmp_2292;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2292 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2291 += tmp_2292;
   tmp_2282 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2291;
   std::complex<double> tmp_2293;
   std::complex<double> tmp_2294;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2294 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2293 += tmp_2294;
   tmp_2282 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2293;
   std::complex<double> tmp_2295;
   std::complex<double> tmp_2296;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2296 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2295 += tmp_2296;
   tmp_2282 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2295;
   std::complex<double> tmp_2297;
   std::complex<double> tmp_2298;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2298 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2297 += tmp_2298;
   tmp_2282 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2297;
   std::complex<double> tmp_2299;
   std::complex<double> tmp_2300;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2300 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2299 += tmp_2300;
   tmp_2282 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2299;
   std::complex<double> tmp_2301;
   std::complex<double> tmp_2302;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2302 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2301 += tmp_2302;
   tmp_2282 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2301;
   result += (std::complex<double>(0,-1)) * tmp_2282;

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2303;
   std::complex<double> tmp_2304;
   std::complex<double> tmp_2305;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2305 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2304 += tmp_2305;
   tmp_2303 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2304;
   std::complex<double> tmp_2306;
   std::complex<double> tmp_2307;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2307 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2306 += tmp_2307;
   tmp_2303 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2306;
   std::complex<double> tmp_2308;
   std::complex<double> tmp_2309;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2309 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2308 += tmp_2309;
   tmp_2303 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2308;
   std::complex<double> tmp_2310;
   std::complex<double> tmp_2311;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2311 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2310 += tmp_2311;
   tmp_2303 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2310;
   std::complex<double> tmp_2312;
   std::complex<double> tmp_2313;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2313 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2312 += tmp_2313;
   tmp_2303 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2312;
   std::complex<double> tmp_2314;
   std::complex<double> tmp_2315;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2315 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2314 += tmp_2315;
   tmp_2303 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2314;
   std::complex<double> tmp_2316;
   std::complex<double> tmp_2317;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2317 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2316 += tmp_2317;
   tmp_2303 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2316;
   std::complex<double> tmp_2318;
   std::complex<double> tmp_2319;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2319 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2318 += tmp_2319;
   tmp_2303 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2318;
   result += (std::complex<double>(0,-1)) * tmp_2303;

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2320;
   std::complex<double> tmp_2321;
   std::complex<double> tmp_2322;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2322 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2321 += tmp_2322;
   tmp_2320 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2321;
   std::complex<double> tmp_2323;
   std::complex<double> tmp_2324;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2324 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2323 += tmp_2324;
   tmp_2320 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2323;
   std::complex<double> tmp_2325;
   std::complex<double> tmp_2326;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2326 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2325 += tmp_2326;
   tmp_2320 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2325;
   std::complex<double> tmp_2327;
   std::complex<double> tmp_2328;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2328 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2327 += tmp_2328;
   tmp_2320 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2327;
   std::complex<double> tmp_2329;
   std::complex<double> tmp_2330;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2330 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2329 += tmp_2330;
   tmp_2320 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2329;
   std::complex<double> tmp_2331;
   std::complex<double> tmp_2332;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2332 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2331 += tmp_2332;
   tmp_2320 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2331;
   std::complex<double> tmp_2333;
   std::complex<double> tmp_2334;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2334 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2333 += tmp_2334;
   tmp_2320 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2333;
   std::complex<double> tmp_2335;
   std::complex<double> tmp_2336;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2336 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2335 += tmp_2336;
   tmp_2320 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2335;
   std::complex<double> tmp_2337;
   std::complex<double> tmp_2338;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2338 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2337 += tmp_2338;
   tmp_2320 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2337;
   std::complex<double> tmp_2339;
   std::complex<double> tmp_2340;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2340 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2339 += tmp_2340;
   tmp_2320 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2339;
   result += (std::complex<double>(0,-1)) * tmp_2320;

   return result;
}

std::complex<double> CLASSNAME::CpUSHp0conjUSHp0conjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2341;
   std::complex<double> tmp_2342;
   std::complex<double> tmp_2343;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2343 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2342 += tmp_2343;
   tmp_2341 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2342;
   std::complex<double> tmp_2344;
   std::complex<double> tmp_2345;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2345 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2344 += tmp_2345;
   tmp_2341 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2344;
   std::complex<double> tmp_2346;
   std::complex<double> tmp_2347;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2347 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2346 += tmp_2347;
   tmp_2341 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2346;
   std::complex<double> tmp_2348;
   std::complex<double> tmp_2349;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2349 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2348 += tmp_2349;
   tmp_2341 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2348;
   std::complex<double> tmp_2350;
   std::complex<double> tmp_2351;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2351 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2350 += tmp_2351;
   tmp_2341 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2350;
   std::complex<double> tmp_2352;
   std::complex<double> tmp_2353;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2353 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2352 += tmp_2353;
   tmp_2341 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2352;
   std::complex<double> tmp_2354;
   std::complex<double> tmp_2355;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2355 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2354 += tmp_2355;
   tmp_2341 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2354;
   std::complex<double> tmp_2356;
   std::complex<double> tmp_2357;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2357 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2356 += tmp_2357;
   tmp_2341 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2356;
   std::complex<double> tmp_2358;
   std::complex<double> tmp_2359;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2359 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2358 += tmp_2359;
   tmp_2341 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2358;
   std::complex<double> tmp_2360;
   std::complex<double> tmp_2361;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2361 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2360 += tmp_2361;
   tmp_2341 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2360;
   result += (std::complex<double>(0,-1)) * tmp_2341;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0VZSHp0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.5*g2*Conj(UHp0(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Conj(UHp0(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 2) {
      result += 0.31622776601683794*g1p*Conj(UHp0(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0VZpSHp0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.31622776601683794*g1p*Conj(UHp0(gI2,gO2))*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += -0.5*g2*Conj(UHp0(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Conj(UHp0(gI2,gO2))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHp0conjVWmSHpp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*(Conj(UHpp(gI2,0))*KroneckerDelta(0,gO2) -
      Conj(UHpp(gI2,1))*KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*(5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()
      )) - 2*Cos(ThetaW())*(3.1622776601683795*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()
      ) + 3.872983346207417*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 3*Sqr(g1)*
      Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + g1p*(2.449489742783178*g1*Sin(
      ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*(-4.898979485566356*g1*g1p*Cos(ThetaWp())*Sin(
      ThetaW())*Sin(ThetaWp()) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(
      Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + 3*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp())) + Cos(ThetaW())*(3.1622776601683795*g1p*g2*Sin(2*ThetaWp()) -
      7.745966692414834*g1*g2*Sin(ThetaW())*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*(Conj(ZP(gI2,0))*(3*Sqr(g1) - 3*Sqr(g1p) + 5*
      Sqr(g2))*ZP(gI1,0) - Conj(ZP(gI2,1))*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZP
      (gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-(Conj(UHp0(gI2,0))*(KroneckerDelta(0,gO1)*KroneckerDelta(0,
      gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*UHp0(gI1,0) + KroneckerDelta(1,gO1
      )*(KroneckerDelta(1,gO2)*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2))*UHp0(gI1,0) +
      10*KroneckerDelta(0,gO2)*Sqr(g2)*UHp0(gI1,1)))) - Conj(UHp0(gI2,1))*(
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(
      g2))*UHp0(gI1,1) + KroneckerDelta(0,gO1)*(10*KroneckerDelta(1,gO2)*Sqr(g2)*
      UHp0(gI1,0) + KroneckerDelta(0,gO2)*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2))*
      UHp0(gI1,1))));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*(-(Conj(UHpp(gI2,1))*(-2
      *KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*UHpp(gI1,1) + KroneckerDelta(0,
      gO1)*(KroneckerDelta(1,gO2)*UHpp(gI1,0) + KroneckerDelta(0,gO2)*UHpp(gI1,1))
      )) + Conj(UHpp(gI2,0))*(2*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*UHpp(
      gI1,0) - KroneckerDelta(1,gO1)*(KroneckerDelta(1,gO2)*UHpp(gI1,0) +
      KroneckerDelta(0,gO2)*UHpp(gI1,1))));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppSHp0Hpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.35355339059327373*(vd*Conj(ZP(gI2,0)) + vu*Conj(ZP(gI2,1)))*(
      Conj(UHp0(gI1,0))*KroneckerDelta(0,gO2) + Conj(UHp0(gI1,1))*KroneckerDelta(1
      ,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppChiPChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(1,gO2)*UP(gI2,0)*ZNp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppChiPChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UM(gI2,0))*Conj(ZNp(gI1,0))*KroneckerDelta(0,gO1));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppSHpphh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = -0.05*(Conj(UHpp(gI1,0))*KroneckerDelta(0,gO2) - Conj(UHpp(gI1,1))*
      KroneckerDelta(1,gO2))*(QS*(vs*Conj(ZH(gI2,2)) - vsb*Conj(ZH(gI2,3)))*Sqr(
      g1p) + vd*Conj(ZH(gI2,0))*(3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(g2)) + vu*Conj(ZH(
      gI2,1))*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2)));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*KroneckerDelta(gI1,gI2)*(3*Sqr(g1) + 2*Sqr(
      g1p) - 5*Sqr(g2));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*((3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(g2))*ZA(gI1,
      0)*ZA(gI2,0) + (-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,1) +
      QS*Sqr(g1p)*(ZA(gI1,2)*ZA(gI2,2) - ZA(gI1,3)*ZA(gI2,3)));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHpphhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*(QS*(Conj(ZH(gI1,2))*Conj(ZH(gI2,2)) - Conj(
      ZH(gI1,3))*Conj(ZH(gI2,3)))*Sqr(g1p) + Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*(3*
      Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(g2)) + Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*(-3*Sqr(
      g1) - 2*Sqr(g1p) + 5*Sqr(g2)));

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2362;
   std::complex<double> tmp_2363;
   std::complex<double> tmp_2364;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2364 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2363 += tmp_2364;
   tmp_2362 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2363;
   std::complex<double> tmp_2365;
   std::complex<double> tmp_2366;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2366 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2365 += tmp_2366;
   tmp_2362 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2365;
   std::complex<double> tmp_2367;
   std::complex<double> tmp_2368;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2368 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2367 += tmp_2368;
   tmp_2362 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2367;
   std::complex<double> tmp_2369;
   std::complex<double> tmp_2370;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2370 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2369 += tmp_2370;
   tmp_2362 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2369;
   std::complex<double> tmp_2371;
   std::complex<double> tmp_2372;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2372 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2371 += tmp_2372;
   tmp_2362 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2371;
   std::complex<double> tmp_2373;
   std::complex<double> tmp_2374;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2374 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2373 += tmp_2374;
   tmp_2362 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2373;
   std::complex<double> tmp_2375;
   std::complex<double> tmp_2376;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2376 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2375 += tmp_2376;
   tmp_2362 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2375;
   std::complex<double> tmp_2377;
   std::complex<double> tmp_2378;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2378 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2377 += tmp_2378;
   tmp_2362 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2377;
   std::complex<double> tmp_2379;
   std::complex<double> tmp_2380;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2380 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2379 += tmp_2380;
   tmp_2362 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2379;
   std::complex<double> tmp_2381;
   std::complex<double> tmp_2382;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2382 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2381 += tmp_2382;
   tmp_2362 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2381;
   result += (std::complex<double>(0,-1)) * tmp_2362;

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2383;
   std::complex<double> tmp_2384;
   std::complex<double> tmp_2385;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2385 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2384 += tmp_2385;
   tmp_2383 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2384;
   std::complex<double> tmp_2386;
   std::complex<double> tmp_2387;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2387 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2386 += tmp_2387;
   tmp_2383 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2386;
   std::complex<double> tmp_2388;
   std::complex<double> tmp_2389;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2389 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2388 += tmp_2389;
   tmp_2383 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2388;
   std::complex<double> tmp_2390;
   std::complex<double> tmp_2391;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2391 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2390 += tmp_2391;
   tmp_2383 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2390;
   std::complex<double> tmp_2392;
   std::complex<double> tmp_2393;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2393 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2392 += tmp_2393;
   tmp_2383 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2392;
   std::complex<double> tmp_2394;
   std::complex<double> tmp_2395;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2395 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2394 += tmp_2395;
   tmp_2383 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2394;
   std::complex<double> tmp_2396;
   std::complex<double> tmp_2397;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2397 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2396 += tmp_2397;
   tmp_2383 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2396;
   std::complex<double> tmp_2398;
   std::complex<double> tmp_2399;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2399 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2398 += tmp_2399;
   tmp_2383 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2398;
   result += (std::complex<double>(0,-1)) * tmp_2383;

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2400;
   std::complex<double> tmp_2401;
   std::complex<double> tmp_2402;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2402 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2401 += tmp_2402;
   tmp_2400 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2401;
   std::complex<double> tmp_2403;
   std::complex<double> tmp_2404;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2404 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2403 += tmp_2404;
   tmp_2400 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2403;
   std::complex<double> tmp_2405;
   std::complex<double> tmp_2406;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2406 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2405 += tmp_2406;
   tmp_2400 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2405;
   std::complex<double> tmp_2407;
   std::complex<double> tmp_2408;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2408 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2407 += tmp_2408;
   tmp_2400 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2407;
   std::complex<double> tmp_2409;
   std::complex<double> tmp_2410;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2410 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2409 += tmp_2410;
   tmp_2400 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2409;
   std::complex<double> tmp_2411;
   std::complex<double> tmp_2412;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2412 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2411 += tmp_2412;
   tmp_2400 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2411;
   std::complex<double> tmp_2413;
   std::complex<double> tmp_2414;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2414 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2413 += tmp_2414;
   tmp_2400 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2413;
   std::complex<double> tmp_2415;
   std::complex<double> tmp_2416;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2416 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2415 += tmp_2416;
   tmp_2400 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2415;
   std::complex<double> tmp_2417;
   std::complex<double> tmp_2418;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2418 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2417 += tmp_2418;
   tmp_2400 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2417;
   std::complex<double> tmp_2419;
   std::complex<double> tmp_2420;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2420 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2419 += tmp_2420;
   tmp_2400 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2419;
   result += (std::complex<double>(0,-1)) * tmp_2400;

   return result;
}

std::complex<double> CLASSNAME::CpUSHppconjUSHppconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2421;
   std::complex<double> tmp_2422;
   std::complex<double> tmp_2423;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2423 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2422 += tmp_2423;
   tmp_2421 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2422;
   std::complex<double> tmp_2424;
   std::complex<double> tmp_2425;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2425 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2424 += tmp_2425;
   tmp_2421 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2424;
   std::complex<double> tmp_2426;
   std::complex<double> tmp_2427;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2427 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2426 += tmp_2427;
   tmp_2421 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2426;
   std::complex<double> tmp_2428;
   std::complex<double> tmp_2429;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2429 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2428 += tmp_2429;
   tmp_2421 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2428;
   std::complex<double> tmp_2430;
   std::complex<double> tmp_2431;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2431 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2430 += tmp_2431;
   tmp_2421 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2430;
   std::complex<double> tmp_2432;
   std::complex<double> tmp_2433;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2433 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2432 += tmp_2433;
   tmp_2421 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2432;
   std::complex<double> tmp_2434;
   std::complex<double> tmp_2435;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2435 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2434 += tmp_2435;
   tmp_2421 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2434;
   std::complex<double> tmp_2436;
   std::complex<double> tmp_2437;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2437 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2436 += tmp_2437;
   tmp_2421 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2436;
   std::complex<double> tmp_2438;
   std::complex<double> tmp_2439;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2439 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2438 += tmp_2439;
   tmp_2421 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2438;
   std::complex<double> tmp_2440;
   std::complex<double> tmp_2441;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2441 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2440 += tmp_2441;
   tmp_2421 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2440;
   result += (std::complex<double>(0,-1)) * tmp_2421;

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppChiChaPPR(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   result = -0.7071067811865475*KroneckerDelta(1,gO2)*(0.7745966692414834*g1*ZN
      (gI1,0) + g2*ZN(gI1,1) - 0.6324555320336759*g1p*ZN(gI1,7));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppChiChaPPL(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   result = 0.7071067811865475*(0.7745966692414834*g1*Conj(ZN(gI1,0)) + g2*Conj
      (ZN(gI1,1)) - 0.6324555320336759*g1p*Conj(ZN(gI1,7)))*KroneckerDelta(0,gO1);

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppVWmSHp0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*(Conj(UHp0(gI2,0))*KroneckerDelta(0,gO2) -
      Conj(UHp0(gI2,1))*KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppVPSHpp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Conj(UHpp(gI2,gO2))*Cos(ThetaW());
   }
   if (gI2 < 2) {
      result += -0.5*g2*Conj(UHpp(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppVZSHpp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += -0.5*g2*Conj(UHpp(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Conj(UHpp(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 2) {
      result += 0.31622776601683794*g1p*Conj(UHpp(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpconjUSHppVZpSHpp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.31622776601683794*g1p*Conj(UHpp(gI2,gO2))*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += 0.5*g2*Conj(UHpp(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Conj(UHpp(gI2,gO2))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

double CLASSNAME::CpVZbargWmgWm() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbargWmCgWmC() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Cos(ThetaWp());

   return result;
}

double CLASSNAME::CpVZconjVWmVWm() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarChaPChaPPL(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarChaPChaPPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZP(gI2,0))*(-14.696938456699067*g1*g1p*Cos(ThetaWp())*
      Sin(ThetaW())*Sin(ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp
      ())) + Cos(ThetaW())*(18.973665961010276*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()
      ) - 15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*
      Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(ThetaWp())))*ZP(
      gI1,0) + 2*Conj(ZP(gI2,1))*(2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(2*
      ThetaWp()) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) - 2*Cos(ThetaW
      ())*(3.1622776601683795*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) +
      3.872983346207417*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 3*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 2*Sqr(g1p)*Sqr(Sin(ThetaWp())))*ZP(gI1,
      1));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp()) + g1*
      Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*Sqr(
      Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + g1p*(
      2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(ThetaWp(
      )))))*(Conj(UHp0(gI2,0))*UHp0(gI1,0) + Conj(UHp0(gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) - 2*Cos(
      ThetaW())*(3.1622776601683795*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) +
      3.872983346207417*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 3*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + g1p*(2.449489742783178*g1*Sin(ThetaW())
      *Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(ThetaWp()))))*(Conj(UHpp(gI2,0))*UHpp(gI1,
      0) + Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZP(gI2,0))*(-10*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) - 9.486832980505138*g1p*
      Sin(ThetaWp()))*ZP(gI1,0) + 2*Conj(ZP(gI2,1))*(-5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp()))*ZP(gI1,1));

   return result;
}

double CLASSNAME::CpVZconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVZbarChaChaPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(2*g2*Conj(UM(gI2,0))*Cos(ThetaW())*Cos(ThetaWp())*UM(gI1,0) +
      Conj(UM(gI2,1))*(g2*Cos(ThetaW())*Cos(ThetaWp()) - 0.7745966692414834*g1*Cos
      (ThetaWp())*Sin(ThetaW()) + 0.9486832980505138*g1p*Sin(ThetaWp()))*UM(gI1,1)
      );

   return result;
}

std::complex<double> CLASSNAME::CpVZbarChaChaPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(2*g2*Conj(UP(gI1,0))*Cos(ThetaW())*Cos(ThetaWp())*UP(gI2,0) +
      Conj(UP(gI1,1))*(g2*Cos(ThetaW())*Cos(ThetaWp()) - 0.7745966692414834*g1*Cos
      (ThetaWp())*Sin(ThetaW()) - 0.6324555320336759*g1p*Sin(ThetaWp()))*UP(gI2,1)
      );

   return result;
}

std::complex<double> CLASSNAME::CpVZChiPChiPPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*Sin(ThetaWp()))*(Conj(ZNp(
      gI2,0))*ZNp(gI1,0) - Conj(ZNp(gI2,1))*ZNp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZChiPChiPPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*Sin(ThetaWp()))*(Conj(ZNp(
      gI1,0))*ZNp(gI2,0) - Conj(ZNp(gI1,1))*ZNp(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSvSv(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*g1p*g2*Cos(ThetaW()
      )*Sin(2*ThetaWp()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) +
      3*g1*Sin(ThetaW()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
      Cos(ThetaWp())) + g1p*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) +
      2*g1p*Sqr(Sin(ThetaWp()))));

   return result;
}

double CLASSNAME::CpVZconjSvSv(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFdFdPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.16666666666666666*KroneckerDelta(gI1,gI2)*(3*g2*Cos(ThetaW())*Cos
      (ThetaWp()) + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      0.9486832980505138*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFdFdPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI1,gI2)*(-0.2581988897471611*g1*Cos(ThetaWp())*Sin(
      ThetaW()) + 0.31622776601683794*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFDXFDXPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI1,gI2)*(-0.2581988897471611*g1*Cos(ThetaWp())*Sin(
      ThetaW()) + 0.31622776601683794*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFDXFDXPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI1,gI2)*(15.491933384829668*
      g1*Cos(ThetaWp())*Sin(ThetaW()) + 28.460498941515414*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFeFePL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFeFePR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.05*KroneckerDelta(gI1,gI2)*(15.491933384829668*g1*Cos(ThetaWp())
      *Sin(ThetaW()) - 3.1622776601683795*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFuFuPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI1,gI2)*(30*g2*Cos(ThetaW())*
      Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      9.486832980505138*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFuFuPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI1,gI2)*(30.983866769659336*g1
      *Cos(ThetaWp())*Sin(ThetaW()) + 9.486832980505138*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFvFvPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZbarFvFvPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpVZVZAhAh(unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*((-14.696938456699067*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW(
      ))*(-18.973665961010276*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) +
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(ThetaWp())))*ZA(gI1,
      0)*ZA(gI2,0) + 2*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp()) +
      g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*
      Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + g1p
      *(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(
      ThetaWp()))))*ZA(gI1,1)*ZA(gI2,1) + Sqr(g1p)*Sqr(QS)*Sqr(Sin(ThetaWp()))*(ZA
      (gI1,2)*ZA(gI2,2) + ZA(gI1,3)*ZA(gI2,3)));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZhhhh(unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*((Conj(ZH(gI1,2))*Conj(ZH(gI2,2)) + Conj(ZH(gI1,3))*Conj(ZH(
      gI2,3)))*Sqr(g1p)*Sqr(QS)*Sqr(Sin(ThetaWp())) + Conj(ZH(gI1,0))*Conj(ZH(gI2,
      0))*(-14.696938456699067*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp())
      + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW())*(
      -18.973665961010276*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) +
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(ThetaWp()))) + 2*
      Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin
      (2*ThetaWp()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*
      Sin(ThetaW()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp())) + g1p*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*
      g1p*Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpVZhhAh(unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = std::complex<double>(0,-0.5)*(Conj(ZH(gI1,0))*(g2*Cos(ThetaW())*Cos
      (ThetaWp()) + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      0.9486832980505138*g1p*Sin(ThetaWp()))*ZA(gI2,0) - Conj(ZH(gI1,1))*(g2*Cos(
      ThetaW())*Cos(ThetaWp()) + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()
      ) + 0.6324555320336759*g1p*Sin(ThetaWp()))*ZA(gI2,1) + 0.31622776601683794*
      g1p*QS*Sin(ThetaWp())*(Conj(ZH(gI1,2))*ZA(gI2,2) - Conj(ZH(gI1,3))*ZA(gI2,3)
      ));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2442;
   std::complex<double> tmp_2443;
   std::complex<double> tmp_2444;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2444 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2443 += tmp_2444;
   tmp_2442 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_2443;
   std::complex<double> tmp_2445;
   std::complex<double> tmp_2446;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2446 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2445 += tmp_2446;
   tmp_2442 += (std::complex<double>(0.,0.2581988897471611)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_2445;
   std::complex<double> tmp_2447;
   std::complex<double> tmp_2448;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2448 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2447 += tmp_2448;
   tmp_2442 += (std::complex<double>(0,0.03333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_2447;
   std::complex<double> tmp_2449;
   std::complex<double> tmp_2450;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2450 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2449 += tmp_2450;
   tmp_2442 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_2449;
   std::complex<double> tmp_2451;
   std::complex<double> tmp_2452;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2452 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2451 += tmp_2452;
   tmp_2442 += (std::complex<double>(0.,-0.31622776601683794)*g1p*g2*Cos(ThetaW
      ())*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_2451;
   std::complex<double> tmp_2453;
   std::complex<double> tmp_2454;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2454 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2453 += tmp_2454;
   tmp_2442 += (std::complex<double>(0.,-0.08164965809277262)*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2453;
   std::complex<double> tmp_2455;
   std::complex<double> tmp_2456;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2456 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2455 += tmp_2456;
   tmp_2442 += (std::complex<double>(0.,-0.32659863237109044)*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2455;
   std::complex<double> tmp_2457;
   std::complex<double> tmp_2458;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2458 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2457 += tmp_2458;
   tmp_2442 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_2457;
   std::complex<double> tmp_2459;
   std::complex<double> tmp_2460;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2460 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2459 += tmp_2460;
   tmp_2442 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_2459;
   result += (std::complex<double>(0,-1)) * tmp_2442;

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSDXSDX(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2461;
   std::complex<double> tmp_2462;
   std::complex<double> tmp_2463;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2463 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2462 += tmp_2463;
   tmp_2461 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_2462;
   std::complex<double> tmp_2464;
   std::complex<double> tmp_2465;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2465 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2464 += tmp_2465;
   tmp_2461 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_2464;
   std::complex<double> tmp_2466;
   std::complex<double> tmp_2467;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2467 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2466 += tmp_2467;
   tmp_2461 += (std::complex<double>(0.,-0.32659863237109044)*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2466;
   std::complex<double> tmp_2468;
   std::complex<double> tmp_2469;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2469 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2468 += tmp_2469;
   tmp_2461 += (std::complex<double>(0.,0.4898979485566356)*g1*g1p*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2468;
   std::complex<double> tmp_2470;
   std::complex<double> tmp_2471;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2471 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2470 += tmp_2471;
   tmp_2461 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_2470;
   std::complex<double> tmp_2472;
   std::complex<double> tmp_2473;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2473 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2472 += tmp_2473;
   tmp_2461 += (std::complex<double>(0,0.45)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_2472;
   result += (std::complex<double>(0,-1)) * tmp_2461;

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2474;
   std::complex<double> tmp_2475;
   std::complex<double> tmp_2476;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2476 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2475 += tmp_2476;
   tmp_2474 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_2475;
   std::complex<double> tmp_2477;
   std::complex<double> tmp_2478;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2478 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2477 += tmp_2478;
   tmp_2474 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_2477;
   std::complex<double> tmp_2479;
   std::complex<double> tmp_2480;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2480 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2479 += tmp_2480;
   tmp_2474 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_2479;
   std::complex<double> tmp_2481;
   std::complex<double> tmp_2482;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2482 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2481 += tmp_2482;
   tmp_2474 += (std::complex<double>(0,1.2)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_2481;
   std::complex<double> tmp_2483;
   std::complex<double> tmp_2484;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2484 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2483 += tmp_2484;
   tmp_2474 += (std::complex<double>(0.,-0.6324555320336759)*g1p*g2*Cos(ThetaW(
      ))*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_2483;
   std::complex<double> tmp_2485;
   std::complex<double> tmp_2486;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2486 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2485 += tmp_2486;
   tmp_2474 += (std::complex<double>(0.,0.4898979485566356)*g1*g1p*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2485;
   std::complex<double> tmp_2487;
   std::complex<double> tmp_2488;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2488 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2487 += tmp_2488;
   tmp_2474 += (std::complex<double>(0.,-0.4898979485566356)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2487;
   std::complex<double> tmp_2489;
   std::complex<double> tmp_2490;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2490 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2489 += tmp_2490;
   tmp_2474 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_2489;
   std::complex<double> tmp_2491;
   std::complex<double> tmp_2492;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2492 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2491 += tmp_2492;
   tmp_2474 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_2491;
   result += (std::complex<double>(0,-1)) * tmp_2474;

   return result;
}

std::complex<double> CLASSNAME::CpVZVZconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2493;
   std::complex<double> tmp_2494;
   std::complex<double> tmp_2495;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2495 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2494 += tmp_2495;
   tmp_2493 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_2494;
   std::complex<double> tmp_2496;
   std::complex<double> tmp_2497;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2497 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2496 += tmp_2497;
   tmp_2493 += (std::complex<double>(0.,-0.2581988897471611)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_2496;
   std::complex<double> tmp_2498;
   std::complex<double> tmp_2499;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2499 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2498 += tmp_2499;
   tmp_2493 += (std::complex<double>(0,0.03333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_2498;
   std::complex<double> tmp_2500;
   std::complex<double> tmp_2501;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2501 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2500 += tmp_2501;
   tmp_2493 += (std::complex<double>(0,0.5333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_2500;
   std::complex<double> tmp_2502;
   std::complex<double> tmp_2503;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2503 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2502 += tmp_2503;
   tmp_2493 += (std::complex<double>(0.,0.31622776601683794)*g1p*g2*Cos(ThetaW(
      ))*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_2502;
   std::complex<double> tmp_2504;
   std::complex<double> tmp_2505;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2505 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2504 += tmp_2505;
   tmp_2493 += (std::complex<double>(0.,-0.08164965809277262)*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2504;
   std::complex<double> tmp_2506;
   std::complex<double> tmp_2507;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2507 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2506 += tmp_2507;
   tmp_2493 += (std::complex<double>(0.,0.32659863237109044)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2506;
   std::complex<double> tmp_2508;
   std::complex<double> tmp_2509;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2509 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2508 += tmp_2509;
   tmp_2493 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_2508;
   std::complex<double> tmp_2510;
   std::complex<double> tmp_2511;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2511 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2510 += tmp_2511;
   tmp_2493 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_2510;
   result += (std::complex<double>(0,-1)) * tmp_2493;

   return result;
}

std::complex<double> CLASSNAME::CpVZconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2512;
   std::complex<double> tmp_2513;
   std::complex<double> tmp_2514;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2514 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2513 += tmp_2514;
   tmp_2512 += (2*(0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      0.9486832980505138*g1p*Sin(ThetaWp()))) * tmp_2513;
   std::complex<double> tmp_2515;
   std::complex<double> tmp_2516;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2516 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2515 += tmp_2516;
   tmp_2512 += (-3*g2*Cos(ThetaW())*Cos(ThetaWp()) - 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 0.9486832980505138*g1p*Sin(ThetaWp())) * tmp_2515
      ;
   result += (0.16666666666666666) * tmp_2512;

   return result;
}

std::complex<double> CLASSNAME::CpVZconjSDXSDX(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2517;
   std::complex<double> tmp_2518;
   std::complex<double> tmp_2519;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2519 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2518 += tmp_2519;
   tmp_2517 += (0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      0.9486832980505138*g1p*Sin(ThetaWp())) * tmp_2518;
   std::complex<double> tmp_2520;
   std::complex<double> tmp_2521;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2521 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2520 += tmp_2521;
   tmp_2517 += (0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      1.4230249470757708*g1p*Sin(ThetaWp())) * tmp_2520;
   result += (0.3333333333333333) * tmp_2517;

   return result;
}

std::complex<double> CLASSNAME::CpVZconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2522;
   std::complex<double> tmp_2523;
   std::complex<double> tmp_2524;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2524 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2523 += tmp_2524;
   tmp_2522 += (-(g2*Cos(ThetaW())*Cos(ThetaWp())) + 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 0.6324555320336759*g1p*Sin(ThetaWp())) * tmp_2523
      ;
   std::complex<double> tmp_2525;
   std::complex<double> tmp_2526;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2526 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2525 += tmp_2526;
   tmp_2522 += (-2*(-0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      0.15811388300841897*g1p*Sin(ThetaWp()))) * tmp_2525;
   result += (0.5) * tmp_2522;

   return result;
}

std::complex<double> CLASSNAME::CpVZconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2527;
   std::complex<double> tmp_2528;
   std::complex<double> tmp_2529;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2529 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2528 += tmp_2529;
   tmp_2527 += (-2*(1.5491933384829668*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      0.4743416490252569*g1p*Sin(ThetaWp()))) * tmp_2528;
   std::complex<double> tmp_2530;
   std::complex<double> tmp_2531;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2531 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2530 += tmp_2531;
   tmp_2527 += (3*g2*Cos(ThetaW())*Cos(ThetaWp()) - 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 0.9486832980505138*g1p*Sin(ThetaWp())) * tmp_2530
      ;
   result += (0.16666666666666666) * tmp_2527;

   return result;
}

std::complex<double> CLASSNAME::CpVZChiChiPL(unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*(Conj(ZN(gI2,2))*(-10*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) + 9.486832980505138*g1p*
      Sin(ThetaWp()))*ZN(gI1,2) + 2*Conj(ZN(gI2,3))*(5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp()))*ZN(gI1,3) + 3.1622776601683795*g1p*QS
      *Sin(ThetaWp())*(-(Conj(ZN(gI2,4))*ZN(gI1,4)) + Conj(ZN(gI2,5))*ZN(gI1,5)));

   return result;
}

std::complex<double> CLASSNAME::CpVZChiChiPR(unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.5*(Conj(ZN(gI1,2))*(g2*Cos(ThetaW())*Cos(ThetaWp()) +
      0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) - 0.9486832980505138*g1p*
      Sin(ThetaWp()))*ZN(gI2,2) - Conj(ZN(gI1,3))*(g2*Cos(ThetaW())*Cos(ThetaWp())
      + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) + 0.6324555320336759*
      g1p*Sin(ThetaWp()))*ZN(gI2,3) + 0.31622776601683794*g1p*QS*Sin(ThetaWp())*(
      Conj(ZN(gI1,4))*ZN(gI2,4) - Conj(ZN(gI1,5))*ZN(gI2,5)));

   return result;
}

std::complex<double> CLASSNAME::CpVZconjVWmHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*g2*(vd*Conj(ZP(gI2,0))*(0.7745966692414834*g1*Cos(ThetaWp())*
      Sin(ThetaW()) - 0.9486832980505138*g1p*Sin(ThetaWp())) - 0.2*vu*Conj(ZP(gI2,
      1))*(3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*
      g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZhh(unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.5*(0.1*(vs*Conj(ZH(gI2,2)) + vsb*Conj(ZH(gI2,3)))*Sqr(g1p)*Sqr(QS
      )*Sqr(Sin(ThetaWp())) + vd*Conj(ZH(gI2,0))*Sqr(g2*Cos(ThetaW())*Cos(ThetaWp(
      )) + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) - 0.9486832980505138
      *g1p*Sin(ThetaWp())) + vu*Conj(ZH(gI2,1))*Sqr(g2*Cos(ThetaW())*Cos(ThetaWp()
      ) + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) + 0.6324555320336759*
      g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpVZVZphh(unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*((vs*Conj(ZH(gI2,2)) + vsb*Conj(ZH(gI2,3)))*Sin(2*ThetaWp())*
      Sqr(g1p)*Sqr(QS) - vd*Conj(ZH(gI2,0))*(-9*Sin(2*ThetaWp())*Sqr(g1p) + 20*Cos
      (ThetaWp())*Sin(ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) + 14.696938456699067*
      g1*g1p*Sin(ThetaW())*Sqr(Cos(ThetaWp())) + 6*Sin(2*ThetaWp())*Sqr(g1)*Sqr(
      Sin(ThetaW())) - 14.696938456699067*g1*g1p*Sin(ThetaW())*Sqr(Sin(ThetaWp()))
      + Cos(ThetaW())*(30.983866769659336*g1*g2*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp()) + 18.973665961010276*g1p*g2*Sqr(Cos(ThetaWp())) -
      18.973665961010276*g1p*g2*Sqr(Sin(ThetaWp())))) + 2*vu*Conj(ZH(gI2,1))*(2*
      Sin(2*ThetaWp())*Sqr(g1p) - 5*Sin(2*ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) +
      4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(Cos(ThetaWp())) - 3*Sin(2*ThetaWp
      ())*Sqr(g1)*Sqr(Sin(ThetaW())) - 4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(
      Sin(ThetaWp())) + 2*Cos(ThetaW())*(-7.745966692414834*g1*g2*Cos(ThetaWp())*
      Sin(ThetaW())*Sin(ThetaWp()) + 3.1622776601683795*g1p*g2*Sqr(Cos(ThetaWp()))
      - 3.1622776601683795*g1p*g2*Sqr(Sin(ThetaWp())))));

   return result;
}

double CLASSNAME::CpVZVZconjVWmVWm1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZVZconjVWmVWm2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZVZconjVWmVWm3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbargWmgWm() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Sin(ThetaWp());

   return result;
}

double CLASSNAME::CpVZpbargWmCgWmC() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpconjVWmVWm() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Sin(ThetaWp());

   return result;
}

double CLASSNAME::CpVZpbarChaPChaPPL(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0.1*(-3.1622776601683795*g1p*Cos(ThetaWp()) - 5*g2*Cos(ThetaW())*
      Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarChaPChaPPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0.1*(-3.1622776601683795*g1p*Cos(ThetaWp()) - 5*g2*Cos(ThetaW())*
      Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZP(gI2,0))*(Cos(ThetaWp())*(-18.973665961010276*g1p*g2*
      Cos(ThetaW())*Sin(ThetaWp()) + 14.696938456699067*g1*g1p*Sin(ThetaW())*Sin(
      ThetaWp())) + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(-7.745966692414834*g1*g2*
      Cos(ThetaW())*Sin(ThetaW()) + 5*Sqr(g2)*Sqr(Cos(ThetaW())) + 3*Sqr(g1)*Sqr(
      Sin(ThetaW())))*Sqr(Sin(ThetaWp())))*ZP(gI1,0) + 2*Conj(ZP(gI2,1))*(
      -4.898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) +
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp()) + 2*Sqr(g1p)*Sqr(
      Cos(ThetaWp())) - 7.745966692414834*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(
      Sin(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + 3*Sqr(
      g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())))*ZP(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(-2*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin
      (ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 2*Sqr
      (g1p)*Sqr(Cos(ThetaWp())) + (g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(
      ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(
      ThetaWp())))*(Conj(UHp0(gI2,0))*UHp0(gI1,0) + Conj(UHp0(gI2,1))*UHp0(gI1,1))
      ;

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(-4.898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp()) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*
      Sqr(Sin(ThetaWp())) + 3*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())) + Cos
      (ThetaW())*(3.1622776601683795*g1p*g2*Sin(2*ThetaWp()) - 7.745966692414834*
      g1*g2*Sin(ThetaW())*Sqr(Sin(ThetaWp()))))*(Conj(UHpp(gI2,0))*UHpp(gI1,0) +
      Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZP(gI2,0))*(-9.486832980505138*g1p*Cos(ThetaWp()) + 2*(5
      *g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZP(
      gI1,0) + 2*Conj(ZP(gI2,1))*(3.1622776601683795*g1p*Cos(ThetaWp()) + (5*g2*
      Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZP(gI1,1
      ));

   return result;
}

double CLASSNAME::CpVZpconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gI1,gI2)*(0.6324555320336759*g1p*Cos(ThetaWp())
      - (g2*Cos(ThetaW()) + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*g1p*Cos(ThetaWp())
      + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVZpbarChaChaPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-20*g2*Conj(UM(gI2,0))*Cos(ThetaW())*Sin(ThetaWp())*UM(gI1,0)
      + Conj(UM(gI2,1))*(9.486832980505138*g1p*Cos(ThetaWp()) + 2*(-5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*UM(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZpbarChaChaPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(-2*g2*Conj(UP(gI1,0))*Cos(ThetaW())*Sin(ThetaWp())*UP(gI2,0) -
      Conj(UP(gI1,1))*(0.6324555320336759*g1p*Cos(ThetaWp()) + g2*Cos(ThetaW())*
      Sin(ThetaWp()) - 0.7745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp()))*UP(gI2,
      1));

   return result;
}

std::complex<double> CLASSNAME::CpVZpChiPChiPPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.25*(-1.2649110640673518*g1p*Cos(ThetaWp()) + 2*(g2*Cos(ThetaW())
      + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()))*(Conj(ZNp(gI2,0))*ZNp
      (gI1,0) - Conj(ZNp(gI2,1))*ZNp(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZpChiPChiPPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(0.6324555320336759*g1p*Cos(ThetaWp()) - (g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()))*(Conj(ZNp(gI1,0))*ZNp(
      gI2,0) - Conj(ZNp(gI1,1))*ZNp(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSvSv(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(gI1,gI2)*(-2*Cos(ThetaWp())*(3.1622776601683795*
      g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())
      *Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + (g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp())));

   return result;
}

double CLASSNAME::CpVZpconjSvSv(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gI1,gI2)*(0.6324555320336759*g1p*Cos(ThetaWp())
      - (g2*Cos(ThetaW()) + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFdFdPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.16666666666666666*KroneckerDelta(gI1,gI2)*(0.9486832980505138*
      g1p*Cos(ThetaWp()) + 3*g2*Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*
      g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFdFdPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI1,gI2)*(0.31622776601683794*g1p*Cos(ThetaWp()) +
      0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFDXFDXPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI1,gI2)*(0.31622776601683794*g1p*Cos(ThetaWp()) +
      0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFDXFDXPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI1,gI2)*(28.460498941515414*
      g1p*Cos(ThetaWp()) - 15.491933384829668*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFeFePL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*g1p*Cos(ThetaWp())
      + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))
      ;

   return result;
}

double CLASSNAME::CpVZpbarFeFePR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.05*KroneckerDelta(gI1,gI2)*(3.1622776601683795*g1p*Cos(ThetaWp())
      + 15.491933384829668*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFuFuPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.16666666666666666*KroneckerDelta(gI1,gI2)*(0.9486832980505138*
      g1p*Cos(ThetaWp()) - 3*g2*Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*
      g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFuFuPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI1,gI2)*(9.486832980505138*g1p
      *Cos(ThetaWp()) - 30.983866769659336*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFvFvPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.5*KroneckerDelta(gI1,gI2)*(0.6324555320336759*g1p*Cos(ThetaWp())
      - (g2*Cos(ThetaW()) + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpbarFvFvPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpAhAh(unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*((6*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(ThetaW())*
      Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 9*
      Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(g1*Sin(ThetaW())*(7.745966692414834*g2*Cos
      (ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(
      ThetaWp())))*ZA(gI1,0)*ZA(gI2,0) + 2*(-2*Cos(ThetaWp())*(3.1622776601683795*
      g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())
      *Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + (g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp())))*ZA(gI1,1)*ZA(gI2,1) + Sqr(g1p)*Sqr(QS)*Sqr
      (Cos(ThetaWp()))*(ZA(gI1,2)*ZA(gI2,2) + ZA(gI1,3)*ZA(gI2,3)));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZphhhh(unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*((Conj(ZH(gI1,2))*Conj(ZH(gI2,2)) + Conj(ZH(gI1,3))*Conj(ZH(
      gI2,3)))*Sqr(g1p)*Sqr(QS)*Sqr(Cos(ThetaWp())) + 2*Conj(ZH(gI1,1))*Conj(ZH(
      gI2,1))*(-2*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(
      ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 2*Sqr(
      g1p)*Sqr(Cos(ThetaWp())) + (g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(
      ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(
      ThetaWp()))) + Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*(6*Cos(ThetaWp())*(
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*
      g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(
      g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) +
      5*Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CLASSNAME::CpVZphhAh(unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(Conj(ZH(gI1,0))*(9.486832980505138*
      g1p*Cos(ThetaWp()) + 2*(5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW
      ()))*Sin(ThetaWp()))*ZA(gI2,0) + 2*Conj(ZH(gI1,1))*(3.1622776601683795*g1p*
      Cos(ThetaWp()) - (5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*
      Sin(ThetaWp()))*ZA(gI2,1) + 3.1622776601683795*g1p*QS*Cos(ThetaWp())*(-(Conj
      (ZH(gI1,2))*ZA(gI2,2)) + Conj(ZH(gI1,3))*ZA(gI2,3)));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2532;
   std::complex<double> tmp_2533;
   std::complex<double> tmp_2534;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2534 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2533 += tmp_2534;
   tmp_2532 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_2533;
   std::complex<double> tmp_2535;
   std::complex<double> tmp_2536;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2536 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2535 += tmp_2536;
   tmp_2532 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_2535;
   std::complex<double> tmp_2537;
   std::complex<double> tmp_2538;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2538 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2537 += tmp_2538;
   tmp_2532 += (std::complex<double>(0.,0.31622776601683794)*g1p*g2*Cos(ThetaW(
      ))*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_2537;
   std::complex<double> tmp_2539;
   std::complex<double> tmp_2540;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2540 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2539 += tmp_2540;
   tmp_2532 += (std::complex<double>(0.,0.08164965809277262)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2539;
   std::complex<double> tmp_2541;
   std::complex<double> tmp_2542;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2542 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2541 += tmp_2542;
   tmp_2532 += (std::complex<double>(0.,0.32659863237109044)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2541;
   std::complex<double> tmp_2543;
   std::complex<double> tmp_2544;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2544 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2543 += tmp_2544;
   tmp_2532 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_2543;
   std::complex<double> tmp_2545;
   std::complex<double> tmp_2546;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2546 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2545 += tmp_2546;
   tmp_2532 += (std::complex<double>(0.,0.2581988897471611)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_2545;
   std::complex<double> tmp_2547;
   std::complex<double> tmp_2548;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2548 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2547 += tmp_2548;
   tmp_2532 += (std::complex<double>(0,0.03333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_2547;
   std::complex<double> tmp_2549;
   std::complex<double> tmp_2550;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2550 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2549 += tmp_2550;
   tmp_2532 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_2549;
   result += (std::complex<double>(0,-1)) * tmp_2532;

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSDXSDX(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2551;
   std::complex<double> tmp_2552;
   std::complex<double> tmp_2553;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2553 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2552 += tmp_2553;
   tmp_2551 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_2552;
   std::complex<double> tmp_2554;
   std::complex<double> tmp_2555;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2555 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2554 += tmp_2555;
   tmp_2551 += (std::complex<double>(0,0.45)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_2554;
   std::complex<double> tmp_2556;
   std::complex<double> tmp_2557;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2557 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2556 += tmp_2557;
   tmp_2551 += (std::complex<double>(0.,0.32659863237109044)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2556;
   std::complex<double> tmp_2558;
   std::complex<double> tmp_2559;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2559 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2558 += tmp_2559;
   tmp_2551 += (std::complex<double>(0.,-0.4898979485566356)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2558;
   std::complex<double> tmp_2560;
   std::complex<double> tmp_2561;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2561 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2560 += tmp_2561;
   tmp_2551 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_2560;
   std::complex<double> tmp_2562;
   std::complex<double> tmp_2563;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2563 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2562 += tmp_2563;
   tmp_2551 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_2562;
   result += (std::complex<double>(0,-1)) * tmp_2551;

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2564;
   std::complex<double> tmp_2565;
   std::complex<double> tmp_2566;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2566 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2565 += tmp_2566;
   tmp_2564 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_2565;
   std::complex<double> tmp_2567;
   std::complex<double> tmp_2568;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2568 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2567 += tmp_2568;
   tmp_2564 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_2567;
   std::complex<double> tmp_2569;
   std::complex<double> tmp_2570;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2570 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2569 += tmp_2570;
   tmp_2564 += (std::complex<double>(0.,0.6324555320336759)*g1p*g2*Cos(ThetaW()
      )*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_2569;
   std::complex<double> tmp_2571;
   std::complex<double> tmp_2572;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2572 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2571 += tmp_2572;
   tmp_2564 += (std::complex<double>(0.,-0.4898979485566356)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2571;
   std::complex<double> tmp_2573;
   std::complex<double> tmp_2574;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2574 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2573 += tmp_2574;
   tmp_2564 += (std::complex<double>(0.,0.4898979485566356)*g1*g1p*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2573;
   std::complex<double> tmp_2575;
   std::complex<double> tmp_2576;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2576 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2575 += tmp_2576;
   tmp_2564 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_2575;
   std::complex<double> tmp_2577;
   std::complex<double> tmp_2578;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2578 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2577 += tmp_2578;
   tmp_2564 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_2577;
   std::complex<double> tmp_2579;
   std::complex<double> tmp_2580;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2580 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2579 += tmp_2580;
   tmp_2564 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_2579;
   std::complex<double> tmp_2581;
   std::complex<double> tmp_2582;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2582 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2581 += tmp_2582;
   tmp_2564 += (std::complex<double>(0,1.2)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_2581;
   result += (std::complex<double>(0,-1)) * tmp_2564;

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZpconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2583;
   std::complex<double> tmp_2584;
   std::complex<double> tmp_2585;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2585 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2584 += tmp_2585;
   tmp_2583 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_2584;
   std::complex<double> tmp_2586;
   std::complex<double> tmp_2587;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2587 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2586 += tmp_2587;
   tmp_2583 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_2586;
   std::complex<double> tmp_2588;
   std::complex<double> tmp_2589;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2589 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2588 += tmp_2589;
   tmp_2583 += (std::complex<double>(0.,-0.31622776601683794)*g1p*g2*Cos(ThetaW
      ())*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_2588;
   std::complex<double> tmp_2590;
   std::complex<double> tmp_2591;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2591 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2590 += tmp_2591;
   tmp_2583 += (std::complex<double>(0.,0.08164965809277262)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2590;
   std::complex<double> tmp_2592;
   std::complex<double> tmp_2593;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2593 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2592 += tmp_2593;
   tmp_2583 += (std::complex<double>(0.,-0.32659863237109044)*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2592;
   std::complex<double> tmp_2594;
   std::complex<double> tmp_2595;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2595 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2594 += tmp_2595;
   tmp_2583 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_2594;
   std::complex<double> tmp_2596;
   std::complex<double> tmp_2597;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2597 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2596 += tmp_2597;
   tmp_2583 += (std::complex<double>(0.,-0.2581988897471611)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_2596;
   std::complex<double> tmp_2598;
   std::complex<double> tmp_2599;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2599 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2598 += tmp_2599;
   tmp_2583 += (std::complex<double>(0,0.03333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_2598;
   std::complex<double> tmp_2600;
   std::complex<double> tmp_2601;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2601 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2600 += tmp_2601;
   tmp_2583 += (std::complex<double>(0,0.5333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_2600;
   result += (std::complex<double>(0,-1)) * tmp_2583;

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2602;
   std::complex<double> tmp_2603;
   std::complex<double> tmp_2604;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2604 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2603 += tmp_2604;
   tmp_2602 += (-2*(0.9486832980505138*g1p*Cos(ThetaWp()) + 0.7745966692414834*
      g1*Sin(ThetaW())*Sin(ThetaWp()))) * tmp_2603;
   std::complex<double> tmp_2605;
   std::complex<double> tmp_2606;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2606 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2605 += tmp_2606;
   tmp_2602 += (0.9486832980505138*g1p*Cos(ThetaWp()) + (3*g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_2605;
   result += (0.16666666666666666) * tmp_2602;

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjSDXSDX(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2607;
   std::complex<double> tmp_2608;
   std::complex<double> tmp_2609;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2609 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2608 += tmp_2609;
   tmp_2607 += (1.4230249470757708*g1p*Cos(ThetaWp()) - 0.7745966692414834*g1*
      Sin(ThetaW())*Sin(ThetaWp())) * tmp_2608;
   std::complex<double> tmp_2610;
   std::complex<double> tmp_2611;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2611 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2610 += tmp_2611;
   tmp_2607 += (-0.9486832980505138*g1p*Cos(ThetaWp()) - 0.7745966692414834*g1*
      Sin(ThetaW())*Sin(ThetaWp())) * tmp_2610;
   result += (0.3333333333333333) * tmp_2607;

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2612;
   std::complex<double> tmp_2613;
   std::complex<double> tmp_2614;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2614 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2613 += tmp_2614;
   tmp_2612 += (-2*(0.15811388300841897*g1p*Cos(ThetaWp()) + 0.7745966692414834
      *g1*Sin(ThetaW())*Sin(ThetaWp()))) * tmp_2613;
   std::complex<double> tmp_2615;
   std::complex<double> tmp_2616;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2616 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2615 += tmp_2616;
   tmp_2612 += (0.6324555320336759*g1p*Cos(ThetaWp()) + (g2*Cos(ThetaW()) -
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_2615;
   result += (0.5) * tmp_2612;

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2617;
   std::complex<double> tmp_2618;
   std::complex<double> tmp_2619;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2619 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2618 += tmp_2619;
   tmp_2617 += (2*(-0.4743416490252569*g1p*Cos(ThetaWp()) + 1.5491933384829668*
      g1*Sin(ThetaW())*Sin(ThetaWp()))) * tmp_2618;
   std::complex<double> tmp_2620;
   std::complex<double> tmp_2621;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2621 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2620 += tmp_2621;
   tmp_2617 += (0.9486832980505138*g1p*Cos(ThetaWp()) + (-3*g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_2620;
   result += (0.16666666666666666) * tmp_2617;

   return result;
}

std::complex<double> CLASSNAME::CpVZpChiChiPL(unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.5*(Conj(ZN(gI2,2))*(0.9486832980505138*g1p*Cos(ThetaWp()) + g2*
      Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*g1*Sin(ThetaW())*Sin(
      ThetaWp()))*ZN(gI1,2) + Conj(ZN(gI2,3))*(0.6324555320336759*g1p*Cos(ThetaWp(
      )) - (g2*Cos(ThetaW()) + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())
      )*ZN(gI1,3) + 0.31622776601683794*g1p*QS*Cos(ThetaWp())*(-(Conj(ZN(gI2,4))*
      ZN(gI1,4)) + Conj(ZN(gI2,5))*ZN(gI1,5)));

   return result;
}

std::complex<double> CLASSNAME::CpVZpChiChiPR(unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*(-(Conj(ZN(gI1,2))*(9.486832980505138*g1p*Cos(ThetaWp()) + 2*(
      5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZN(
      gI2,2)) + 2*Conj(ZN(gI1,3))*(-3.1622776601683795*g1p*Cos(ThetaWp()) + 5*g2*
      Cos(ThetaW())*Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(
      ThetaWp()))*ZN(gI2,3) + 3.1622776601683795*g1p*QS*Cos(ThetaWp())*(Conj(ZN(
      gI1,4))*ZN(gI2,4) - Conj(ZN(gI1,5))*ZN(gI2,5)));

   return result;
}

std::complex<double> CLASSNAME::CpVZpconjVWmHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = -0.5*g2*(vu*Conj(ZP(gI2,1))*(0.6324555320336759*g1p*Cos(ThetaWp())
      - 0.7745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp())) + vd*Conj(ZP(gI2,0))*(
      0.9486832980505138*g1p*Cos(ThetaWp()) + 0.7745966692414834*g1*Sin(ThetaW())*
      Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZhh(unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.025*((vs*Conj(ZH(gI2,2)) + vsb*Conj(ZH(gI2,3)))*Sin(2*ThetaWp())*
      Sqr(g1p)*Sqr(QS) - vd*Conj(ZH(gI2,0))*(-9*Sin(2*ThetaWp())*Sqr(g1p) + 20*Cos
      (ThetaWp())*Sin(ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) + 14.696938456699067*
      g1*g1p*Sin(ThetaW())*Sqr(Cos(ThetaWp())) + 6*Sin(2*ThetaWp())*Sqr(g1)*Sqr(
      Sin(ThetaW())) - 14.696938456699067*g1*g1p*Sin(ThetaW())*Sqr(Sin(ThetaWp()))
      + Cos(ThetaW())*(30.983866769659336*g1*g2*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp()) + 18.973665961010276*g1p*g2*Sqr(Cos(ThetaWp())) -
      18.973665961010276*g1p*g2*Sqr(Sin(ThetaWp())))) + 2*vu*Conj(ZH(gI2,1))*(2*
      Sin(2*ThetaWp())*Sqr(g1p) - 5*Sin(2*ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) +
      4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(Cos(ThetaWp())) - 3*Sin(2*ThetaWp
      ())*Sqr(g1)*Sqr(Sin(ThetaW())) - 4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(
      Sin(ThetaWp())) + 2*Cos(ThetaW())*(-7.745966692414834*g1*g2*Cos(ThetaWp())*
      Sin(ThetaW())*Sin(ThetaWp()) + 3.1622776601683795*g1p*g2*Sqr(Cos(ThetaWp()))
      - 3.1622776601683795*g1p*g2*Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CLASSNAME::CpVZpVZphh(unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.5*(0.1*(vs*Conj(ZH(gI2,2)) + vsb*Conj(ZH(gI2,3)))*Sqr(g1p)*Sqr(QS
      )*Sqr(Cos(ThetaWp())) + vu*Conj(ZH(gI2,1))*Sqr(-0.6324555320336759*g1p*Cos(
      ThetaWp()) + g2*Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*g1*Sin(
      ThetaW())*Sin(ThetaWp())) + vd*Conj(ZH(gI2,0))*Sqr(0.9486832980505138*g1p*
      Cos(ThetaWp()) + g2*Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*g1*Sin
      (ThetaW())*Sin(ThetaWp())));

   return result;
}

double CLASSNAME::CpVZpVZpconjVWmVWm1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpVZpconjVWmVWm2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVZpVZpconjVWmVWm3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpconjVWmbargPgWm() const
{
   double result = 0.0;

   result = g2*Sin(ThetaW());

   return result;
}

double CLASSNAME::CpconjVWmbargWmCgP() const
{
   double result = 0.0;

   result = -(g2*Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpconjVWmbargWmCgZ() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpconjVWmbargWmCgZp() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Sin(ThetaWp());

   return result;
}

double CLASSNAME::CpconjVWmbargZgWm() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Cos(ThetaWp());

   return result;
}

double CLASSNAME::CpconjVWmbargZpgWm() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpconjVWmVWmVP() const
{
   double result = 0.0;

   result = -(g2*Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpconjVWmVZVWm() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Cos(ThetaWp());

   return result;
}

double CLASSNAME::CpconjVWmVZpVWm() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(Conj(ZP(gI2,0))*ZP(gI1,0) + Conj(ZP(gI2,1))*ZP(gI1,1))
      ;

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(Conj(UHp0(gI2,0))*UHp0(gI1,0) + Conj(UHp0(gI2,1))*UHp0
      (gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(Conj(UHpp(gI2,0))*UHpp(gI1,0) + Conj(UHpp(gI2,1))*UHpp
      (gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmconjSHp0SHpp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*(Conj(UHpp(gI2,0))*UHp0(gI1,0) - Conj(UHpp(
      gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmHpmAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.5)*g2*(Conj(ZP(gI1,0))*ZA(gI2,0) + Conj(
      ZP(gI1,1))*ZA(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmHpmhh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*g2*(Conj(ZH(gI2,0))*Conj(ZP(gI1,0)) - Conj(ZH(gI2,1))*Conj(ZP(
      gI1,1)));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmChiPChaPPL(unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   result = -0.7071067811865475*g2*ZNp(gI1,0);

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmChiPChaPPR(unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*Conj(ZNp(gI1,1));

   return result;
}

double CLASSNAME::CpVWmconjVWmconjSvSv(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gI1,gI2)*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmbarFuFdPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2622;
   std::complex<double> tmp_2623;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2623 += Conj(ZDL(gI2,j1))*ZUL(gI1,j1);
   }
   tmp_2622 += tmp_2623;
   result += (-0.7071067811865475*g2) * tmp_2622;

   return result;
}

double CLASSNAME::CpconjVWmbarFuFdPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmbarFvFePL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZEL(gI2,gI1));
   }

   return result;
}

double CLASSNAME::CpconjVWmbarFvFePR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmconjSvSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2624;
   std::complex<double> tmp_2625;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2625 += Conj(ZE(gI2,j1))*ZV(gI1,j1);
   }
   tmp_2624 += tmp_2625;
   result += (0.7071067811865475*g2) * tmp_2624;

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmAhAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(ZA(gI1,0)*ZA(gI2,0) + ZA(gI1,1)*ZA(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmhhhh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(Conj(ZH(gI1,0))*Conj(ZH(gI2,0)) + Conj(ZH(gI1,1))*Conj(ZH(gI2,
      1)))*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2626;
   std::complex<double> tmp_2627;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2627 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2626 += tmp_2627;
   result += (0.5*Sqr(g2)) * tmp_2626;

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2628;
   std::complex<double> tmp_2629;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2629 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2628 += tmp_2629;
   result += (0.5*Sqr(g2)) * tmp_2628;

   return result;
}

std::complex<double> CLASSNAME::CpVWmconjVWmconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2630;
   std::complex<double> tmp_2631;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2631 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2630 += tmp_2631;
   result += (0.5*Sqr(g2)) * tmp_2630;

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmconjSuSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2632;
   std::complex<double> tmp_2633;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2633 += Conj(ZD(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2632 += tmp_2633;
   result += (0.7071067811865475*g2) * tmp_2632;

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmChiChaPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.5*g2*(2*Conj(UM(gI2,0))*ZN(gI1,1) + 1.4142135623730951*Conj(UM(
      gI2,1))*ZN(gI1,2));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmChiChaPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(ZN(gI1,1))*UP(gI2,0)) + 0.7071067811865475*g2*Conj(ZN(gI1
      ,3))*UP(gI2,1);

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmVPHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = -0.3872983346207417*g1*g2*(vd*Conj(ZP(gI2,0)) - vu*Conj(ZP(gI2,1)))
      *Cos(ThetaW());

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmVZHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*g2*(vd*Conj(ZP(gI2,0))*(0.7745966692414834*g1*Cos(ThetaWp())*
      Sin(ThetaW()) - 0.9486832980505138*g1p*Sin(ThetaWp())) - 0.2*vu*Conj(ZP(gI2,
      1))*(3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*
      g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmVZpHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = -0.5*g2*(vu*Conj(ZP(gI2,1))*(0.6324555320336759*g1p*Cos(ThetaWp())
      - 0.7745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp())) + vd*Conj(ZP(gI2,0))*(
      0.9486832980505138*g1p*Cos(ThetaWp()) + 0.7745966692414834*g1*Sin(ThetaW())*
      Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpconjVWmVWmhh(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(vd*Conj(ZH(gI2,0)) + vu*Conj(ZH(gI2,1)))*Sqr(g2);

   return result;
}

double CLASSNAME::CpVWmconjVWmVPVP1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVPVP2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVPVP3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVZVZ1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVZVZ2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVZVZ3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVZpVZp1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVZpVZp2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVWmconjVWmVZpVZp3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpVWmconjVWmconjVWmVWm1() const
{
   double result = 0.0;

   result = -Sqr(g2);

   return result;
}

double CLASSNAME::CpVWmconjVWmconjVWmVWm2() const
{
   double result = 0.0;

   result = -Sqr(g2);

   return result;
}

double CLASSNAME::CpVWmconjVWmconjVWmVWm3() const
{
   double result = 0.0;

   result = 2*Sqr(g2);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjHpmChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UM(gI2,0))*KroneckerDelta(2,gO2)*ZP(gI1,0)) + 0.1*Conj(UM
      (gI2,1))*(5.477225575051661*g1*KroneckerDelta(0,gO2)*ZP(gI1,0) +
      7.0710678118654755*g2*KroneckerDelta(1,gO2)*ZP(gI1,0) + 6.708203932499369*
      g1p*KroneckerDelta(7,gO2)*ZP(gI1,0) - 10*KroneckerDelta(4,gO2)*Lambdax*ZP(
      gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjHpmChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(Conj(Lambdax)*KroneckerDelta(4,gO1)*UP(gI2,1)*ZP(gI1,0)) - 0.1*(
      10*g2*KroneckerDelta(3,gO1)*UP(gI2,0) + (5.477225575051661*g1*KroneckerDelta
      (0,gO1) + 7.0710678118654755*g2*KroneckerDelta(1,gO1) - 4.47213595499958*g1p
      *KroneckerDelta(7,gO1))*UP(gI2,1))*ZP(gI1,1);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSHp0ChiPPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*Conj(ZNp(gI2,0))*(5.477225575051661*g1*KroneckerDelta(0,gO2) -
      7.0710678118654755*g2*KroneckerDelta(1,gO2) - 4.47213595499958*g1p*
      KroneckerDelta(7,gO2))*UHp0(gI1,0);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSHp0ChiPPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(-5.477225575051661*g1*KroneckerDelta(0,gO1) +
      7.0710678118654755*g2*KroneckerDelta(1,gO1) + 4.47213595499958*g1p*
      KroneckerDelta(7,gO1))*UHp0(gI1,1)*ZNp(gI2,1);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSHppChaPPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   result = 0.1*(5.477225575051661*g1*KroneckerDelta(0,gO2) +
      7.0710678118654755*g2*KroneckerDelta(1,gO2) - 4.47213595499958*g1p*
      KroneckerDelta(7,gO2))*UHpp(gI1,0);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSHppChaPPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   result = -0.1*(5.477225575051661*g1*KroneckerDelta(0,gO1) +
      7.0710678118654755*g2*KroneckerDelta(1,gO1) - 4.47213595499958*g1p*
      KroneckerDelta(7,gO1))*UHpp(gI1,1);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSvFvPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5477225575051661*g1*KroneckerDelta(0,gO2)*ZV(gI1,gI2);
   }
   if (gI2 < 3) {
      result += -0.7071067811865475*g2*KroneckerDelta(1,gO2)*ZV(gI1,gI2);
   }
   if (gI2 < 3) {
      result += -0.4472135954999579*g1p*KroneckerDelta(7,gO2)*ZV(gI1,gI2);
   }

   return result;
}

double CLASSNAME::CpUChiconjSvFvPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpUChihhChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*(-2*Conj(ZH(gI1,1))*(3.872983346207417*g1*Conj(ZN(gI2,0))*
      KroneckerDelta(3,gO2) - 5*g2*Conj(ZN(gI2,1))*KroneckerDelta(3,gO2) -
      3.1622776601683795*g1p*Conj(ZN(gI2,7))*KroneckerDelta(3,gO2) + Conj(ZN(gI2,3
      ))*(3.872983346207417*g1*KroneckerDelta(0,gO2) - 5*g2*KroneckerDelta(1,gO2)
      - 3.1622776601683795*g1p*KroneckerDelta(7,gO2)) - 7.0710678118654755*Conj(ZN
      (gI2,4))*KroneckerDelta(2,gO2)*Lambdax - 7.0710678118654755*Conj(ZN(gI2,2))*
      KroneckerDelta(4,gO2)*Lambdax) + Conj(ZH(gI1,0))*(7.745966692414834*g1*Conj(
      ZN(gI2,0))*KroneckerDelta(2,gO2) - 10*g2*Conj(ZN(gI2,1))*KroneckerDelta(2,
      gO2) + 9.486832980505138*g1p*Conj(ZN(gI2,7))*KroneckerDelta(2,gO2) + Conj(ZN
      (gI2,2))*(7.745966692414834*g1*KroneckerDelta(0,gO2) - 10*g2*KroneckerDelta(
      1,gO2) + 9.486832980505138*g1p*KroneckerDelta(7,gO2)) + 14.142135623730951*
      Conj(ZN(gI2,4))*KroneckerDelta(3,gO2)*Lambdax + 14.142135623730951*Conj(ZN(
      gI2,3))*KroneckerDelta(4,gO2)*Lambdax) + 1.4142135623730951*(10*Conj(ZH(gI1,
      4))*(-2*Conj(ZN(gI2,6))*KroneckerDelta(6,gO2)*KappaPr + Conj(ZN(gI2,5))*
      KroneckerDelta(4,gO2)*Sigmax + Conj(ZN(gI2,4))*KroneckerDelta(5,gO2)*Sigmax)
      + Conj(ZH(gI1,3))*(2.23606797749979*g1p*QS*Conj(ZN(gI2,7))*KroneckerDelta(5
      ,gO2) + 2.23606797749979*g1p*QS*Conj(ZN(gI2,5))*KroneckerDelta(7,gO2) + 10*
      Conj(ZN(gI2,6))*KroneckerDelta(4,gO2)*Sigmax + 10*Conj(ZN(gI2,4))*
      KroneckerDelta(6,gO2)*Sigmax) + Conj(ZH(gI1,2))*(-2.23606797749979*g1p*QS*
      Conj(ZN(gI2,7))*KroneckerDelta(4,gO2) - 2.23606797749979*g1p*QS*Conj(ZN(gI2,
      4))*KroneckerDelta(7,gO2) + 10*Conj(ZN(gI2,3))*KroneckerDelta(2,gO2)*Lambdax
      + 10*Conj(ZN(gI2,2))*KroneckerDelta(3,gO2)*Lambdax + 10*Conj(ZN(gI2,6))*
      KroneckerDelta(5,gO2)*Sigmax + 10*Conj(ZN(gI2,5))*KroneckerDelta(6,gO2)*
      Sigmax)));

   return result;
}

std::complex<double> CLASSNAME::CpUChihhChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*(1.4142135623730951*(10*Conj(Lambdax)*Conj(ZH(gI1,2))*(
      KroneckerDelta(3,gO1)*ZN(gI2,2) + KroneckerDelta(2,gO1)*ZN(gI2,3)) -
      2.23606797749979*g1p*QS*Conj(ZH(gI1,2))*KroneckerDelta(7,gO1)*ZN(gI2,4) +
      2.23606797749979*g1p*QS*Conj(ZH(gI1,3))*KroneckerDelta(7,gO1)*ZN(gI2,5) - 20
      *Conj(KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(6,gO1)*ZN(gI2,6) + 10*Conj(
      Sigmax)*(Conj(ZH(gI1,4))*(KroneckerDelta(5,gO1)*ZN(gI2,4) + KroneckerDelta(4
      ,gO1)*ZN(gI2,5)) + Conj(ZH(gI1,3))*(KroneckerDelta(6,gO1)*ZN(gI2,4) +
      KroneckerDelta(4,gO1)*ZN(gI2,6)) + Conj(ZH(gI1,2))*(KroneckerDelta(6,gO1)*ZN
      (gI2,5) + KroneckerDelta(5,gO1)*ZN(gI2,6))) - 2.23606797749979*g1p*QS*Conj(
      ZH(gI1,2))*KroneckerDelta(4,gO1)*ZN(gI2,7) + 2.23606797749979*g1p*QS*Conj(ZH
      (gI1,3))*KroneckerDelta(5,gO1)*ZN(gI2,7)) + 2*Conj(ZH(gI1,1))*((
      -3.872983346207417*g1*KroneckerDelta(0,gO1) + 5*g2*KroneckerDelta(1,gO1) +
      3.1622776601683795*g1p*KroneckerDelta(7,gO1))*ZN(gI2,3) + 7.0710678118654755
      *Conj(Lambdax)*(KroneckerDelta(4,gO1)*ZN(gI2,2) + KroneckerDelta(2,gO1)*ZN(
      gI2,4)) + KroneckerDelta(3,gO1)*(-3.872983346207417*g1*ZN(gI2,0) + 5*g2*ZN(
      gI2,1) + 3.1622776601683795*g1p*ZN(gI2,7))) + Conj(ZH(gI1,0))*(
      7.745966692414834*g1*KroneckerDelta(0,gO1)*ZN(gI2,2) - 10*g2*KroneckerDelta(
      1,gO1)*ZN(gI2,2) + 9.486832980505138*g1p*KroneckerDelta(7,gO1)*ZN(gI2,2) +
      14.142135623730951*Conj(Lambdax)*KroneckerDelta(4,gO1)*ZN(gI2,3) +
      14.142135623730951*Conj(Lambdax)*KroneckerDelta(3,gO1)*ZN(gI2,4) +
      KroneckerDelta(2,gO1)*(7.745966692414834*g1*ZN(gI2,0) - 10*g2*ZN(gI2,1) +
      9.486832980505138*g1p*ZN(gI2,7))));

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSdFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2634;
   std::complex<double> tmp_2635;
   std::complex<double> tmp_2636;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2636 += Conj(ZDL(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2635 += tmp_2636;
   tmp_2634 += (std::complex<double>(0.,-0.18257418583505536)*g1*KroneckerDelta
      (0,gO2)) * tmp_2635;
   std::complex<double> tmp_2637;
   std::complex<double> tmp_2638;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2638 += Conj(ZDL(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2637 += tmp_2638;
   tmp_2634 += (std::complex<double>(0.,0.7071067811865475)*g2*KroneckerDelta(1
      ,gO2)) * tmp_2637;
   std::complex<double> tmp_2639;
   std::complex<double> tmp_2640;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2640 += Conj(ZDL(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2639 += tmp_2640;
   tmp_2634 += (std::complex<double>(0.,-0.22360679774997896)*g1p*
      KroneckerDelta(7,gO2)) * tmp_2639;
   std::complex<double> tmp_2641;
   std::complex<double> tmp_2642;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2642 += Conj(ZDL(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2641 += tmp_2642;
   tmp_2634 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO2)) * tmp_2641;
   result += (std::complex<double>(0,-1)) * tmp_2634;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSdFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2643;
   std::complex<double> tmp_2644;
   std::complex<double> tmp_2645;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2645 += Conj(Yd(j1,j1))*ZD(gI1,j1)*ZDR(gI2,j1);
   }
   tmp_2644 += tmp_2645;
   tmp_2643 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)) * tmp_2644;
   std::complex<double> tmp_2646;
   std::complex<double> tmp_2647;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2647 += ZD(gI1,3 + j1)*ZDR(gI2,j1);
   }
   tmp_2646 += tmp_2647;
   tmp_2643 += (std::complex<double>(0.,-0.3651483716701107)*g1*KroneckerDelta(
      0,gO1)) * tmp_2646;
   std::complex<double> tmp_2648;
   std::complex<double> tmp_2649;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2649 += ZD(gI1,3 + j1)*ZDR(gI2,j1);
   }
   tmp_2648 += tmp_2649;
   tmp_2643 += (std::complex<double>(0.,-0.4472135954999579)*g1p*KroneckerDelta
      (7,gO1)) * tmp_2648;
   result += (std::complex<double>(0,-1)) * tmp_2643;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSDXFDXPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2650;
   std::complex<double> tmp_2651;
   std::complex<double> tmp_2652;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2652 += Conj(ZDXL(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2651 += tmp_2652;
   tmp_2650 += (std::complex<double>(0.,0.3651483716701107)*g1*KroneckerDelta(0
      ,gO2)) * tmp_2651;
   std::complex<double> tmp_2653;
   std::complex<double> tmp_2654;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2654 += Conj(ZDXL(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2653 += tmp_2654;
   tmp_2650 += (std::complex<double>(0.,0.4472135954999579)*g1p*KroneckerDelta(
      7,gO2)) * tmp_2653;
   std::complex<double> tmp_2655;
   std::complex<double> tmp_2656;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2656 += Conj(ZDXL(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2655 += tmp_2656;
   tmp_2650 += (std::complex<double>(0,-1)*KroneckerDelta(4,gO2)) * tmp_2655;
   result += (std::complex<double>(0,-1)) * tmp_2650;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSDXFDXPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2657;
   std::complex<double> tmp_2658;
   std::complex<double> tmp_2659;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2659 += Conj(Kappa(j1,j1))*ZDX(gI1,j1)*ZDXR(gI2,j1);
   }
   tmp_2658 += tmp_2659;
   tmp_2657 += (std::complex<double>(0,-1)*KroneckerDelta(4,gO1)) * tmp_2658;
   std::complex<double> tmp_2660;
   std::complex<double> tmp_2661;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2661 += ZDX(gI1,3 + j1)*ZDXR(gI2,j1);
   }
   tmp_2660 += tmp_2661;
   tmp_2657 += (std::complex<double>(0.,-0.3651483716701107)*g1*KroneckerDelta(
      0,gO1)) * tmp_2660;
   std::complex<double> tmp_2662;
   std::complex<double> tmp_2663;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2663 += ZDX(gI1,3 + j1)*ZDXR(gI2,j1);
   }
   tmp_2662 += tmp_2663;
   tmp_2657 += (std::complex<double>(0.,0.6708203932499369)*g1p*KroneckerDelta(
      7,gO1)) * tmp_2662;
   result += (std::complex<double>(0,-1)) * tmp_2657;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSeFePL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2664;
   std::complex<double> tmp_2665;
   std::complex<double> tmp_2666;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2666 += Conj(ZEL(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2665 += tmp_2666;
   tmp_2664 += (std::complex<double>(0.,0.5477225575051661)*g1*KroneckerDelta(0
      ,gO2)) * tmp_2665;
   std::complex<double> tmp_2667;
   std::complex<double> tmp_2668;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2668 += Conj(ZEL(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2667 += tmp_2668;
   tmp_2664 += (std::complex<double>(0.,0.7071067811865475)*g2*KroneckerDelta(1
      ,gO2)) * tmp_2667;
   std::complex<double> tmp_2669;
   std::complex<double> tmp_2670;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2670 += Conj(ZEL(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2669 += tmp_2670;
   tmp_2664 += (std::complex<double>(0.,-0.4472135954999579)*g1p*KroneckerDelta
      (7,gO2)) * tmp_2669;
   std::complex<double> tmp_2671;
   std::complex<double> tmp_2672;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2672 += Conj(ZEL(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2671 += tmp_2672;
   tmp_2664 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO2)) * tmp_2671;
   result += (std::complex<double>(0,-1)) * tmp_2664;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSeFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2673;
   std::complex<double> tmp_2674;
   std::complex<double> tmp_2675;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2675 += Conj(Ye(j1,j1))*ZE(gI1,j1)*ZER(gI2,j1);
   }
   tmp_2674 += tmp_2675;
   tmp_2673 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)) * tmp_2674;
   std::complex<double> tmp_2676;
   std::complex<double> tmp_2677;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2677 += ZE(gI1,3 + j1)*ZER(gI2,j1);
   }
   tmp_2676 += tmp_2677;
   tmp_2673 += (std::complex<double>(0.,-1.0954451150103321)*g1*KroneckerDelta(
      0,gO1)) * tmp_2676;
   std::complex<double> tmp_2678;
   std::complex<double> tmp_2679;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2679 += ZE(gI1,3 + j1)*ZER(gI2,j1);
   }
   tmp_2678 += tmp_2679;
   tmp_2673 += (std::complex<double>(0.,-0.22360679774997896)*g1p*
      KroneckerDelta(7,gO1)) * tmp_2678;
   result += (std::complex<double>(0,-1)) * tmp_2673;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSuFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2680;
   std::complex<double> tmp_2681;
   std::complex<double> tmp_2682;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2682 += Conj(ZUL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2681 += tmp_2682;
   tmp_2680 += (std::complex<double>(0.,-0.18257418583505536)*g1*KroneckerDelta
      (0,gO2)) * tmp_2681;
   std::complex<double> tmp_2683;
   std::complex<double> tmp_2684;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2684 += Conj(ZUL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2683 += tmp_2684;
   tmp_2680 += (std::complex<double>(0.,-0.7071067811865475)*g2*KroneckerDelta(
      1,gO2)) * tmp_2683;
   std::complex<double> tmp_2685;
   std::complex<double> tmp_2686;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2686 += Conj(ZUL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2685 += tmp_2686;
   tmp_2680 += (std::complex<double>(0.,-0.22360679774997896)*g1p*
      KroneckerDelta(7,gO2)) * tmp_2685;
   std::complex<double> tmp_2687;
   std::complex<double> tmp_2688;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2688 += Conj(ZUL(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2687 += tmp_2688;
   tmp_2680 += (std::complex<double>(0,-1)*KroneckerDelta(3,gO2)) * tmp_2687;
   result += (std::complex<double>(0,-1)) * tmp_2680;

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjSuFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2689;
   std::complex<double> tmp_2690;
   std::complex<double> tmp_2691;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2691 += Conj(Yu(j1,j1))*ZU(gI1,j1)*ZUR(gI2,j1);
   }
   tmp_2690 += tmp_2691;
   tmp_2689 += (std::complex<double>(0,-1)*KroneckerDelta(3,gO1)) * tmp_2690;
   std::complex<double> tmp_2692;
   std::complex<double> tmp_2693;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2693 += ZU(gI1,3 + j1)*ZUR(gI2,j1);
   }
   tmp_2692 += tmp_2693;
   tmp_2689 += (std::complex<double>(0.,0.7302967433402214)*g1*KroneckerDelta(0
      ,gO1)) * tmp_2692;
   std::complex<double> tmp_2694;
   std::complex<double> tmp_2695;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2695 += ZU(gI1,3 + j1)*ZUR(gI2,j1);
   }
   tmp_2694 += tmp_2695;
   tmp_2689 += (std::complex<double>(0.,-0.22360679774997896)*g1p*
      KroneckerDelta(7,gO1)) * tmp_2694;
   result += (std::complex<double>(0,-1)) * tmp_2689;

   return result;
}

std::complex<double> CLASSNAME::CpUChiChiAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(10*g2*Conj(ZN(gI1,1))*KroneckerDelta(
      2,gO2)*ZA(gI2,0) - 9.486832980505138*g1p*Conj(ZN(gI1,7))*KroneckerDelta(2,
      gO2)*ZA(gI2,0) + 14.142135623730951*Conj(ZN(gI1,4))*KroneckerDelta(3,gO2)*
      Lambdax*ZA(gI2,0) + 14.142135623730951*Conj(ZN(gI1,3))*KroneckerDelta(4,gO2)
      *Lambdax*ZA(gI2,0) + 7.745966692414834*g1*Conj(ZN(gI1,3))*KroneckerDelta(0,
      gO2)*ZA(gI2,1) - 10*g2*Conj(ZN(gI1,3))*KroneckerDelta(1,gO2)*ZA(gI2,1) - 10*
      g2*Conj(ZN(gI1,1))*KroneckerDelta(3,gO2)*ZA(gI2,1) - 6.324555320336759*g1p*
      Conj(ZN(gI1,7))*KroneckerDelta(3,gO2)*ZA(gI2,1) - 6.324555320336759*g1p*Conj
      (ZN(gI1,3))*KroneckerDelta(7,gO2)*ZA(gI2,1) + 14.142135623730951*Conj(ZN(gI1
      ,4))*KroneckerDelta(2,gO2)*Lambdax*ZA(gI2,1) + 7.745966692414834*g1*Conj(ZN(
      gI1,0))*(-(KroneckerDelta(2,gO2)*ZA(gI2,0)) + KroneckerDelta(3,gO2)*ZA(gI2,1
      )) + 3.1622776601683795*g1p*QS*Conj(ZN(gI1,7))*KroneckerDelta(4,gO2)*ZA(gI2,
      2) + 3.1622776601683795*g1p*QS*Conj(ZN(gI1,4))*KroneckerDelta(7,gO2)*ZA(gI2,
      2) + 14.142135623730951*Conj(ZN(gI1,3))*KroneckerDelta(2,gO2)*Lambdax*ZA(gI2
      ,2) + 14.142135623730951*Conj(ZN(gI1,6))*KroneckerDelta(5,gO2)*Sigmax*ZA(gI2
      ,2) + 14.142135623730951*Conj(ZN(gI1,5))*KroneckerDelta(6,gO2)*Sigmax*ZA(gI2
      ,2) + Conj(ZN(gI1,2))*(-7.745966692414834*g1*KroneckerDelta(0,gO2)*ZA(gI2,0)
      + 10*g2*KroneckerDelta(1,gO2)*ZA(gI2,0) + 1.4142135623730951*(
      -6.708203932499369*g1p*KroneckerDelta(7,gO2)*ZA(gI2,0) + 10*Lambdax*(
      KroneckerDelta(4,gO2)*ZA(gI2,1) + KroneckerDelta(3,gO2)*ZA(gI2,2)))) -
      3.1622776601683795*g1p*QS*Conj(ZN(gI1,7))*KroneckerDelta(5,gO2)*ZA(gI2,3) -
      3.1622776601683795*g1p*QS*Conj(ZN(gI1,5))*KroneckerDelta(7,gO2)*ZA(gI2,3) +
      14.142135623730951*Conj(ZN(gI1,6))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) +
      14.142135623730951*Conj(ZN(gI1,4))*KroneckerDelta(6,gO2)*Sigmax*ZA(gI2,3) -
      28.284271247461902*Conj(ZN(gI1,6))*KroneckerDelta(6,gO2)*KappaPr*ZA(gI2,4) +
      14.142135623730951*Conj(ZN(gI1,5))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,4) +
      14.142135623730951*Conj(ZN(gI1,4))*KroneckerDelta(5,gO2)*Sigmax*ZA(gI2,4));

   return result;
}

std::complex<double> CLASSNAME::CpUChiChiAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(7.745966692414834*g1*KroneckerDelta(0
      ,gO1)*ZA(gI2,0)*ZN(gI1,2) - 10*g2*KroneckerDelta(1,gO1)*ZA(gI2,0)*ZN(gI1,2)
      + 9.486832980505138*g1p*KroneckerDelta(7,gO1)*ZA(gI2,0)*ZN(gI1,2) -
      14.142135623730951*Conj(Lambdax)*KroneckerDelta(4,gO1)*ZA(gI2,1)*ZN(gI1,2) -
      14.142135623730951*Conj(Lambdax)*KroneckerDelta(4,gO1)*ZA(gI2,0)*ZN(gI1,3)
      - 7.745966692414834*g1*KroneckerDelta(0,gO1)*ZA(gI2,1)*ZN(gI1,3) + 10*g2*
      KroneckerDelta(1,gO1)*ZA(gI2,1)*ZN(gI1,3) + 6.324555320336759*g1p*
      KroneckerDelta(7,gO1)*ZA(gI2,1)*ZN(gI1,3) - 3.1622776601683795*g1p*QS*
      KroneckerDelta(7,gO1)*ZA(gI2,2)*ZN(gI1,4) - 14.142135623730951*Conj(Sigmax)*
      KroneckerDelta(6,gO1)*ZA(gI2,3)*ZN(gI1,4) - 14.142135623730951*Conj(Sigmax)*
      KroneckerDelta(5,gO1)*ZA(gI2,4)*ZN(gI1,4) - 14.142135623730951*Conj(Sigmax)*
      KroneckerDelta(6,gO1)*ZA(gI2,2)*ZN(gI1,5) + 3.1622776601683795*g1p*QS*
      KroneckerDelta(7,gO1)*ZA(gI2,3)*ZN(gI1,5) - 14.142135623730951*Conj(Sigmax)*
      KroneckerDelta(4,gO1)*ZA(gI2,4)*ZN(gI1,5) - 14.142135623730951*Conj(Sigmax)*
      KroneckerDelta(5,gO1)*ZA(gI2,2)*ZN(gI1,6) - 14.142135623730951*Conj(Sigmax)*
      KroneckerDelta(4,gO1)*ZA(gI2,3)*ZN(gI1,6) + 28.284271247461902*Conj(KappaPr)
      *KroneckerDelta(6,gO1)*ZA(gI2,4)*ZN(gI1,6) - 3.1622776601683795*g1p*QS*
      KroneckerDelta(4,gO1)*ZA(gI2,2)*ZN(gI1,7) + 3.1622776601683795*g1p*QS*
      KroneckerDelta(5,gO1)*ZA(gI2,3)*ZN(gI1,7) - 2*KroneckerDelta(3,gO1)*(
      7.0710678118654755*Conj(Lambdax)*(ZA(gI2,2)*ZN(gI1,2) + ZA(gI2,0)*ZN(gI1,4))
      + ZA(gI2,1)*(3.872983346207417*g1*ZN(gI1,0) - 5*g2*ZN(gI1,1) -
      3.1622776601683795*g1p*ZN(gI1,7))) + KroneckerDelta(2,gO1)*(
      -14.142135623730951*Conj(Lambdax)*(ZA(gI2,2)*ZN(gI1,3) + ZA(gI2,1)*ZN(gI1,4)
      ) + ZA(gI2,0)*(7.745966692414834*g1*ZN(gI1,0) - 10*g2*ZN(gI1,1) +
      9.486832980505138*g1p*ZN(gI1,7))));

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjVWmChaPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(1,gO2)*UP(gI2,0)) + 0.7071067811865475*g2*
      KroneckerDelta(3,gO2)*UP(gI2,1);

   return result;
}

std::complex<double> CLASSNAME::CpUChiconjVWmChaPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.5*g2*(2*Conj(UM(gI2,0))*KroneckerDelta(1,gO1) +
      1.4142135623730951*Conj(UM(gI2,1))*KroneckerDelta(2,gO1));

   return result;
}

std::complex<double> CLASSNAME::CpUChiVZChiPR(unsigned gO2, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*(KroneckerDelta(2,gO2)*(10*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) - 9.486832980505138*g1p*
      Sin(ThetaWp()))*ZN(gI2,2) - 2*KroneckerDelta(3,gO2)*(5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp()))*ZN(gI2,3) + 3.1622776601683795*g1p*QS
      *Sin(ThetaWp())*(KroneckerDelta(4,gO2)*ZN(gI2,4) - KroneckerDelta(5,gO2)*ZN(
      gI2,5)));

   return result;
}

std::complex<double> CLASSNAME::CpUChiVZChiPL(unsigned gO1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*(3.1622776601683795*g1p*QS*(-(Conj(ZN(gI2,4))*KroneckerDelta(4
      ,gO1)) + Conj(ZN(gI2,5))*KroneckerDelta(5,gO1))*Sin(ThetaWp()) + 2*Conj(ZN(
      gI2,3))*KroneckerDelta(3,gO1)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*
      Sin(ThetaWp())) + Conj(ZN(gI2,2))*KroneckerDelta(2,gO1)*(-10*g2*Cos(ThetaW()
      )*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      9.486832980505138*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpUChiVZpChiPR(unsigned gO2, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*(-(KroneckerDelta(2,gO2)*(9.486832980505138*g1p*Cos(ThetaWp())
      + 2*(5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()
      ))*ZN(gI2,2)) + 2*KroneckerDelta(3,gO2)*(-3.1622776601683795*g1p*Cos(ThetaWp
      ()) + 5*g2*Cos(ThetaW())*Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())
      *Sin(ThetaWp()))*ZN(gI2,3) + 3.1622776601683795*g1p*QS*Cos(ThetaWp())*(
      KroneckerDelta(4,gO2)*ZN(gI2,4) - KroneckerDelta(5,gO2)*ZN(gI2,5)));

   return result;
}

std::complex<double> CLASSNAME::CpUChiVZpChiPL(unsigned gO1, unsigned gI2) const
{
   const auto QS = LOCALINPUT(QS);

   std::complex<double> result;

   result = 0.05*(3.1622776601683795*g1p*QS*Cos(ThetaWp())*(-(Conj(ZN(gI2,4))*
      KroneckerDelta(4,gO1)) + Conj(ZN(gI2,5))*KroneckerDelta(5,gO1)) + 2*Conj(ZN(
      gI2,3))*KroneckerDelta(3,gO1)*(3.1622776601683795*g1p*Cos(ThetaWp()) - (5*g2
      *Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())) + Conj(
      ZN(gI2,2))*KroneckerDelta(2,gO1)*(9.486832980505138*g1p*Cos(ThetaWp()) + 2*(
      5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaSHppChiPPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UHpp(gI1,1))*Conj(ZNp(gI2,1))*KroneckerDelta(0,gO2));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaSHppChiPPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UHpp(gI1,0))*KroneckerDelta(0,gO1)*ZNp(gI2,0));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaChaAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,0.7071067811865475)*(g2*Conj(UM(gI1,0))*
      KroneckerDelta(1,gO2)*ZA(gI2,1) + Conj(UM(gI1,1))*(g2*KroneckerDelta(0,gO2)*
      ZA(gI2,0) - KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,2)));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaChaAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,-0.7071067811865475)*(g2*KroneckerDelta(0,
      gO1)*UP(gI1,1)*ZA(gI2,1) + KroneckerDelta(1,gO1)*(g2*UP(gI1,0)*ZA(gI2,0) -
      Conj(Lambdax)*UP(gI1,1)*ZA(gI2,2)));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaHpmChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(ZN(gI2,3))*Conj(ZP(gI1,1))*KroneckerDelta(0,gO2)) - 0.1*
      KroneckerDelta(1,gO2)*((5.477225575051661*g1*Conj(ZN(gI2,0)) +
      7.0710678118654755*g2*Conj(ZN(gI2,1)) - 4.47213595499958*g1p*Conj(ZN(gI2,7))
      )*Conj(ZP(gI1,1)) + 10*Conj(ZN(gI2,4))*Conj(ZP(gI1,0))*Lambdax);

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaHpmChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(Conj(Lambdax)*Conj(ZP(gI1,1))*KroneckerDelta(1,gO1)*ZN(gI2,4)) +
      0.1*Conj(ZP(gI1,0))*(-10*g2*KroneckerDelta(0,gO1)*ZN(gI2,2) + KroneckerDelta
      (1,gO1)*(5.477225575051661*g1*ZN(gI2,0) + 7.0710678118654755*g2*ZN(gI2,1) +
      6.708203932499369*g1p*ZN(gI2,7)));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSHp0ChaPPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(0,gO2)*UHp0(gI1,0));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSHp0ChaPPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(0,gO1)*UHp0(gI1,1));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSvFePL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2696;
   std::complex<double> tmp_2697;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2697 += Conj(ZEL(gI2,j1))*ZV(gI1,j1);
   }
   tmp_2696 += tmp_2697;
   result += (-(g2*KroneckerDelta(0,gO2))) * tmp_2696;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSvFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2698;
   std::complex<double> tmp_2699;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2699 += Conj(Ye(j1,j1))*ZER(gI2,j1)*ZV(gI1,j1);
   }
   tmp_2698 += tmp_2699;
   result += (KroneckerDelta(1,gO1)) * tmp_2698;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChabarFuSdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2700;
   std::complex<double> tmp_2701;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2701 += Conj(ZD(gI2,j1))*Conj(ZUR(gI1,j1))*Yu(j1,j1);
   }
   tmp_2700 += tmp_2701;
   result += (KroneckerDelta(1,gO2)) * tmp_2700;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChabarFuSdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2702;
   std::complex<double> tmp_2703;
   std::complex<double> tmp_2704;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2704 += Conj(ZD(gI2,j1))*ZUL(gI1,j1);
   }
   tmp_2703 += tmp_2704;
   tmp_2702 += (std::complex<double>(0,-1)*g2*KroneckerDelta(0,gO1)) * tmp_2703
      ;
   std::complex<double> tmp_2705;
   std::complex<double> tmp_2706;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2706 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZUL(gI1,j1);
   }
   tmp_2705 += tmp_2706;
   tmp_2702 += (std::complex<double>(0,1)*KroneckerDelta(1,gO1)) * tmp_2705;
   result += (std::complex<double>(0,-1)) * tmp_2702;

   return result;
}

double CLASSNAME::CpbarUChabarFvSePL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChabarFvSePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += -(g2*Conj(ZE(gI2,gI1))*KroneckerDelta(0,gO1));
   }
   if (gI1 < 3) {
      result += Conj(Ye(gI1,gI1))*Conj(ZE(gI2,3 + gI1))*KroneckerDelta(1,gO1
         );
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUChahhChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*(g2*Conj(UM(gI2,0))*Conj(ZH(gI1,1))*
      KroneckerDelta(1,gO2) + Conj(UM(gI2,1))*(g2*Conj(ZH(gI1,0))*KroneckerDelta(0
      ,gO2) + Conj(ZH(gI1,2))*KroneckerDelta(1,gO2)*Lambdax));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChahhChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*(g2*Conj(ZH(gI1,0))*KroneckerDelta(1,gO1)*UP(
      gI2,0) + (g2*Conj(ZH(gI1,1))*KroneckerDelta(0,gO1) + Conj(Lambdax)*Conj(ZH(
      gI1,2))*KroneckerDelta(1,gO1))*UP(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSuFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2707;
   std::complex<double> tmp_2708;
   std::complex<double> tmp_2709;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2709 += Conj(ZDL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2708 += tmp_2709;
   tmp_2707 += (std::complex<double>(0,-1)*g2*KroneckerDelta(0,gO2)) * tmp_2708
      ;
   std::complex<double> tmp_2710;
   std::complex<double> tmp_2711;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2711 += Conj(ZDL(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2710 += tmp_2711;
   tmp_2707 += (std::complex<double>(0,1)*KroneckerDelta(1,gO2)) * tmp_2710;
   result += (std::complex<double>(0,-1)) * tmp_2707;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaconjSuFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2712;
   std::complex<double> tmp_2713;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2713 += Conj(Yd(j1,j1))*ZDR(gI2,j1)*ZU(gI1,j1);
   }
   tmp_2712 += tmp_2713;
   result += (KroneckerDelta(1,gO1)) * tmp_2712;

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVPChaPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = g2*KroneckerDelta(0,gO2)*Sin(ThetaW())*UP(gI2,0) + 0.1*
      KroneckerDelta(1,gO2)*(3.872983346207417*g1*Cos(ThetaW()) + 5*g2*Sin(ThetaW(
      )))*UP(gI2,1);

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVPChaPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = g2*Conj(UM(gI2,0))*KroneckerDelta(0,gO1)*Sin(ThetaW()) + 0.1*Conj(
      UM(gI2,1))*KroneckerDelta(1,gO1)*(3.872983346207417*g1*Cos(ThetaW()) + 5*g2*
      Sin(ThetaW()));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVZChaPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = g2*Cos(ThetaW())*Cos(ThetaWp())*KroneckerDelta(0,gO2)*UP(gI2,0) +
      0.1*KroneckerDelta(1,gO2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*
      Sin(ThetaWp()))*UP(gI2,1);

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVZChaPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(20*g2*Conj(UM(gI2,0))*Cos(ThetaW())*Cos(ThetaWp())*
      KroneckerDelta(0,gO1) + Conj(UM(gI2,1))*KroneckerDelta(1,gO1)*(10*g2*Cos(
      ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())
      + 9.486832980505138*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVZpChaPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(-10*g2*Cos(ThetaW())*KroneckerDelta(0,gO2)*Sin(ThetaWp())*UP(
      gI2,0) + KroneckerDelta(1,gO2)*(-3.1622776601683795*g1p*Cos(ThetaWp()) + (-5
      *g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*UP(
      gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVZpChaPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-20*g2*Conj(UM(gI2,0))*Cos(ThetaW())*KroneckerDelta(0,gO1)*
      Sin(ThetaWp()) + Conj(UM(gI2,1))*KroneckerDelta(1,gO1)*(9.486832980505138*
      g1p*Cos(ThetaWp()) + 2*(-5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(
      ThetaW()))*Sin(ThetaWp())));

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVWmChiPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(0,gO2)*ZN(gI2,1)) + 0.7071067811865475*g2*
      KroneckerDelta(1,gO2)*ZN(gI2,3);

   return result;
}

std::complex<double> CLASSNAME::CpbarUChaVWmChiPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.5*g2*(2*Conj(ZN(gI2,1))*KroneckerDelta(0,gO1) +
      1.4142135623730951*Conj(ZN(gI2,2))*KroneckerDelta(1,gO1));

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeHpmFvPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += Conj(ZP(gI1,0))*KroneckerDelta(gI2,gO2)*Ye(gI2,gI2);
   }

   return result;
}

double CLASSNAME::CpbarUFeHpmFvPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeSvChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(UM(gI2,1))*Conj(ZV(gI1,gO2))*Ye(gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeSvChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(g2*Conj(ZV(gI1,gO1))*UP(gI2,0));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeFeAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZEL(gI1,
         gO2))*Ye(gO2,gO2)*ZA(gI2,0);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeFeAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Ye(gO1,gO1)
         )*ZA(gI2,0)*ZER(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFehhFePL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZEL(gI2,gO2))*Conj(ZH(gI1,0))*Ye(
         gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFehhFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*Conj(Ye(gO1,gO1))*Conj(ZH(gI1,0))*ZER(
         gI2,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeSeChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -1.0954451150103321*g1*Conj(ZE(gI1,3 + gO2))*Conj(ZN(gI2,0))
         ;
   }
   if (gO2 < 3) {
      result += -0.22360679774997896*g1p*Conj(ZE(gI1,3 + gO2))*Conj(ZN(gI2,7
         ));
   }
   if (gO2 < 3) {
      result += -(Conj(ZE(gI1,gO2))*Conj(ZN(gI2,2))*Ye(gO2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeSeChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(Conj(Ye(gO1,gO1))*Conj(ZE(gI1,3 + gO1))*ZN(gI2,2));
   }
   if (gO1 < 3) {
      result += 0.5477225575051661*g1*Conj(ZE(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.7071067811865475*g2*Conj(ZE(gI1,gO1))*ZN(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.4472135954999579*g1p*Conj(ZE(gI1,gO1))*ZN(gI2,7);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeVPFePR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.7745966692414834*g1*Cos(ThetaW())*ZER(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeVPFePL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.3872983346207417*g1*Conj(ZEL(gI2,gO1))*Cos(ThetaW());
   }
   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZEL(gI2,gO1))*Sin(ThetaW());
   }

   return result;
}

double CLASSNAME::CpbarUFeVWmFvPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

double CLASSNAME::CpbarUFeVWmFvPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   if (gI2 < 3) {
      result += -0.7071067811865475*g2*KroneckerDelta(gI2,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeVZFePR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())*ZER(gI2,
         gO2);
   }
   if (gI2 < 3) {
      result += 0.15811388300841897*g1p*Sin(ThetaWp())*ZER(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeVZFePL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZEL(gI2,gO1))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.3872983346207417*g1*Conj(ZEL(gI2,gO1))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 3) {
      result += -0.31622776601683794*g1p*Conj(ZEL(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeVZpFePR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.15811388300841897*g1p*Cos(ThetaWp())*ZER(gI2,gO2);
   }
   if (gI2 < 3) {
      result += 0.7745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp())*ZER(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFeVZpFePL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.31622776601683794*g1p*Conj(ZEL(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZEL(gI2,gO1))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.3872983346207417*g1*Conj(ZEL(gI2,gO1))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdHpmFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(ZP(gI1,0))*Conj(ZUL(gI2,gO2))*Yd(gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdHpmFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += Conj(Yu(gO1,gO1))*Conj(ZP(gI1,1))*ZUR(gI2,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdFdAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZDL(gI1,
         gO2))*Yd(gO2,gO2)*ZA(gI2,0);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdFdAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Yd(gO1,gO1)
         )*ZA(gI2,0)*ZDR(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdhhFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZDL(gI2,gO2))*Conj(ZH(gI1,0))*Yd(
         gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdhhFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*Conj(Yd(gO1,gO1))*Conj(ZH(gI1,0))*ZDR(
         gI2,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdSuChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(UM(gI2,1))*Conj(ZU(gI1,gO2))*Yd(gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdSuChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(g2*Conj(ZU(gI1,gO1))*UP(gI2,0));
   }
   if (gO1 < 3) {
      result += Conj(Yu(gO1,gO1))*Conj(ZU(gI1,3 + gO1))*UP(gI2,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdSdChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.3651483716701107*g1*Conj(ZD(gI1,3 + gO2))*Conj(ZN(gI2,0))
         ;
   }
   if (gO2 < 3) {
      result += -0.4472135954999579*g1p*Conj(ZD(gI1,3 + gO2))*Conj(ZN(gI2,7)
         );
   }
   if (gO2 < 3) {
      result += -(Conj(ZD(gI1,gO2))*Conj(ZN(gI2,2))*Yd(gO2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdSdChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.18257418583505536*g1*Conj(ZD(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.7071067811865475*g2*Conj(ZD(gI1,gO1))*ZN(gI2,1);
   }
   if (gO1 < 3) {
      result += -(Conj(Yd(gO1,gO1))*Conj(ZD(gI1,3 + gO1))*ZN(gI2,2));
   }
   if (gO1 < 3) {
      result += -0.22360679774997896*g1p*Conj(ZD(gI1,gO1))*ZN(gI2,7);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdSdGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 1.4142135623730951*g3*PhaseGlu*Conj(ZD(gI1,3 + gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdSdGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*Conj(PhaseGlu)*Conj(ZD(gI1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVGFdPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*ZDR(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVGFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*Conj(ZDL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVPFdPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Cos(ThetaW())*ZDR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVPFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZDL(gI2,gO1))*Cos(ThetaW());
   }
   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZDL(gI2,gO1))*Sin(ThetaW());
   }

   return result;
}

double CLASSNAME::CpbarUFdVWmFuPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVWmFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZUL(gI2,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVZFdPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.2581988897471611*g1*Cos(ThetaWp())*Sin(ThetaW())*ZDR(gI2,
         gO2);
   }
   if (gI2 < 3) {
      result += 0.31622776601683794*g1p*Sin(ThetaWp())*ZDR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVZFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZDL(gI2,gO1))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZDL(gI2,gO1))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 3) {
      result += -0.15811388300841897*g1p*Conj(ZDL(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVZpFdPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.31622776601683794*g1p*Cos(ThetaWp())*ZDR(gI2,gO2);
   }
   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp())*ZDR(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFdVZpFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.15811388300841897*g1p*Conj(ZDL(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZDL(gI2,gO1))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZDL(gI2,gO1))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuconjHpmFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(ZDL(gI2,gO2))*Yu(gO2,gO2)*ZP(gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuconjHpmFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += Conj(Yd(gO1,gO1))*ZDR(gI2,gO1)*ZP(gI1,0);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFubarChaSdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(UP(gI1,1))*Conj(ZD(gI2,gO2))*Yu(gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFubarChaSdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(g2*Conj(ZD(gI2,gO1))*UM(gI1,0));
   }
   if (gO1 < 3) {
      result += Conj(Yd(gO1,gO1))*Conj(ZD(gI2,3 + gO1))*UM(gI1,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuFuAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZUL(gI1,
         gO2))*Yu(gO2,gO2)*ZA(gI2,1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuFuAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Yu(gO1,gO1)
         )*ZA(gI2,1)*ZUR(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuhhFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZH(gI1,1))*Conj(ZUL(gI2,gO2))*Yu(
         gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuhhFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*Conj(Yu(gO1,gO1))*Conj(ZH(gI1,1))*ZUR(
         gI2,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuSuChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7302967433402214*g1*Conj(ZN(gI2,0))*Conj(ZU(gI1,3 + gO2));
   }
   if (gO2 < 3) {
      result += -0.22360679774997896*g1p*Conj(ZN(gI2,7))*Conj(ZU(gI1,3 + gO2
         ));
   }
   if (gO2 < 3) {
      result += -(Conj(ZN(gI2,3))*Conj(ZU(gI1,gO2))*Yu(gO2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuSuChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.18257418583505536*g1*Conj(ZU(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZU(gI1,gO1))*ZN(gI2,1);
   }
   if (gO1 < 3) {
      result += -(Conj(Yu(gO1,gO1))*Conj(ZU(gI1,3 + gO1))*ZN(gI2,3));
   }
   if (gO1 < 3) {
      result += -0.22360679774997896*g1p*Conj(ZU(gI1,gO1))*ZN(gI2,7);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuSuGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 1.4142135623730951*g3*PhaseGlu*Conj(ZU(gI1,3 + gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuSuGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*Conj(PhaseGlu)*Conj(ZU(gI1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVGFuPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*ZUR(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVGFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*Conj(ZUL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVPFuPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.5163977794943222*g1*Cos(ThetaW())*ZUR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVPFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZUL(gI2,gO1))*Cos(ThetaW());
   }
   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZUL(gI2,gO1))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVZFuPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5163977794943222*g1*Cos(ThetaWp())*Sin(ThetaW())*ZUR(gI2,
         gO2);
   }
   if (gI2 < 3) {
      result += 0.15811388300841897*g1p*Sin(ThetaWp())*ZUR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVZFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZUL(gI2,gO1))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZUL(gI2,gO1))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 3) {
      result += -0.15811388300841897*g1p*Conj(ZUL(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVZpFuPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.15811388300841897*g1p*Cos(ThetaWp())*ZUR(gI2,gO2);
   }
   if (gI2 < 3) {
      result += -0.5163977794943222*g1*Sin(ThetaW())*Sin(ThetaWp())*ZUR(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuVZpFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.15811388300841897*g1p*Conj(ZUL(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZUL(gI2,gO1))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZUL(gI2,gO1))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

double CLASSNAME::CpbarUFuconjVWmFdPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarUFuconjVWmFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZDL(gI2,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXFDXAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZDXL(gI1,
         gO2))*ZA(gI2,2)*Kappa(gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXFDXAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Kappa(gO1,
         gO1))*ZA(gI2,2)*ZDXR(gI1,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXhhFDXPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZDXL(gI2,gO2))*Conj(ZH(gI1,2))*
         Kappa(gO2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXhhFDXPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*Conj(ZH(gI1,2))*Conj(Kappa(gO1,gO1))*
         ZDXR(gI2,gO1);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXSDXChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.3651483716701107*g1*Conj(ZDX(gI1,3 + gO2))*Conj(ZN(gI2,0)
         );
   }
   if (gO2 < 3) {
      result += 0.6708203932499369*g1p*Conj(ZDX(gI1,3 + gO2))*Conj(ZN(gI2,7)
         );
   }
   if (gO2 < 3) {
      result += -(Conj(ZDX(gI1,gO2))*Conj(ZN(gI2,4))*Kappa(gO2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXSDXChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += 0.3651483716701107*g1*Conj(ZDX(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 3) {
      result += -(Conj(ZDX(gI1,3 + gO1))*Conj(Kappa(gO1,gO1))*ZN(gI2,4));
   }
   if (gO1 < 3) {
      result += 0.4472135954999579*g1p*Conj(ZDX(gI1,gO1))*ZN(gI2,7);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXSDXGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 1.4142135623730951*g3*PhaseGlu*Conj(ZDX(gI1,3 + gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXSDXGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*Conj(PhaseGlu)*Conj(ZDX(gI1,gO1));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVGFDXPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*ZDXR(gI2,gO2));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVGFDXPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*Conj(ZDXL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVPFDXPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Cos(ThetaW())*ZDXR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVPFDXPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Conj(ZDXL(gI2,gO1))*Cos(ThetaW());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVZFDXPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.2581988897471611*g1*Cos(ThetaWp())*Sin(ThetaW())*ZDXR(gI2
         ,gO2);
   }
   if (gI2 < 3) {
      result += -0.4743416490252569*g1p*Sin(ThetaWp())*ZDXR(gI2,gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVZFDXPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.2581988897471611*g1*Conj(ZDXL(gI2,gO1))*Cos(ThetaWp())*
         Sin(ThetaW());
   }
   if (gI2 < 3) {
      result += 0.31622776601683794*g1p*Conj(ZDXL(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVZpFDXPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.4743416490252569*g1p*Cos(ThetaWp())*ZDXR(gI2,gO2);
   }
   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp())*ZDXR(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CLASSNAME::CpbarUFDXVZpFDXPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.31622776601683794*g1p*Conj(ZDXL(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Conj(ZDXL(gI2,gO1))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CLASSNAME::CpUChiPconjSHppChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UM(gI2,0))*KroneckerDelta(0,gO2)*UHpp(gI1,0));

   return result;
}

std::complex<double> CLASSNAME::CpUChiPconjSHppChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(1,gO1)*UHpp(gI1,1)*UP(gI2,0));

   return result;
}

std::complex<double> CLASSNAME::CpUChiPconjSHp0ChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*(0.7745966692414834*g1*Conj(ZN(gI2,0)) - g2*Conj
      (ZN(gI2,1)) - 0.6324555320336759*g1p*Conj(ZN(gI2,7)))*KroneckerDelta(0,gO2)*
      UHp0(gI1,0);

   return result;
}

std::complex<double> CLASSNAME::CpUChiPconjSHp0ChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*KroneckerDelta(1,gO1)*UHp0(gI1,1)*(
      -0.7745966692414834*g1*ZN(gI2,0) + g2*ZN(gI2,1) + 0.6324555320336759*g1p*ZN(
      gI2,7));

   return result;
}

std::complex<double> CLASSNAME::CpUChiPVZChiPPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*Sin(ThetaWp()))*(
      KroneckerDelta(0,gO2)*ZNp(gI2,0) - KroneckerDelta(1,gO2)*ZNp(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUChiPVZChiPPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*(Conj(ZNp(gI2,0))*KroneckerDelta(0,gO1) - Conj(ZNp(gI2,1))*
      KroneckerDelta(1,gO1))*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpUChiPVZpChiPPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(3.1622776601683795*g1p*Cos(ThetaWp()) - (5*g2*Cos(ThetaW()) +
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*(KroneckerDelta(0,gO2)*
      ZNp(gI2,0) - KroneckerDelta(1,gO2)*ZNp(gI2,1));

   return result;
}

std::complex<double> CLASSNAME::CpUChiPVZpChiPPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*(Conj(ZNp(gI2,0))*KroneckerDelta(0,gO1) - Conj(ZNp(gI2,1))*
      KroneckerDelta(1,gO1))*(3.1622776601683795*g1p*Cos(ThetaWp()) - (5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpUChiPconjVWmChaPPR(unsigned gO2, unsigned ) const
{
   double result = 0.0;

   result = 0.7071067811865475*g2*KroneckerDelta(1,gO2);

   return result;
}

double CLASSNAME::CpUChiPconjVWmChaPPL(unsigned gO1, unsigned ) const
{
   double result = 0.0;

   result = -0.7071067811865475*g2*KroneckerDelta(0,gO1);

   return result;
}

std::complex<double> CLASSNAME::CpGluconjSdFdPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2714;
   std::complex<double> tmp_2715;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2715 += Conj(ZDL(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2714 += tmp_2715;
   result += (-1.4142135623730951*g3*PhaseGlu) * tmp_2714;

   return result;
}

std::complex<double> CLASSNAME::CpGluconjSdFdPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2716;
   std::complex<double> tmp_2717;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2717 += ZD(gI1,3 + j1)*ZDR(gI2,j1);
   }
   tmp_2716 += tmp_2717;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_2716;

   return result;
}

std::complex<double> CLASSNAME::CpGluconjSDXFDXPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2718;
   std::complex<double> tmp_2719;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2719 += Conj(ZDXL(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2718 += tmp_2719;
   result += (-1.4142135623730951*g3*PhaseGlu) * tmp_2718;

   return result;
}

std::complex<double> CLASSNAME::CpGluconjSDXFDXPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2720;
   std::complex<double> tmp_2721;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2721 += ZDX(gI1,3 + j1)*ZDXR(gI2,j1);
   }
   tmp_2720 += tmp_2721;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_2720;

   return result;
}

std::complex<double> CLASSNAME::CpGluconjSuFuPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2722;
   std::complex<double> tmp_2723;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2723 += Conj(ZUL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2722 += tmp_2723;
   result += (-1.4142135623730951*g3*PhaseGlu) * tmp_2722;

   return result;
}

std::complex<double> CLASSNAME::CpGluconjSuFuPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2724;
   std::complex<double> tmp_2725;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2725 += ZU(gI1,3 + j1)*ZUR(gI2,j1);
   }
   tmp_2724 += tmp_2725;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_2724;

   return result;
}

std::complex<double> CLASSNAME::CpGluVGGluPR() const
{
   std::complex<double> result;

   result = std::complex<double>(0,-1)*g3*AbsSqr(PhaseGlu);

   return result;
}

std::complex<double> CLASSNAME::CpGluVGGluPL() const
{
   std::complex<double> result;

   result = std::complex<double>(0,-1)*g3*AbsSqr(PhaseGlu);

   return result;
}

std::complex<double> CLASSNAME::CpbarChaPSHp0ChaPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UHp0(gI1,1))*Conj(UM(gI2,0)));

   return result;
}

std::complex<double> CLASSNAME::CpbarChaPSHp0ChaPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UHp0(gI1,0))*UP(gI2,0));

   return result;
}

std::complex<double> CLASSNAME::CpbarChaPSHppChiPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*Conj(UHpp(gI1,1))*(0.7745966692414834*g1*Conj(
      ZN(gI2,0)) + g2*Conj(ZN(gI2,1)) - 0.6324555320336759*g1p*Conj(ZN(gI2,7)));

   return result;
}

std::complex<double> CLASSNAME::CpbarChaPSHppChiPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*Conj(UHpp(gI1,0))*(0.7745966692414834*g1*ZN(gI2,
      0) + g2*ZN(gI2,1) - 0.6324555320336759*g1p*ZN(gI2,7));

   return result;
}

std::complex<double> CLASSNAME::CpbarChaPVWmChiPPR(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*ZNp(gI2,1);

   return result;
}

std::complex<double> CLASSNAME::CpbarChaPVWmChiPPL(unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*g2*Conj(ZNp(gI2,0));

   return result;
}

double CLASSNAME::CpbarChaPVPChaPPR() const
{
   double result = 0.0;

   result = 0.5*(0.7745966692414834*g1*Cos(ThetaW()) + g2*Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpbarChaPVPChaPPL() const
{
   double result = 0.0;

   result = 0.5*(0.7745966692414834*g1*Cos(ThetaW()) + g2*Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpbarChaPVZChaPPR() const
{
   double result = 0.0;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarChaPVZChaPPL() const
{
   double result = 0.0;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarChaPVZpChaPPR() const
{
   double result = 0.0;

   result = 0.1*(-3.1622776601683795*g1p*Cos(ThetaWp()) - 5*g2*Cos(ThetaW())*
      Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarChaPVZpChaPPL() const
{
   double result = 0.0;

   result = 0.1*(-3.1622776601683795*g1p*Cos(ThetaWp()) - 5*g2*Cos(ThetaW())*
      Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpconjVWmbarVWmVZp() const
{
   double result = 0.0;

   result = 0;

   return result;
}

double CLASSNAME::CpconjVWmbarVZpVWm() const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeHpmFvPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += Conj(ZER(gO2,gI2))*Conj(ZP(gI1,0))*Ye(gI2,gI2);
   }

   return result;
}

double CLASSNAME::CpbarFeHpmFvPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeSvChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2726;
   std::complex<double> tmp_2727;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2727 += Conj(ZER(gO2,j1))*Conj(ZV(gI1,j1))*Ye(j1,j1);
   }
   tmp_2726 += tmp_2727;
   result += (Conj(UM(gI2,1))) * tmp_2726;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeSvChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2728;
   std::complex<double> tmp_2729;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2729 += Conj(ZV(gI1,j1))*ZEL(gO1,j1);
   }
   tmp_2728 += tmp_2729;
   result += (-(g2*UP(gI2,0))) * tmp_2728;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeFeAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2730;
   std::complex<double> tmp_2731;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2731 += Conj(ZEL(gI1,j1))*Conj(ZER(gO2,j1))*Ye(j1,j1);
   }
   tmp_2730 += tmp_2731;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) *
      tmp_2730;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeFeAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2732;
   std::complex<double> tmp_2733;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2733 += Conj(Ye(j1,j1))*ZEL(gO1,j1)*ZER(gI1,j1);
   }
   tmp_2732 += tmp_2733;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,0)) * tmp_2732
      ;

   return result;
}

std::complex<double> CLASSNAME::CpbarFehhFePL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2734;
   std::complex<double> tmp_2735;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2735 += Conj(ZEL(gI2,j1))*Conj(ZER(gO2,j1))*Ye(j1,j1);
   }
   tmp_2734 += tmp_2735;
   result += (-0.7071067811865475*Conj(ZH(gI1,0))) * tmp_2734;

   return result;
}

std::complex<double> CLASSNAME::CpbarFehhFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2736;
   std::complex<double> tmp_2737;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2737 += Conj(Ye(j1,j1))*ZEL(gO1,j1)*ZER(gI2,j1);
   }
   tmp_2736 += tmp_2737;
   result += (-0.7071067811865475*Conj(ZH(gI1,0))) * tmp_2736;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeSeChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2738;
   std::complex<double> tmp_2739;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2739 += Conj(ZE(gI1,3 + j1))*Conj(ZER(gO2,j1));
   }
   tmp_2738 += tmp_2739;
   result += (-1.0954451150103321*g1*Conj(ZN(gI2,0))) * tmp_2738;
   std::complex<double> tmp_2740;
   std::complex<double> tmp_2741;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2741 += Conj(ZE(gI1,3 + j1))*Conj(ZER(gO2,j1));
   }
   tmp_2740 += tmp_2741;
   result += (-0.22360679774997896*g1p*Conj(ZN(gI2,7))) * tmp_2740;
   std::complex<double> tmp_2742;
   std::complex<double> tmp_2743;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2743 += Conj(ZE(gI1,j1))*Conj(ZER(gO2,j1))*Ye(j1,j1);
   }
   tmp_2742 += tmp_2743;
   result += (-Conj(ZN(gI2,2))) * tmp_2742;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeSeChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2744;
   std::complex<double> tmp_2745;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2745 += Conj(Ye(j1,j1))*Conj(ZE(gI1,3 + j1))*ZEL(gO1,j1);
   }
   tmp_2744 += tmp_2745;
   result += (-ZN(gI2,2)) * tmp_2744;
   std::complex<double> tmp_2746;
   std::complex<double> tmp_2747;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2747 += Conj(ZE(gI1,j1))*ZEL(gO1,j1);
   }
   tmp_2746 += tmp_2747;
   result += (0.7071067811865475*(0.7745966692414834*g1*ZN(gI2,0) + g2*ZN(gI2,1
      ) - 0.6324555320336759*g1p*ZN(gI2,7))) * tmp_2746;

   return result;
}

double CLASSNAME::CpbarFeVWmFvPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarFeVWmFvPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.7071067811865475*g2*ZEL(gO1,gI2);
   }

   return result;
}

double CLASSNAME::CpbarFeVZFePR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = -0.05*KroneckerDelta(gI2,gO2)*(15.491933384829668*g1*Cos(ThetaWp())
      *Sin(ThetaW()) - 3.1622776601683795*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFeVZFePL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI2,gO1)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFeVZpFePR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = 0.05*KroneckerDelta(gI2,gO2)*(3.1622776601683795*g1p*Cos(ThetaWp())
      + 15.491933384829668*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFeVZpFePL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI2,gO1)*(3.1622776601683795*g1p*Cos(ThetaWp())
      + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))
      ;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdHpmFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2748;
   std::complex<double> tmp_2749;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2749 += Conj(ZDR(gO2,j1))*Conj(ZUL(gI2,j1))*Yd(j1,j1);
   }
   tmp_2748 += tmp_2749;
   result += (Conj(ZP(gI1,0))) * tmp_2748;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdHpmFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2750;
   std::complex<double> tmp_2751;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2751 += Conj(Yu(j1,j1))*ZDL(gO1,j1)*ZUR(gI2,j1);
   }
   tmp_2750 += tmp_2751;
   result += (Conj(ZP(gI1,1))) * tmp_2750;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdFdAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2752;
   std::complex<double> tmp_2753;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2753 += Conj(ZDL(gI1,j1))*Conj(ZDR(gO2,j1))*Yd(j1,j1);
   }
   tmp_2752 += tmp_2753;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) *
      tmp_2752;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdFdAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2754;
   std::complex<double> tmp_2755;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2755 += Conj(Yd(j1,j1))*ZDL(gO1,j1)*ZDR(gI1,j1);
   }
   tmp_2754 += tmp_2755;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,0)) * tmp_2754
      ;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdhhFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2756;
   std::complex<double> tmp_2757;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2757 += Conj(ZDL(gI2,j1))*Conj(ZDR(gO2,j1))*Yd(j1,j1);
   }
   tmp_2756 += tmp_2757;
   result += (-0.7071067811865475*Conj(ZH(gI1,0))) * tmp_2756;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdhhFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2758;
   std::complex<double> tmp_2759;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2759 += Conj(Yd(j1,j1))*ZDL(gO1,j1)*ZDR(gI2,j1);
   }
   tmp_2758 += tmp_2759;
   result += (-0.7071067811865475*Conj(ZH(gI1,0))) * tmp_2758;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdSuChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2760;
   std::complex<double> tmp_2761;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2761 += Conj(ZDR(gO2,j1))*Conj(ZU(gI1,j1))*Yd(j1,j1);
   }
   tmp_2760 += tmp_2761;
   result += (Conj(UM(gI2,1))) * tmp_2760;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdSuChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2762;
   std::complex<double> tmp_2763;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2763 += Conj(ZU(gI1,j1))*ZDL(gO1,j1);
   }
   tmp_2762 += tmp_2763;
   result += (-(g2*UP(gI2,0))) * tmp_2762;
   std::complex<double> tmp_2764;
   std::complex<double> tmp_2765;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2765 += Conj(Yu(j1,j1))*Conj(ZU(gI1,3 + j1))*ZDL(gO1,j1);
   }
   tmp_2764 += tmp_2765;
   result += (UP(gI2,1)) * tmp_2764;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdSdChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2766;
   std::complex<double> tmp_2767;
   std::complex<double> tmp_2768;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2768 += Conj(ZD(gI1,3 + j1))*Conj(ZDR(gO2,j1));
   }
   tmp_2767 += tmp_2768;
   tmp_2766 += (-1.0954451150103321*g1*Conj(ZN(gI2,0))) * tmp_2767;
   std::complex<double> tmp_2769;
   std::complex<double> tmp_2770;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2770 += Conj(ZD(gI1,3 + j1))*Conj(ZDR(gO2,j1));
   }
   tmp_2769 += tmp_2770;
   tmp_2766 += (-1.3416407864998738*g1p*Conj(ZN(gI2,7))) * tmp_2769;
   std::complex<double> tmp_2771;
   std::complex<double> tmp_2772;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2772 += Conj(ZD(gI1,j1))*Conj(ZDR(gO2,j1))*Yd(j1,j1);
   }
   tmp_2771 += tmp_2772;
   tmp_2766 += (-3*Conj(ZN(gI2,2))) * tmp_2771;
   result += (0.3333333333333333) * tmp_2766;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdSdChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2773;
   std::complex<double> tmp_2774;
   std::complex<double> tmp_2775;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2775 += Conj(Yd(j1,j1))*Conj(ZD(gI1,3 + j1))*ZDL(gO1,j1);
   }
   tmp_2774 += tmp_2775;
   tmp_2773 += (-6*ZN(gI2,2)) * tmp_2774;
   std::complex<double> tmp_2776;
   std::complex<double> tmp_2777;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2777 += Conj(ZD(gI1,j1))*ZDL(gO1,j1);
   }
   tmp_2776 += tmp_2777;
   tmp_2773 += (-1.4142135623730951*(0.7745966692414834*g1*ZN(gI2,0) - 3*g2*ZN(
      gI2,1) + 0.9486832980505138*g1p*ZN(gI2,7))) * tmp_2776;
   result += (0.16666666666666666) * tmp_2773;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdSdGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   std::complex<double> tmp_2778;
   std::complex<double> tmp_2779;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2779 += Conj(ZD(gI1,3 + j1))*Conj(ZDR(gO2,j1));
   }
   tmp_2778 += tmp_2779;
   result += (1.4142135623730951*g3*PhaseGlu) * tmp_2778;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdSdGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   std::complex<double> tmp_2780;
   std::complex<double> tmp_2781;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2781 += Conj(ZD(gI1,j1))*ZDL(gO1,j1);
   }
   tmp_2780 += tmp_2781;
   result += (-1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_2780;

   return result;
}

double CLASSNAME::CpbarFdVWmFuPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarFdVWmFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2782;
   std::complex<double> tmp_2783;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2783 += Conj(ZUL(gI2,j1))*ZDL(gO1,j1);
   }
   tmp_2782 += tmp_2783;
   result += (-0.7071067811865475*g2) * tmp_2782;

   return result;
}

double CLASSNAME::CpbarFdVZFdPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI2,gO2)*(-0.2581988897471611*g1*Cos(ThetaWp())*Sin(
      ThetaW()) + 0.31622776601683794*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFdVZFdPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.16666666666666666*KroneckerDelta(gI2,gO1)*(3*g2*Cos(ThetaW())*Cos
      (ThetaWp()) + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      0.9486832980505138*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFdVZpFdPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI2,gO2)*(0.31622776601683794*g1p*Cos(ThetaWp()) +
      0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFdVZpFdPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.16666666666666666*KroneckerDelta(gI2,gO1)*(0.9486832980505138*
      g1p*Cos(ThetaWp()) + 3*g2*Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*
      g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

std::complex<double> CLASSNAME::CpbarFuconjHpmFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2784;
   std::complex<double> tmp_2785;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2785 += Conj(ZDL(gI2,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_2784 += tmp_2785;
   result += (ZP(gI1,1)) * tmp_2784;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuconjHpmFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2786;
   std::complex<double> tmp_2787;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2787 += Conj(Yd(j1,j1))*ZDR(gI2,j1)*ZUL(gO1,j1);
   }
   tmp_2786 += tmp_2787;
   result += (ZP(gI1,0)) * tmp_2786;

   return result;
}

std::complex<double> CLASSNAME::CpbarFubarChaSdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2788;
   std::complex<double> tmp_2789;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2789 += Conj(ZD(gI2,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_2788 += tmp_2789;
   result += (Conj(UP(gI1,1))) * tmp_2788;

   return result;
}

std::complex<double> CLASSNAME::CpbarFubarChaSdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2790;
   std::complex<double> tmp_2791;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2791 += Conj(ZD(gI2,j1))*ZUL(gO1,j1);
   }
   tmp_2790 += tmp_2791;
   result += (-(g2*UM(gI1,0))) * tmp_2790;
   std::complex<double> tmp_2792;
   std::complex<double> tmp_2793;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2793 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZUL(gO1,j1);
   }
   tmp_2792 += tmp_2793;
   result += (UM(gI1,1)) * tmp_2792;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuFuAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2794;
   std::complex<double> tmp_2795;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2795 += Conj(ZUL(gI1,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_2794 += tmp_2795;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,1)) *
      tmp_2794;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuFuAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2796;
   std::complex<double> tmp_2797;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2797 += Conj(Yu(j1,j1))*ZUL(gO1,j1)*ZUR(gI1,j1);
   }
   tmp_2796 += tmp_2797;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,1)) * tmp_2796
      ;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuhhFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2798;
   std::complex<double> tmp_2799;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2799 += Conj(ZUL(gI2,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_2798 += tmp_2799;
   result += (-0.7071067811865475*Conj(ZH(gI1,1))) * tmp_2798;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuhhFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2800;
   std::complex<double> tmp_2801;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2801 += Conj(Yu(j1,j1))*ZUL(gO1,j1)*ZUR(gI2,j1);
   }
   tmp_2800 += tmp_2801;
   result += (-0.7071067811865475*Conj(ZH(gI1,1))) * tmp_2800;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuSuChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2802;
   std::complex<double> tmp_2803;
   std::complex<double> tmp_2804;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2804 += Conj(ZU(gI1,3 + j1))*Conj(ZUR(gO2,j1));
   }
   tmp_2803 += tmp_2804;
   tmp_2802 += (2.1908902300206643*g1*Conj(ZN(gI2,0))) * tmp_2803;
   std::complex<double> tmp_2805;
   std::complex<double> tmp_2806;
   std::complex<double> tmp_2807;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2807 += Conj(ZU(gI1,3 + j1))*Conj(ZUR(gO2,j1));
   }
   tmp_2806 += tmp_2807;
   tmp_2805 += (0.22360679774997896*g1p*Conj(ZN(gI2,7))) * tmp_2806;
   std::complex<double> tmp_2808;
   std::complex<double> tmp_2809;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2809 += Conj(ZU(gI1,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_2808 += tmp_2809;
   tmp_2805 += (Conj(ZN(gI2,3))) * tmp_2808;
   tmp_2802 += (-3) * tmp_2805;
   result += (0.3333333333333333) * tmp_2802;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuSuChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2810;
   std::complex<double> tmp_2811;
   std::complex<double> tmp_2812;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2812 += Conj(Yu(j1,j1))*Conj(ZU(gI1,3 + j1))*ZUL(gO1,j1);
   }
   tmp_2811 += tmp_2812;
   tmp_2810 += (-6*ZN(gI2,3)) * tmp_2811;
   std::complex<double> tmp_2813;
   std::complex<double> tmp_2814;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2814 += Conj(ZU(gI1,j1))*ZUL(gO1,j1);
   }
   tmp_2813 += tmp_2814;
   tmp_2810 += (-1.4142135623730951*(0.7745966692414834*g1*ZN(gI2,0) + 3*g2*ZN(
      gI2,1) + 0.9486832980505138*g1p*ZN(gI2,7))) * tmp_2813;
   result += (0.16666666666666666) * tmp_2810;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuSuGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   std::complex<double> tmp_2815;
   std::complex<double> tmp_2816;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2816 += Conj(ZU(gI1,3 + j1))*Conj(ZUR(gO2,j1));
   }
   tmp_2815 += tmp_2816;
   result += (1.4142135623730951*g3*PhaseGlu) * tmp_2815;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuSuGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   std::complex<double> tmp_2817;
   std::complex<double> tmp_2818;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2818 += Conj(ZU(gI1,j1))*ZUL(gO1,j1);
   }
   tmp_2817 += tmp_2818;
   result += (-1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_2817;

   return result;
}

double CLASSNAME::CpbarFuVPFuPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = -0.5163977794943222*g1*Cos(ThetaW())*KroneckerDelta(gI2,gO2);

   return result;
}

double CLASSNAME::CpbarFuVPFuPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.16666666666666666*KroneckerDelta(gI2,gO1)*(0.7745966692414834*g1
      *Cos(ThetaW()) + 3*g2*Sin(ThetaW()));

   return result;
}

double CLASSNAME::CpbarFuVZFuPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI2,gO2)*(30.983866769659336*g1
      *Cos(ThetaWp())*Sin(ThetaW()) + 9.486832980505138*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFuVZFuPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI2,gO1)*(30*g2*Cos(ThetaW())*
      Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      9.486832980505138*g1p*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFuVZpFuPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI2,gO2)*(9.486832980505138*g1p
      *Cos(ThetaWp()) - 30.983866769659336*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFuVZpFuPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.16666666666666666*KroneckerDelta(gI2,gO1)*(0.9486832980505138*
      g1p*Cos(ThetaWp()) - 3*g2*Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*
      g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CLASSNAME::CpbarFuconjVWmFdPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CLASSNAME::CpbarFuconjVWmFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2819;
   std::complex<double> tmp_2820;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2820 += Conj(ZDL(gI2,j1))*ZUL(gO1,j1);
   }
   tmp_2819 += tmp_2820;
   result += (-0.7071067811865475*g2) * tmp_2819;

   return result;
}


std::complex<double> CLASSNAME::self_energy_Sd(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSdconjUSdconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSdconjUSdVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSdconjUSdVZVZ(gO1,gO2);
   std::complex<double> tmp_2821;
   std::complex<double> tmp_2822;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_2822 += A0(MHpm(gI1))*CpUSdconjUSdconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_2821 += tmp_2822;
   result += (-1) * tmp_2821;
   std::complex<double> tmp_2823;
   std::complex<double> tmp_2824;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_2824 += A0(MSHp0(gI1))*CpUSdconjUSdconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_2823 += tmp_2824;
   result += (-1) * tmp_2823;
   std::complex<double> tmp_2825;
   std::complex<double> tmp_2826;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_2826 += A0(MSHpp(gI1))*CpUSdconjUSdconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_2825 += tmp_2826;
   result += (-1) * tmp_2825;
   std::complex<double> tmp_2827;
   std::complex<double> tmp_2828;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_2828 += A0(MSv(gI1))*CpUSdconjUSdconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_2827 += tmp_2828;
   result += (-1) * tmp_2827;
   std::complex<double> tmp_2829;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2830;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_2830 += (Conj(CpconjUSdFuChaPL(gO2,gI1,gI2))*
            CpconjUSdFuChaPL(gO1,gI1,gI2) + Conj(CpconjUSdFuChaPR(gO2,gI1,gI2))*
            CpconjUSdFuChaPR(gO1,gI1,gI2))*G0(p,MFu(gI1),MCha(gI2));
      }
      tmp_2829 += tmp_2830;
   }
   result += tmp_2829;
   std::complex<double> tmp_2831;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2832;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_2832 += (Conj(CpconjUSdFdChiPL(gO2,gI1,gI2))*
            CpconjUSdFdChiPL(gO1,gI1,gI2) + Conj(CpconjUSdFdChiPR(gO2,gI1,gI2))*
            CpconjUSdFdChiPR(gO1,gI1,gI2))*G0(p,MFd(gI1),MChi(gI2));
      }
      tmp_2831 += tmp_2832;
   }
   result += tmp_2831;
   std::complex<double> tmp_2833;
   std::complex<double> tmp_2834;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2835;
      std::complex<double> tmp_2836;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_2836 += B0(p,MFd(gI1),MChi(gI2))*(Conj(CpconjUSdFdChiPR(gO2,
            gI1,gI2))*CpconjUSdFdChiPL(gO1,gI1,gI2) + Conj(CpconjUSdFdChiPL(gO2,
            gI1,gI2))*CpconjUSdFdChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_2835 += tmp_2836;
      tmp_2834 += (MFd(gI1)) * tmp_2835;
   }
   tmp_2833 += tmp_2834;
   result += (-2) * tmp_2833;
   std::complex<double> tmp_2837;
   std::complex<double> tmp_2838;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2839;
      std::complex<double> tmp_2840;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_2840 += B0(p,MFu(gI1),MCha(gI2))*(Conj(CpconjUSdFuChaPR(gO2,
            gI1,gI2))*CpconjUSdFuChaPL(gO1,gI1,gI2) + Conj(CpconjUSdFuChaPL(gO2,
            gI1,gI2))*CpconjUSdFuChaPR(gO1,gI1,gI2))*MCha(gI2);
      }
      tmp_2839 += tmp_2840;
      tmp_2838 += (MFu(gI1)) * tmp_2839;
   }
   tmp_2837 += tmp_2838;
   result += (-2) * tmp_2837;
   std::complex<double> tmp_2841;
   std::complex<double> tmp_2842;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_2842 += A0(MAh(gI1))*CpUSdconjUSdAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_2841 += tmp_2842;
   result += (-0.5) * tmp_2841;
   std::complex<double> tmp_2843;
   std::complex<double> tmp_2844;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_2844 += A0(Mhh(gI1))*CpUSdconjUSdhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_2843 += tmp_2844;
   result += (-0.5) * tmp_2843;
   std::complex<double> tmp_2845;
   std::complex<double> tmp_2846;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2846 += A0(MSd(gI1))*CpUSdconjUSdconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_2845 += tmp_2846;
   result += (-1) * tmp_2845;
   std::complex<double> tmp_2847;
   std::complex<double> tmp_2848;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2848 += A0(MSDX(gI1))*CpUSdconjUSdconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_2847 += tmp_2848;
   result += (-1) * tmp_2847;
   std::complex<double> tmp_2849;
   std::complex<double> tmp_2850;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2850 += A0(MSe(gI1))*CpUSdconjUSdconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_2849 += tmp_2850;
   result += (-1) * tmp_2849;
   std::complex<double> tmp_2851;
   std::complex<double> tmp_2852;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2852 += A0(MSu(gI1))*CpUSdconjUSdconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_2851 += tmp_2852;
   result += (-1) * tmp_2851;
   std::complex<double> tmp_2853;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_2854;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_2854 += B0(p,MSu(gI1),MHpm(gI2))*Conj(CpconjUSdSuHpm(gO2,gI1
            ,gI2))*CpconjUSdSuHpm(gO1,gI1,gI2);
      }
      tmp_2853 += tmp_2854;
   }
   result += tmp_2853;
   std::complex<double> tmp_2855;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_2856;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_2856 += B0(p,MSd(gI1),MAh(gI2))*Conj(CpconjUSdSdAh(gO2,gI1,
            gI2))*CpconjUSdSdAh(gO1,gI1,gI2);
      }
      tmp_2855 += tmp_2856;
   }
   result += tmp_2855;
   std::complex<double> tmp_2857;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_2858;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_2858 += B0(p,MSd(gI1),Mhh(gI2))*Conj(CpconjUSdSdhh(gO2,gI1,
            gI2))*CpconjUSdSdhh(gO1,gI1,gI2);
      }
      tmp_2857 += tmp_2858;
   }
   result += tmp_2857;
   std::complex<double> tmp_2859;
   std::complex<double> tmp_2860;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_2860 += (Conj(CpconjUSdGluFdPL(gO2,1,gI2))*CpconjUSdGluFdPL(gO1,1,
         gI2) + Conj(CpconjUSdGluFdPR(gO2,1,gI2))*CpconjUSdGluFdPR(gO1,1,gI2))*G0(
         p,MGlu,MFd(gI2));
   }
   tmp_2859 += tmp_2860;
   result += (1.3333333333333333) * tmp_2859;
   std::complex<double> tmp_2861;
   std::complex<double> tmp_2862;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2862 += Conj(CpconjUSdVGSd(gO2,gI2))*CpconjUSdVGSd(gO1,gI2)*F0(p,
         MSd(gI2),0);
   }
   tmp_2861 += tmp_2862;
   result += (1.3333333333333333) * tmp_2861;
   std::complex<double> tmp_2863;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2863 += Conj(CpconjUSdVPSd(gO2,gI2))*CpconjUSdVPSd(gO1,gI2)*F0(p,
         MSd(gI2),0);
   }
   result += tmp_2863;
   std::complex<double> tmp_2864;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2864 += Conj(CpconjUSdVZSd(gO2,gI2))*CpconjUSdVZSd(gO1,gI2)*F0(p,
         MSd(gI2),MVZ);
   }
   result += tmp_2864;
   std::complex<double> tmp_2865;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2865 += Conj(CpconjUSdVZpSd(gO2,gI2))*CpconjUSdVZpSd(gO1,gI2)*F0(p
         ,MSd(gI2),MVZp);
   }
   result += tmp_2865;
   std::complex<double> tmp_2866;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2866 += Conj(CpconjUSdVWmSu(gO2,gI2))*CpconjUSdVWmSu(gO1,gI2)*F0(p
         ,MSu(gI2),MVWm);
   }
   result += tmp_2866;
   std::complex<double> tmp_2867;
   std::complex<double> tmp_2868;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_2868 += B0(p,MGlu,MFd(gI2))*(Conj(CpconjUSdGluFdPR(gO2,1,gI2))*
         CpconjUSdGluFdPL(gO1,1,gI2) + Conj(CpconjUSdGluFdPL(gO2,1,gI2))*
         CpconjUSdGluFdPR(gO1,1,gI2))*MFd(gI2);
   }
   tmp_2867 += tmp_2868;
   result += (-2.6666666666666665*MGlu) * tmp_2867;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Sv(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSvconjUSvconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSvconjUSvVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSvconjUSvVZVZ(gO1,gO2);
   std::complex<double> tmp_2869;
   std::complex<double> tmp_2870;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_2870 += A0(MHpm(gI1))*CpUSvconjUSvconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_2869 += tmp_2870;
   result += (-1) * tmp_2869;
   std::complex<double> tmp_2871;
   std::complex<double> tmp_2872;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_2872 += A0(MSHp0(gI1))*CpUSvconjUSvconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_2871 += tmp_2872;
   result += (-1) * tmp_2871;
   std::complex<double> tmp_2873;
   std::complex<double> tmp_2874;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_2874 += A0(MSHpp(gI1))*CpUSvconjUSvconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_2873 += tmp_2874;
   result += (-1) * tmp_2873;
   std::complex<double> tmp_2875;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_2876;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_2876 += (Conj(CpconjUSvbarChaFePL(gO2,gI1,gI2))*
            CpconjUSvbarChaFePL(gO1,gI1,gI2) + Conj(CpconjUSvbarChaFePR(gO2,gI1,
            gI2))*CpconjUSvbarChaFePR(gO1,gI1,gI2))*G0(p,MCha(gI1),MFe(gI2));
      }
      tmp_2875 += tmp_2876;
   }
   result += tmp_2875;
   std::complex<double> tmp_2877;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_2878;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_2878 += B0(p,MHpm(gI1),MSe(gI2))*Conj(CpconjUSvconjHpmSe(gO2
            ,gI1,gI2))*CpconjUSvconjHpmSe(gO1,gI1,gI2);
      }
      tmp_2877 += tmp_2878;
   }
   result += tmp_2877;
   std::complex<double> tmp_2879;
   std::complex<double> tmp_2880;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_2881;
      std::complex<double> tmp_2882;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_2882 += B0(p,MCha(gI1),MFe(gI2))*(Conj(CpconjUSvbarChaFePR(
            gO2,gI1,gI2))*CpconjUSvbarChaFePL(gO1,gI1,gI2) + Conj(
            CpconjUSvbarChaFePL(gO2,gI1,gI2))*CpconjUSvbarChaFePR(gO1,gI1,gI2))*
            MFe(gI2);
      }
      tmp_2881 += tmp_2882;
      tmp_2880 += (MCha(gI1)) * tmp_2881;
   }
   tmp_2879 += tmp_2880;
   result += (-2) * tmp_2879;
   std::complex<double> tmp_2883;
   std::complex<double> tmp_2884;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_2884 += A0(MSv(gI1))*CpUSvconjUSvconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_2883 += tmp_2884;
   result += (-1) * tmp_2883;
   std::complex<double> tmp_2885;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2886;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_2886 += B0(p,MSv(gI1),Mhh(gI2))*Conj(CpconjUSvSvhh(gO2,gI1,
            gI2))*CpconjUSvSvhh(gO1,gI1,gI2);
      }
      tmp_2885 += tmp_2886;
   }
   result += tmp_2885;
   std::complex<double> tmp_2887;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2888;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_2888 += (Conj(CpconjUSvFvChiPL(gO2,gI1,gI2))*
            CpconjUSvFvChiPL(gO1,gI1,gI2) + Conj(CpconjUSvFvChiPR(gO2,gI1,gI2))*
            CpconjUSvFvChiPR(gO1,gI1,gI2))*G0(p,MFv(gI1),MChi(gI2));
      }
      tmp_2887 += tmp_2888;
   }
   result += tmp_2887;
   std::complex<double> tmp_2889;
   std::complex<double> tmp_2890;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2891;
      std::complex<double> tmp_2892;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_2892 += B0(p,MFv(gI1),MChi(gI2))*(Conj(CpconjUSvFvChiPR(gO2,
            gI1,gI2))*CpconjUSvFvChiPL(gO1,gI1,gI2) + Conj(CpconjUSvFvChiPL(gO2,
            gI1,gI2))*CpconjUSvFvChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_2891 += tmp_2892;
      tmp_2890 += (MFv(gI1)) * tmp_2891;
   }
   tmp_2889 += tmp_2890;
   result += (-2) * tmp_2889;
   std::complex<double> tmp_2893;
   std::complex<double> tmp_2894;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_2894 += A0(MAh(gI1))*CpUSvconjUSvAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_2893 += tmp_2894;
   result += (-0.5) * tmp_2893;
   std::complex<double> tmp_2895;
   std::complex<double> tmp_2896;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_2896 += A0(Mhh(gI1))*CpUSvconjUSvhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_2895 += tmp_2896;
   result += (-0.5) * tmp_2895;
   std::complex<double> tmp_2897;
   std::complex<double> tmp_2898;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2898 += A0(MSd(gI1))*CpUSvconjUSvconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_2897 += tmp_2898;
   result += (-3) * tmp_2897;
   std::complex<double> tmp_2899;
   std::complex<double> tmp_2900;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2900 += A0(MSDX(gI1))*CpUSvconjUSvconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_2899 += tmp_2900;
   result += (-3) * tmp_2899;
   std::complex<double> tmp_2901;
   std::complex<double> tmp_2902;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2902 += A0(MSe(gI1))*CpUSvconjUSvconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_2901 += tmp_2902;
   result += (-1) * tmp_2901;
   std::complex<double> tmp_2903;
   std::complex<double> tmp_2904;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2904 += A0(MSu(gI1))*CpUSvconjUSvconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_2903 += tmp_2904;
   result += (-3) * tmp_2903;
   std::complex<double> tmp_2905;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_2905 += Conj(CpconjUSvVZSv(gO2,gI2))*CpconjUSvVZSv(gO1,gI2)*F0(p,
         MSv(gI2),MVZ);
   }
   result += tmp_2905;
   std::complex<double> tmp_2906;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_2906 += Conj(CpconjUSvVZpSv(gO2,gI2))*CpconjUSvVZpSv(gO1,gI2)*F0(p
         ,MSv(gI2),MVZp);
   }
   result += tmp_2906;
   std::complex<double> tmp_2907;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2907 += Conj(CpconjUSvconjVWmSe(gO2,gI2))*CpconjUSvconjVWmSe(gO1,
         gI2)*F0(p,MSe(gI2),MVWm);
   }
   result += tmp_2907;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Su(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSuconjUSuconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSuconjUSuVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSuconjUSuVZVZ(gO1,gO2);
   std::complex<double> tmp_2908;
   std::complex<double> tmp_2909;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_2909 += A0(MHpm(gI1))*CpUSuconjUSuconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_2908 += tmp_2909;
   result += (-1) * tmp_2908;
   std::complex<double> tmp_2910;
   std::complex<double> tmp_2911;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_2911 += A0(MSHp0(gI1))*CpUSuconjUSuconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_2910 += tmp_2911;
   result += (-1) * tmp_2910;
   std::complex<double> tmp_2912;
   std::complex<double> tmp_2913;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_2913 += A0(MSHpp(gI1))*CpUSuconjUSuconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_2912 += tmp_2913;
   result += (-1) * tmp_2912;
   std::complex<double> tmp_2914;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_2915;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_2915 += (Conj(CpconjUSubarChaFdPL(gO2,gI1,gI2))*
            CpconjUSubarChaFdPL(gO1,gI1,gI2) + Conj(CpconjUSubarChaFdPR(gO2,gI1,
            gI2))*CpconjUSubarChaFdPR(gO1,gI1,gI2))*G0(p,MCha(gI1),MFd(gI2));
      }
      tmp_2914 += tmp_2915;
   }
   result += tmp_2914;
   std::complex<double> tmp_2916;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_2917;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_2917 += B0(p,MHpm(gI1),MSd(gI2))*Conj(CpconjUSuconjHpmSd(gO2
            ,gI1,gI2))*CpconjUSuconjHpmSd(gO1,gI1,gI2);
      }
      tmp_2916 += tmp_2917;
   }
   result += tmp_2916;
   std::complex<double> tmp_2918;
   std::complex<double> tmp_2919;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_2920;
      std::complex<double> tmp_2921;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_2921 += B0(p,MCha(gI1),MFd(gI2))*(Conj(CpconjUSubarChaFdPR(
            gO2,gI1,gI2))*CpconjUSubarChaFdPL(gO1,gI1,gI2) + Conj(
            CpconjUSubarChaFdPL(gO2,gI1,gI2))*CpconjUSubarChaFdPR(gO1,gI1,gI2))*
            MFd(gI2);
      }
      tmp_2920 += tmp_2921;
      tmp_2919 += (MCha(gI1)) * tmp_2920;
   }
   tmp_2918 += tmp_2919;
   result += (-2) * tmp_2918;
   std::complex<double> tmp_2922;
   std::complex<double> tmp_2923;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_2923 += A0(MSv(gI1))*CpUSuconjUSuconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_2922 += tmp_2923;
   result += (-1) * tmp_2922;
   std::complex<double> tmp_2924;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2925;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_2925 += (Conj(CpconjUSuFuChiPL(gO2,gI1,gI2))*
            CpconjUSuFuChiPL(gO1,gI1,gI2) + Conj(CpconjUSuFuChiPR(gO2,gI1,gI2))*
            CpconjUSuFuChiPR(gO1,gI1,gI2))*G0(p,MFu(gI1),MChi(gI2));
      }
      tmp_2924 += tmp_2925;
   }
   result += tmp_2924;
   std::complex<double> tmp_2926;
   std::complex<double> tmp_2927;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2928;
      std::complex<double> tmp_2929;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_2929 += B0(p,MFu(gI1),MChi(gI2))*(Conj(CpconjUSuFuChiPR(gO2,
            gI1,gI2))*CpconjUSuFuChiPL(gO1,gI1,gI2) + Conj(CpconjUSuFuChiPL(gO2,
            gI1,gI2))*CpconjUSuFuChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_2928 += tmp_2929;
      tmp_2927 += (MFu(gI1)) * tmp_2928;
   }
   tmp_2926 += tmp_2927;
   result += (-2) * tmp_2926;
   std::complex<double> tmp_2930;
   std::complex<double> tmp_2931;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_2931 += A0(MAh(gI1))*CpUSuconjUSuAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_2930 += tmp_2931;
   result += (-0.5) * tmp_2930;
   std::complex<double> tmp_2932;
   std::complex<double> tmp_2933;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_2933 += A0(Mhh(gI1))*CpUSuconjUSuhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_2932 += tmp_2933;
   result += (-0.5) * tmp_2932;
   std::complex<double> tmp_2934;
   std::complex<double> tmp_2935;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2935 += A0(MSd(gI1))*CpUSuconjUSuconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_2934 += tmp_2935;
   result += (-1) * tmp_2934;
   std::complex<double> tmp_2936;
   std::complex<double> tmp_2937;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2937 += A0(MSDX(gI1))*CpUSuconjUSuconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_2936 += tmp_2937;
   result += (-1) * tmp_2936;
   std::complex<double> tmp_2938;
   std::complex<double> tmp_2939;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2939 += A0(MSe(gI1))*CpUSuconjUSuconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_2938 += tmp_2939;
   result += (-1) * tmp_2938;
   std::complex<double> tmp_2940;
   std::complex<double> tmp_2941;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2941 += A0(MSu(gI1))*CpUSuconjUSuconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_2940 += tmp_2941;
   result += (-1) * tmp_2940;
   std::complex<double> tmp_2942;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_2943;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_2943 += B0(p,MSu(gI1),MAh(gI2))*Conj(CpconjUSuSuAh(gO2,gI1,
            gI2))*CpconjUSuSuAh(gO1,gI1,gI2);
      }
      tmp_2942 += tmp_2943;
   }
   result += tmp_2942;
   std::complex<double> tmp_2944;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_2945;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_2945 += B0(p,MSu(gI1),Mhh(gI2))*Conj(CpconjUSuSuhh(gO2,gI1,
            gI2))*CpconjUSuSuhh(gO1,gI1,gI2);
      }
      tmp_2944 += tmp_2945;
   }
   result += tmp_2944;
   std::complex<double> tmp_2946;
   std::complex<double> tmp_2947;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_2947 += (Conj(CpconjUSuGluFuPL(gO2,1,gI2))*CpconjUSuGluFuPL(gO1,1,
         gI2) + Conj(CpconjUSuGluFuPR(gO2,1,gI2))*CpconjUSuGluFuPR(gO1,1,gI2))*G0(
         p,MGlu,MFu(gI2));
   }
   tmp_2946 += tmp_2947;
   result += (1.3333333333333333) * tmp_2946;
   std::complex<double> tmp_2948;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2948 += Conj(CpconjUSuconjVWmSd(gO2,gI2))*CpconjUSuconjVWmSd(gO1,
         gI2)*F0(p,MSd(gI2),MVWm);
   }
   result += tmp_2948;
   std::complex<double> tmp_2949;
   std::complex<double> tmp_2950;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2950 += Conj(CpconjUSuVGSu(gO2,gI2))*CpconjUSuVGSu(gO1,gI2)*F0(p,
         MSu(gI2),0);
   }
   tmp_2949 += tmp_2950;
   result += (1.3333333333333333) * tmp_2949;
   std::complex<double> tmp_2951;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2951 += Conj(CpconjUSuVPSu(gO2,gI2))*CpconjUSuVPSu(gO1,gI2)*F0(p,
         MSu(gI2),0);
   }
   result += tmp_2951;
   std::complex<double> tmp_2952;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2952 += Conj(CpconjUSuVZSu(gO2,gI2))*CpconjUSuVZSu(gO1,gI2)*F0(p,
         MSu(gI2),MVZ);
   }
   result += tmp_2952;
   std::complex<double> tmp_2953;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2953 += Conj(CpconjUSuVZpSu(gO2,gI2))*CpconjUSuVZpSu(gO1,gI2)*F0(p
         ,MSu(gI2),MVZp);
   }
   result += tmp_2953;
   std::complex<double> tmp_2954;
   std::complex<double> tmp_2955;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_2955 += B0(p,MGlu,MFu(gI2))*(Conj(CpconjUSuGluFuPR(gO2,1,gI2))*
         CpconjUSuGluFuPL(gO1,1,gI2) + Conj(CpconjUSuGluFuPL(gO2,1,gI2))*
         CpconjUSuGluFuPR(gO1,1,gI2))*MFu(gI2);
   }
   tmp_2954 += tmp_2955;
   result += (-2.6666666666666665*MGlu) * tmp_2954;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Se(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSeconjUSeconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSeconjUSeVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSeconjUSeVZVZ(gO1,gO2);
   std::complex<double> tmp_2956;
   std::complex<double> tmp_2957;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_2957 += A0(MHpm(gI1))*CpUSeconjUSeconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_2956 += tmp_2957;
   result += (-1) * tmp_2956;
   std::complex<double> tmp_2958;
   std::complex<double> tmp_2959;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_2959 += A0(MSHp0(gI1))*CpUSeconjUSeconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_2958 += tmp_2959;
   result += (-1) * tmp_2958;
   std::complex<double> tmp_2960;
   std::complex<double> tmp_2961;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_2961 += A0(MSHpp(gI1))*CpUSeconjUSeconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_2960 += tmp_2961;
   result += (-1) * tmp_2960;
   std::complex<double> tmp_2962;
   std::complex<double> tmp_2963;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_2963 += A0(MSv(gI1))*CpUSeconjUSeconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_2962 += tmp_2963;
   result += (-1) * tmp_2962;
   std::complex<double> tmp_2964;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2965;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_2965 += B0(p,MSv(gI1),MHpm(gI2))*Conj(CpconjUSeSvHpm(gO2,gI1
            ,gI2))*CpconjUSeSvHpm(gO1,gI1,gI2);
      }
      tmp_2964 += tmp_2965;
   }
   result += tmp_2964;
   std::complex<double> tmp_2966;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2967;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_2967 += (Conj(CpconjUSeFvChaPL(gO2,gI1,gI2))*
            CpconjUSeFvChaPL(gO1,gI1,gI2) + Conj(CpconjUSeFvChaPR(gO2,gI1,gI2))*
            CpconjUSeFvChaPR(gO1,gI1,gI2))*G0(p,MFv(gI1),MCha(gI2));
      }
      tmp_2966 += tmp_2967;
   }
   result += tmp_2966;
   std::complex<double> tmp_2968;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2969;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_2969 += (Conj(CpconjUSeFeChiPL(gO2,gI1,gI2))*
            CpconjUSeFeChiPL(gO1,gI1,gI2) + Conj(CpconjUSeFeChiPR(gO2,gI1,gI2))*
            CpconjUSeFeChiPR(gO1,gI1,gI2))*G0(p,MFe(gI1),MChi(gI2));
      }
      tmp_2968 += tmp_2969;
   }
   result += tmp_2968;
   std::complex<double> tmp_2970;
   std::complex<double> tmp_2971;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2972;
      std::complex<double> tmp_2973;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_2973 += B0(p,MFe(gI1),MChi(gI2))*(Conj(CpconjUSeFeChiPR(gO2,
            gI1,gI2))*CpconjUSeFeChiPL(gO1,gI1,gI2) + Conj(CpconjUSeFeChiPL(gO2,
            gI1,gI2))*CpconjUSeFeChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_2972 += tmp_2973;
      tmp_2971 += (MFe(gI1)) * tmp_2972;
   }
   tmp_2970 += tmp_2971;
   result += (-2) * tmp_2970;
   std::complex<double> tmp_2974;
   std::complex<double> tmp_2975;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_2976;
      std::complex<double> tmp_2977;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_2977 += B0(p,MFv(gI1),MCha(gI2))*(Conj(CpconjUSeFvChaPR(gO2,
            gI1,gI2))*CpconjUSeFvChaPL(gO1,gI1,gI2) + Conj(CpconjUSeFvChaPL(gO2,
            gI1,gI2))*CpconjUSeFvChaPR(gO1,gI1,gI2))*MCha(gI2);
      }
      tmp_2976 += tmp_2977;
      tmp_2975 += (MFv(gI1)) * tmp_2976;
   }
   tmp_2974 += tmp_2975;
   result += (-2) * tmp_2974;
   std::complex<double> tmp_2978;
   std::complex<double> tmp_2979;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_2979 += A0(MAh(gI1))*CpUSeconjUSeAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_2978 += tmp_2979;
   result += (-0.5) * tmp_2978;
   std::complex<double> tmp_2980;
   std::complex<double> tmp_2981;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_2981 += A0(Mhh(gI1))*CpUSeconjUSehhhh(gO1,gO2,gI1,gI1);
   }
   tmp_2980 += tmp_2981;
   result += (-0.5) * tmp_2980;
   std::complex<double> tmp_2982;
   std::complex<double> tmp_2983;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2983 += A0(MSd(gI1))*CpUSeconjUSeconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_2982 += tmp_2983;
   result += (-3) * tmp_2982;
   std::complex<double> tmp_2984;
   std::complex<double> tmp_2985;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2985 += A0(MSDX(gI1))*CpUSeconjUSeconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_2984 += tmp_2985;
   result += (-3) * tmp_2984;
   std::complex<double> tmp_2986;
   std::complex<double> tmp_2987;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2987 += A0(MSe(gI1))*CpUSeconjUSeconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_2986 += tmp_2987;
   result += (-1) * tmp_2986;
   std::complex<double> tmp_2988;
   std::complex<double> tmp_2989;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_2989 += A0(MSu(gI1))*CpUSeconjUSeconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_2988 += tmp_2989;
   result += (-3) * tmp_2988;
   std::complex<double> tmp_2990;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_2991;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_2991 += B0(p,MSe(gI1),MAh(gI2))*Conj(CpconjUSeSeAh(gO2,gI1,
            gI2))*CpconjUSeSeAh(gO1,gI1,gI2);
      }
      tmp_2990 += tmp_2991;
   }
   result += tmp_2990;
   std::complex<double> tmp_2992;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_2993;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_2993 += B0(p,MSe(gI1),Mhh(gI2))*Conj(CpconjUSeSehh(gO2,gI1,
            gI2))*CpconjUSeSehh(gO1,gI1,gI2);
      }
      tmp_2992 += tmp_2993;
   }
   result += tmp_2992;
   std::complex<double> tmp_2994;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_2994 += Conj(CpconjUSeVWmSv(gO2,gI2))*CpconjUSeVWmSv(gO1,gI2)*F0(p
         ,MSv(gI2),MVWm);
   }
   result += tmp_2994;
   std::complex<double> tmp_2995;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2995 += Conj(CpconjUSeVPSe(gO2,gI2))*CpconjUSeVPSe(gO1,gI2)*F0(p,
         MSe(gI2),0);
   }
   result += tmp_2995;
   std::complex<double> tmp_2996;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2996 += Conj(CpconjUSeVZSe(gO2,gI2))*CpconjUSeVZSe(gO1,gI2)*F0(p,
         MSe(gI2),MVZ);
   }
   result += tmp_2996;
   std::complex<double> tmp_2997;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_2997 += Conj(CpconjUSeVZpSe(gO2,gI2))*CpconjUSeVZpSe(gO1,gI2)*F0(p
         ,MSe(gI2),MVZp);
   }
   result += tmp_2997;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_SDX(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 2*A0(MVZp)*CpUSDXconjUSDXVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSDXconjUSDXVZVZ(gO1,gO2);
   std::complex<double> tmp_2998;
   std::complex<double> tmp_2999;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_2999 += A0(MHpm(gI1))*CpUSDXconjUSDXconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_2998 += tmp_2999;
   result += (-1) * tmp_2998;
   std::complex<double> tmp_3000;
   std::complex<double> tmp_3001;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3001 += A0(MSHp0(gI1))*CpUSDXconjUSDXconjSHp0SHp0(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_3000 += tmp_3001;
   result += (-1) * tmp_3000;
   std::complex<double> tmp_3002;
   std::complex<double> tmp_3003;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3003 += A0(MSHpp(gI1))*CpUSDXconjUSDXconjSHppSHpp(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_3002 += tmp_3003;
   result += (-1) * tmp_3002;
   std::complex<double> tmp_3004;
   std::complex<double> tmp_3005;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_3005 += A0(MSv(gI1))*CpUSDXconjUSDXconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_3004 += tmp_3005;
   result += (-1) * tmp_3004;
   std::complex<double> tmp_3006;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3007;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3007 += (Conj(CpconjUSDXFDXChiPL(gO2,gI1,gI2))*
            CpconjUSDXFDXChiPL(gO1,gI1,gI2) + Conj(CpconjUSDXFDXChiPR(gO2,gI1,gI2)
            )*CpconjUSDXFDXChiPR(gO1,gI1,gI2))*G0(p,MFDX(gI1),MChi(gI2));
      }
      tmp_3006 += tmp_3007;
   }
   result += tmp_3006;
   std::complex<double> tmp_3008;
   std::complex<double> tmp_3009;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3010;
      std::complex<double> tmp_3011;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3011 += B0(p,MFDX(gI1),MChi(gI2))*(Conj(CpconjUSDXFDXChiPR(
            gO2,gI1,gI2))*CpconjUSDXFDXChiPL(gO1,gI1,gI2) + Conj(
            CpconjUSDXFDXChiPL(gO2,gI1,gI2))*CpconjUSDXFDXChiPR(gO1,gI1,gI2))*MChi
            (gI2);
      }
      tmp_3010 += tmp_3011;
      tmp_3009 += (MFDX(gI1)) * tmp_3010;
   }
   tmp_3008 += tmp_3009;
   result += (-2) * tmp_3008;
   std::complex<double> tmp_3012;
   std::complex<double> tmp_3013;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3013 += A0(MAh(gI1))*CpUSDXconjUSDXAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_3012 += tmp_3013;
   result += (-0.5) * tmp_3012;
   std::complex<double> tmp_3014;
   std::complex<double> tmp_3015;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3015 += A0(Mhh(gI1))*CpUSDXconjUSDXhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_3014 += tmp_3015;
   result += (-0.5) * tmp_3014;
   std::complex<double> tmp_3016;
   std::complex<double> tmp_3017;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3017 += A0(MSd(gI1))*CpUSDXconjUSDXconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_3016 += tmp_3017;
   result += (-1) * tmp_3016;
   std::complex<double> tmp_3018;
   std::complex<double> tmp_3019;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3019 += A0(MSDX(gI1))*CpUSDXconjUSDXconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_3018 += tmp_3019;
   result += (-1) * tmp_3018;
   std::complex<double> tmp_3020;
   std::complex<double> tmp_3021;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3021 += A0(MSe(gI1))*CpUSDXconjUSDXconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_3020 += tmp_3021;
   result += (-1) * tmp_3020;
   std::complex<double> tmp_3022;
   std::complex<double> tmp_3023;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3023 += A0(MSu(gI1))*CpUSDXconjUSDXconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_3022 += tmp_3023;
   result += (-1) * tmp_3022;
   std::complex<double> tmp_3024;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3025;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3025 += B0(p,MSDX(gI1),MAh(gI2))*Conj(CpconjUSDXSDXAh(gO2,
            gI1,gI2))*CpconjUSDXSDXAh(gO1,gI1,gI2);
      }
      tmp_3024 += tmp_3025;
   }
   result += tmp_3024;
   std::complex<double> tmp_3026;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3027;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3027 += B0(p,MSDX(gI1),Mhh(gI2))*Conj(CpconjUSDXSDXhh(gO2,
            gI1,gI2))*CpconjUSDXSDXhh(gO1,gI1,gI2);
      }
      tmp_3026 += tmp_3027;
   }
   result += tmp_3026;
   std::complex<double> tmp_3028;
   std::complex<double> tmp_3029;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3029 += (Conj(CpconjUSDXGluFDXPL(gO2,1,gI2))*CpconjUSDXGluFDXPL(
         gO1,1,gI2) + Conj(CpconjUSDXGluFDXPR(gO2,1,gI2))*CpconjUSDXGluFDXPR(gO1,1
         ,gI2))*G0(p,MGlu,MFDX(gI2));
   }
   tmp_3028 += tmp_3029;
   result += (1.3333333333333333) * tmp_3028;
   std::complex<double> tmp_3030;
   std::complex<double> tmp_3031;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_3031 += Conj(CpconjUSDXVGSDX(gO2,gI2))*CpconjUSDXVGSDX(gO1,gI2)*F0
         (p,MSDX(gI2),0);
   }
   tmp_3030 += tmp_3031;
   result += (1.3333333333333333) * tmp_3030;
   std::complex<double> tmp_3032;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_3032 += Conj(CpconjUSDXVPSDX(gO2,gI2))*CpconjUSDXVPSDX(gO1,gI2)*F0
         (p,MSDX(gI2),0);
   }
   result += tmp_3032;
   std::complex<double> tmp_3033;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_3033 += Conj(CpconjUSDXVZSDX(gO2,gI2))*CpconjUSDXVZSDX(gO1,gI2)*F0
         (p,MSDX(gI2),MVZ);
   }
   result += tmp_3033;
   std::complex<double> tmp_3034;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_3034 += Conj(CpconjUSDXVZpSDX(gO2,gI2))*CpconjUSDXVZpSDX(gO1,gI2)*
         F0(p,MSDX(gI2),MVZp);
   }
   result += tmp_3034;
   std::complex<double> tmp_3035;
   std::complex<double> tmp_3036;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3036 += B0(p,MGlu,MFDX(gI2))*(Conj(CpconjUSDXGluFDXPR(gO2,1,gI2))*
         CpconjUSDXGluFDXPL(gO1,1,gI2) + Conj(CpconjUSDXGluFDXPL(gO2,1,gI2))*
         CpconjUSDXGluFDXPR(gO1,1,gI2))*MFDX(gI2);
   }
   tmp_3035 += tmp_3036;
   result += (-2.6666666666666665*MGlu) * tmp_3035;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_hh(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += -(B0(p,MVWm,MVWm)*CpUhhbargWmCgWmC(gO1)*CpUhhbargWmCgWmC(gO2));
   result += -(B0(p,MVWm,MVWm)*CpUhhbargWmgWm(gO1)*CpUhhbargWmgWm(gO2));
   result += -(B0(p,MVZ,MVZ)*CpUhhbargZgZ(gO1)*CpUhhbargZgZ(gO2));
   result += -2*B0(p,MVZ,MVZp)*CpUhhbargZpgZ(gO1)*CpUhhbargZpgZ(gO2);
   result += -(B0(p,MVZp,MVZp)*CpUhhbargZpgZp(gO1)*CpUhhbargZpgZp(gO2));
   result += 4*B0(p,MVWm,MVWm)*Conj(CpUhhconjVWmVWm(gO2))*CpUhhconjVWmVWm(gO1);
   result += 4*A0(MVWm)*CpUhhUhhconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUhhUhhVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUhhUhhVZVZ(gO1,gO2);
   result += 4*B0(p,MVZ,MVZp)*Conj(CpUhhVZpVZ(gO2))*CpUhhVZpVZ(gO1);
   result += 2*B0(p,MVZp,MVZp)*Conj(CpUhhVZpVZp(gO2))*CpUhhVZpVZp(gO1);
   result += 2*B0(p,MVZ,MVZ)*Conj(CpUhhVZVZ(gO2))*CpUhhVZVZ(gO1);
   std::complex<double> tmp_3037;
   std::complex<double> tmp_3038;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3038 += A0(MHpm(gI1))*CpUhhUhhconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_3037 += tmp_3038;
   result += (-1) * tmp_3037;
   std::complex<double> tmp_3039;
   std::complex<double> tmp_3040;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3040 += A0(MSHp0(gI1))*CpUhhUhhconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_3039 += tmp_3040;
   result += (-1) * tmp_3039;
   std::complex<double> tmp_3041;
   std::complex<double> tmp_3042;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3042 += A0(MSHpp(gI1))*CpUhhUhhconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_3041 += tmp_3042;
   result += (-1) * tmp_3041;
   std::complex<double> tmp_3043;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3044;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3044 += B0(p,MHpm(gI1),MHpm(gI2))*Conj(CpUhhconjHpmHpm(gO2,
            gI1,gI2))*CpUhhconjHpmHpm(gO1,gI1,gI2);
      }
      tmp_3043 += tmp_3044;
   }
   result += tmp_3043;
   std::complex<double> tmp_3045;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3046;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3046 += B0(p,MSHp0(gI1),MSHp0(gI2))*Conj(CpUhhconjSHp0SHp0(
            gO2,gI1,gI2))*CpUhhconjSHp0SHp0(gO1,gI1,gI2);
      }
      tmp_3045 += tmp_3046;
   }
   result += tmp_3045;
   std::complex<double> tmp_3047;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3048;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3048 += B0(p,MSHpp(gI1),MSHpp(gI2))*Conj(CpUhhconjSHppSHpp(
            gO2,gI1,gI2))*CpUhhconjSHppSHpp(gO1,gI1,gI2);
      }
      tmp_3047 += tmp_3048;
   }
   result += tmp_3047;
   std::complex<double> tmp_3049;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3050;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3050 += (Conj(CpUhhbarChaChaPL(gO2,gI1,gI2))*
            CpUhhbarChaChaPL(gO1,gI1,gI2) + Conj(CpUhhbarChaChaPR(gO2,gI1,gI2))*
            CpUhhbarChaChaPR(gO1,gI1,gI2))*G0(p,MCha(gI1),MCha(gI2));
      }
      tmp_3049 += tmp_3050;
   }
   result += tmp_3049;
   std::complex<double> tmp_3051;
   std::complex<double> tmp_3052;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3053;
      std::complex<double> tmp_3054;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3054 += B0(p,MCha(gI1),MCha(gI2))*(Conj(CpUhhbarChaChaPR(gO2
            ,gI1,gI2))*CpUhhbarChaChaPL(gO1,gI1,gI2) + Conj(CpUhhbarChaChaPL(gO2,
            gI1,gI2))*CpUhhbarChaChaPR(gO1,gI1,gI2))*MCha(gI2);
      }
      tmp_3053 += tmp_3054;
      tmp_3052 += (MCha(gI1)) * tmp_3053;
   }
   tmp_3051 += tmp_3052;
   result += (-2) * tmp_3051;
   std::complex<double> tmp_3055;
   std::complex<double> tmp_3056;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_3056 += A0(MSv(gI1))*CpUhhUhhconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_3055 += tmp_3056;
   result += (-1) * tmp_3055;
   std::complex<double> tmp_3057;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3058;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3058 += B0(p,MSv(gI1),MSv(gI2))*Conj(CpUhhconjSvSv(gO2,gI1,
            gI2))*CpUhhconjSvSv(gO1,gI1,gI2);
      }
      tmp_3057 += tmp_3058;
   }
   result += tmp_3057;
   std::complex<double> tmp_3059;
   std::complex<double> tmp_3060;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3061;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3061 += (Conj(CpUhhbarFdFdPL(gO2,gI1,gI2))*CpUhhbarFdFdPL(
            gO1,gI1,gI2) + Conj(CpUhhbarFdFdPR(gO2,gI1,gI2))*CpUhhbarFdFdPR(gO1,
            gI1,gI2))*G0(p,MFd(gI1),MFd(gI2));
      }
      tmp_3060 += tmp_3061;
   }
   tmp_3059 += tmp_3060;
   result += (3) * tmp_3059;
   std::complex<double> tmp_3062;
   std::complex<double> tmp_3063;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3064;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3064 += (Conj(CpUhhbarFDXFDXPL(gO2,gI1,gI2))*
            CpUhhbarFDXFDXPL(gO1,gI1,gI2) + Conj(CpUhhbarFDXFDXPR(gO2,gI1,gI2))*
            CpUhhbarFDXFDXPR(gO1,gI1,gI2))*G0(p,MFDX(gI1),MFDX(gI2));
      }
      tmp_3063 += tmp_3064;
   }
   tmp_3062 += tmp_3063;
   result += (3) * tmp_3062;
   std::complex<double> tmp_3065;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3066;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3066 += (Conj(CpUhhbarFeFePL(gO2,gI1,gI2))*CpUhhbarFeFePL(
            gO1,gI1,gI2) + Conj(CpUhhbarFeFePR(gO2,gI1,gI2))*CpUhhbarFeFePR(gO1,
            gI1,gI2))*G0(p,MFe(gI1),MFe(gI2));
      }
      tmp_3065 += tmp_3066;
   }
   result += tmp_3065;
   std::complex<double> tmp_3067;
   std::complex<double> tmp_3068;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3069;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3069 += (Conj(CpUhhbarFuFuPL(gO2,gI1,gI2))*CpUhhbarFuFuPL(
            gO1,gI1,gI2) + Conj(CpUhhbarFuFuPR(gO2,gI1,gI2))*CpUhhbarFuFuPR(gO1,
            gI1,gI2))*G0(p,MFu(gI1),MFu(gI2));
      }
      tmp_3068 += tmp_3069;
   }
   tmp_3067 += tmp_3068;
   result += (3) * tmp_3067;
   std::complex<double> tmp_3070;
   std::complex<double> tmp_3071;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3072;
      std::complex<double> tmp_3073;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3073 += B0(p,MFd(gI1),MFd(gI2))*(Conj(CpUhhbarFdFdPR(gO2,gI1
            ,gI2))*CpUhhbarFdFdPL(gO1,gI1,gI2) + Conj(CpUhhbarFdFdPL(gO2,gI1,gI2))
            *CpUhhbarFdFdPR(gO1,gI1,gI2))*MFd(gI2);
      }
      tmp_3072 += tmp_3073;
      tmp_3071 += (MFd(gI1)) * tmp_3072;
   }
   tmp_3070 += tmp_3071;
   result += (-6) * tmp_3070;
   std::complex<double> tmp_3074;
   std::complex<double> tmp_3075;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3076;
      std::complex<double> tmp_3077;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3077 += B0(p,MFDX(gI1),MFDX(gI2))*(Conj(CpUhhbarFDXFDXPR(gO2
            ,gI1,gI2))*CpUhhbarFDXFDXPL(gO1,gI1,gI2) + Conj(CpUhhbarFDXFDXPL(gO2,
            gI1,gI2))*CpUhhbarFDXFDXPR(gO1,gI1,gI2))*MFDX(gI2);
      }
      tmp_3076 += tmp_3077;
      tmp_3075 += (MFDX(gI1)) * tmp_3076;
   }
   tmp_3074 += tmp_3075;
   result += (-6) * tmp_3074;
   std::complex<double> tmp_3078;
   std::complex<double> tmp_3079;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3080;
      std::complex<double> tmp_3081;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3081 += B0(p,MFe(gI1),MFe(gI2))*(Conj(CpUhhbarFeFePR(gO2,gI1
            ,gI2))*CpUhhbarFeFePL(gO1,gI1,gI2) + Conj(CpUhhbarFeFePL(gO2,gI1,gI2))
            *CpUhhbarFeFePR(gO1,gI1,gI2))*MFe(gI2);
      }
      tmp_3080 += tmp_3081;
      tmp_3079 += (MFe(gI1)) * tmp_3080;
   }
   tmp_3078 += tmp_3079;
   result += (-2) * tmp_3078;
   std::complex<double> tmp_3082;
   std::complex<double> tmp_3083;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3084;
      std::complex<double> tmp_3085;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3085 += B0(p,MFu(gI1),MFu(gI2))*(Conj(CpUhhbarFuFuPR(gO2,gI1
            ,gI2))*CpUhhbarFuFuPL(gO1,gI1,gI2) + Conj(CpUhhbarFuFuPL(gO2,gI1,gI2))
            *CpUhhbarFuFuPR(gO1,gI1,gI2))*MFu(gI2);
      }
      tmp_3084 += tmp_3085;
      tmp_3083 += (MFu(gI1)) * tmp_3084;
   }
   tmp_3082 += tmp_3083;
   result += (-6) * tmp_3082;
   std::complex<double> tmp_3086;
   std::complex<double> tmp_3087;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3087 += A0(MAh(gI1))*CpUhhUhhAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_3086 += tmp_3087;
   result += (-0.5) * tmp_3086;
   std::complex<double> tmp_3088;
   std::complex<double> tmp_3089;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3089 += A0(Mhh(gI1))*CpUhhUhhhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_3088 += tmp_3089;
   result += (-0.5) * tmp_3088;
   std::complex<double> tmp_3090;
   std::complex<double> tmp_3091;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3092;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3092 += B0(p,MAh(gI1),MAh(gI2))*Conj(CpUhhAhAh(gO2,gI1,gI2))
            *CpUhhAhAh(gO1,gI1,gI2);
      }
      tmp_3091 += tmp_3092;
   }
   tmp_3090 += tmp_3091;
   result += (0.5) * tmp_3090;
   std::complex<double> tmp_3093;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3094;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3094 += B0(p,Mhh(gI1),MAh(gI2))*Conj(CpUhhhhAh(gO2,gI1,gI2))
            *CpUhhhhAh(gO1,gI1,gI2);
      }
      tmp_3093 += tmp_3094;
   }
   result += tmp_3093;
   std::complex<double> tmp_3095;
   std::complex<double> tmp_3096;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3097;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3097 += B0(p,Mhh(gI1),Mhh(gI2))*Conj(CpUhhhhhh(gO2,gI1,gI2))
            *CpUhhhhhh(gO1,gI1,gI2);
      }
      tmp_3096 += tmp_3097;
   }
   tmp_3095 += tmp_3096;
   result += (0.5) * tmp_3095;
   std::complex<double> tmp_3098;
   std::complex<double> tmp_3099;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3099 += A0(MSd(gI1))*CpUhhUhhconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_3098 += tmp_3099;
   result += (-3) * tmp_3098;
   std::complex<double> tmp_3100;
   std::complex<double> tmp_3101;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3101 += A0(MSDX(gI1))*CpUhhUhhconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_3100 += tmp_3101;
   result += (-3) * tmp_3100;
   std::complex<double> tmp_3102;
   std::complex<double> tmp_3103;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3103 += A0(MSe(gI1))*CpUhhUhhconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_3102 += tmp_3103;
   result += (-1) * tmp_3102;
   std::complex<double> tmp_3104;
   std::complex<double> tmp_3105;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3105 += A0(MSu(gI1))*CpUhhUhhconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_3104 += tmp_3105;
   result += (-3) * tmp_3104;
   std::complex<double> tmp_3106;
   std::complex<double> tmp_3107;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3108;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3108 += B0(p,MSd(gI1),MSd(gI2))*Conj(CpUhhconjSdSd(gO2,gI1,
            gI2))*CpUhhconjSdSd(gO1,gI1,gI2);
      }
      tmp_3107 += tmp_3108;
   }
   tmp_3106 += tmp_3107;
   result += (3) * tmp_3106;
   std::complex<double> tmp_3109;
   std::complex<double> tmp_3110;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3111;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3111 += B0(p,MSDX(gI1),MSDX(gI2))*Conj(CpUhhconjSDXSDX(gO2,
            gI1,gI2))*CpUhhconjSDXSDX(gO1,gI1,gI2);
      }
      tmp_3110 += tmp_3111;
   }
   tmp_3109 += tmp_3110;
   result += (3) * tmp_3109;
   std::complex<double> tmp_3112;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3113;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3113 += B0(p,MSe(gI1),MSe(gI2))*Conj(CpUhhconjSeSe(gO2,gI1,
            gI2))*CpUhhconjSeSe(gO1,gI1,gI2);
      }
      tmp_3112 += tmp_3113;
   }
   result += tmp_3112;
   std::complex<double> tmp_3114;
   std::complex<double> tmp_3115;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3116;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3116 += B0(p,MSu(gI1),MSu(gI2))*Conj(CpUhhconjSuSu(gO2,gI1,
            gI2))*CpUhhconjSuSu(gO1,gI1,gI2);
      }
      tmp_3115 += tmp_3116;
   }
   tmp_3114 += tmp_3115;
   result += (3) * tmp_3114;
   std::complex<double> tmp_3117;
   std::complex<double> tmp_3118;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_3119;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3119 += (Conj(CpUhhChiChiPL(gO2,gI1,gI2))*CpUhhChiChiPL(gO1,
            gI1,gI2) + Conj(CpUhhChiChiPR(gO2,gI1,gI2))*CpUhhChiChiPR(gO1,gI1,gI2)
            )*G0(p,MChi(gI1),MChi(gI2));
      }
      tmp_3118 += tmp_3119;
   }
   tmp_3117 += tmp_3118;
   result += (0.5) * tmp_3117;
   std::complex<double> tmp_3120;
   std::complex<double> tmp_3121;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_3122;
      std::complex<double> tmp_3123;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3123 += B0(p,MChi(gI1),MChi(gI2))*(Conj(CpUhhChiChiPR(gO2,
            gI1,gI2))*CpUhhChiChiPL(gO1,gI1,gI2) + Conj(CpUhhChiChiPL(gO2,gI1,gI2)
            )*CpUhhChiChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_3122 += tmp_3123;
      tmp_3121 += (MChi(gI1)) * tmp_3122;
   }
   tmp_3120 += tmp_3121;
   result += (-1) * tmp_3120;
   std::complex<double> tmp_3124;
   std::complex<double> tmp_3125;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3125 += Conj(CpUhhconjVWmHpm(gO2,gI2))*CpUhhconjVWmHpm(gO1,gI2)*F0
         (p,MHpm(gI2),MVWm);
   }
   tmp_3124 += tmp_3125;
   result += (2) * tmp_3124;
   std::complex<double> tmp_3126;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_3126 += Conj(CpUhhVZAh(gO2,gI2))*CpUhhVZAh(gO1,gI2)*F0(p,MAh(gI2),
         MVZ);
   }
   result += tmp_3126;
   std::complex<double> tmp_3127;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_3127 += Conj(CpUhhVZpAh(gO2,gI2))*CpUhhVZpAh(gO1,gI2)*F0(p,MAh(gI2
         ),MVZp);
   }
   result += tmp_3127;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Ah(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += -(B0(p,MVWm,MVWm)*CpUAhbargWmCgWmC(gO1)*CpUAhbargWmCgWmC(gO2));
   result += -(B0(p,MVWm,MVWm)*CpUAhbargWmgWm(gO1)*CpUAhbargWmgWm(gO2));
   result += 4*A0(MVWm)*CpUAhUAhconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUAhUAhVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUAhUAhVZVZ(gO1,gO2);
   std::complex<double> tmp_3128;
   std::complex<double> tmp_3129;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3129 += A0(MHpm(gI1))*CpUAhUAhconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_3128 += tmp_3129;
   result += (-1) * tmp_3128;
   std::complex<double> tmp_3130;
   std::complex<double> tmp_3131;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3131 += A0(MSHp0(gI1))*CpUAhUAhconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_3130 += tmp_3131;
   result += (-1) * tmp_3130;
   std::complex<double> tmp_3132;
   std::complex<double> tmp_3133;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3133 += A0(MSHpp(gI1))*CpUAhUAhconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_3132 += tmp_3133;
   result += (-1) * tmp_3132;
   std::complex<double> tmp_3134;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3135;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3135 += B0(p,MHpm(gI1),MHpm(gI2))*Conj(CpUAhconjHpmHpm(gO2,
            gI1,gI2))*CpUAhconjHpmHpm(gO1,gI1,gI2);
      }
      tmp_3134 += tmp_3135;
   }
   result += tmp_3134;
   std::complex<double> tmp_3136;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3137;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3137 += (Conj(CpUAhbarChaChaPL(gO2,gI1,gI2))*
            CpUAhbarChaChaPL(gO1,gI1,gI2) + Conj(CpUAhbarChaChaPR(gO2,gI1,gI2))*
            CpUAhbarChaChaPR(gO1,gI1,gI2))*G0(p,MCha(gI1),MCha(gI2));
      }
      tmp_3136 += tmp_3137;
   }
   result += tmp_3136;
   std::complex<double> tmp_3138;
   std::complex<double> tmp_3139;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3140;
      std::complex<double> tmp_3141;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3141 += B0(p,MCha(gI1),MCha(gI2))*(Conj(CpUAhbarChaChaPR(gO2
            ,gI1,gI2))*CpUAhbarChaChaPL(gO1,gI1,gI2) + Conj(CpUAhbarChaChaPL(gO2,
            gI1,gI2))*CpUAhbarChaChaPR(gO1,gI1,gI2))*MCha(gI2);
      }
      tmp_3140 += tmp_3141;
      tmp_3139 += (MCha(gI1)) * tmp_3140;
   }
   tmp_3138 += tmp_3139;
   result += (-2) * tmp_3138;
   std::complex<double> tmp_3142;
   std::complex<double> tmp_3143;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_3143 += A0(MSv(gI1))*CpUAhUAhconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_3142 += tmp_3143;
   result += (-1) * tmp_3142;
   std::complex<double> tmp_3144;
   std::complex<double> tmp_3145;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3146;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3146 += (Conj(CpUAhbarFdFdPL(gO2,gI1,gI2))*CpUAhbarFdFdPL(
            gO1,gI1,gI2) + Conj(CpUAhbarFdFdPR(gO2,gI1,gI2))*CpUAhbarFdFdPR(gO1,
            gI1,gI2))*G0(p,MFd(gI1),MFd(gI2));
      }
      tmp_3145 += tmp_3146;
   }
   tmp_3144 += tmp_3145;
   result += (3) * tmp_3144;
   std::complex<double> tmp_3147;
   std::complex<double> tmp_3148;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3149;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3149 += (Conj(CpUAhbarFDXFDXPL(gO2,gI1,gI2))*
            CpUAhbarFDXFDXPL(gO1,gI1,gI2) + Conj(CpUAhbarFDXFDXPR(gO2,gI1,gI2))*
            CpUAhbarFDXFDXPR(gO1,gI1,gI2))*G0(p,MFDX(gI1),MFDX(gI2));
      }
      tmp_3148 += tmp_3149;
   }
   tmp_3147 += tmp_3148;
   result += (3) * tmp_3147;
   std::complex<double> tmp_3150;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3151;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3151 += (Conj(CpUAhbarFeFePL(gO2,gI1,gI2))*CpUAhbarFeFePL(
            gO1,gI1,gI2) + Conj(CpUAhbarFeFePR(gO2,gI1,gI2))*CpUAhbarFeFePR(gO1,
            gI1,gI2))*G0(p,MFe(gI1),MFe(gI2));
      }
      tmp_3150 += tmp_3151;
   }
   result += tmp_3150;
   std::complex<double> tmp_3152;
   std::complex<double> tmp_3153;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3154;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3154 += (Conj(CpUAhbarFuFuPL(gO2,gI1,gI2))*CpUAhbarFuFuPL(
            gO1,gI1,gI2) + Conj(CpUAhbarFuFuPR(gO2,gI1,gI2))*CpUAhbarFuFuPR(gO1,
            gI1,gI2))*G0(p,MFu(gI1),MFu(gI2));
      }
      tmp_3153 += tmp_3154;
   }
   tmp_3152 += tmp_3153;
   result += (3) * tmp_3152;
   std::complex<double> tmp_3155;
   std::complex<double> tmp_3156;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3157;
      std::complex<double> tmp_3158;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3158 += B0(p,MFd(gI1),MFd(gI2))*(Conj(CpUAhbarFdFdPR(gO2,gI1
            ,gI2))*CpUAhbarFdFdPL(gO1,gI1,gI2) + Conj(CpUAhbarFdFdPL(gO2,gI1,gI2))
            *CpUAhbarFdFdPR(gO1,gI1,gI2))*MFd(gI2);
      }
      tmp_3157 += tmp_3158;
      tmp_3156 += (MFd(gI1)) * tmp_3157;
   }
   tmp_3155 += tmp_3156;
   result += (-6) * tmp_3155;
   std::complex<double> tmp_3159;
   std::complex<double> tmp_3160;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3161;
      std::complex<double> tmp_3162;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3162 += B0(p,MFDX(gI1),MFDX(gI2))*(Conj(CpUAhbarFDXFDXPR(gO2
            ,gI1,gI2))*CpUAhbarFDXFDXPL(gO1,gI1,gI2) + Conj(CpUAhbarFDXFDXPL(gO2,
            gI1,gI2))*CpUAhbarFDXFDXPR(gO1,gI1,gI2))*MFDX(gI2);
      }
      tmp_3161 += tmp_3162;
      tmp_3160 += (MFDX(gI1)) * tmp_3161;
   }
   tmp_3159 += tmp_3160;
   result += (-6) * tmp_3159;
   std::complex<double> tmp_3163;
   std::complex<double> tmp_3164;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3165;
      std::complex<double> tmp_3166;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3166 += B0(p,MFe(gI1),MFe(gI2))*(Conj(CpUAhbarFeFePR(gO2,gI1
            ,gI2))*CpUAhbarFeFePL(gO1,gI1,gI2) + Conj(CpUAhbarFeFePL(gO2,gI1,gI2))
            *CpUAhbarFeFePR(gO1,gI1,gI2))*MFe(gI2);
      }
      tmp_3165 += tmp_3166;
      tmp_3164 += (MFe(gI1)) * tmp_3165;
   }
   tmp_3163 += tmp_3164;
   result += (-2) * tmp_3163;
   std::complex<double> tmp_3167;
   std::complex<double> tmp_3168;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3169;
      std::complex<double> tmp_3170;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3170 += B0(p,MFu(gI1),MFu(gI2))*(Conj(CpUAhbarFuFuPR(gO2,gI1
            ,gI2))*CpUAhbarFuFuPL(gO1,gI1,gI2) + Conj(CpUAhbarFuFuPL(gO2,gI1,gI2))
            *CpUAhbarFuFuPR(gO1,gI1,gI2))*MFu(gI2);
      }
      tmp_3169 += tmp_3170;
      tmp_3168 += (MFu(gI1)) * tmp_3169;
   }
   tmp_3167 += tmp_3168;
   result += (-6) * tmp_3167;
   std::complex<double> tmp_3171;
   std::complex<double> tmp_3172;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3172 += A0(MAh(gI1))*CpUAhUAhAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_3171 += tmp_3172;
   result += (-0.5) * tmp_3171;
   std::complex<double> tmp_3173;
   std::complex<double> tmp_3174;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3174 += A0(Mhh(gI1))*CpUAhUAhhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_3173 += tmp_3174;
   result += (-0.5) * tmp_3173;
   std::complex<double> tmp_3175;
   std::complex<double> tmp_3176;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3177;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3177 += B0(p,MAh(gI1),MAh(gI2))*Conj(CpUAhAhAh(gO2,gI1,gI2))
            *CpUAhAhAh(gO1,gI1,gI2);
      }
      tmp_3176 += tmp_3177;
   }
   tmp_3175 += tmp_3176;
   result += (0.5) * tmp_3175;
   std::complex<double> tmp_3178;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3179;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3179 += B0(p,Mhh(gI1),MAh(gI2))*Conj(CpUAhhhAh(gO2,gI1,gI2))
            *CpUAhhhAh(gO1,gI1,gI2);
      }
      tmp_3178 += tmp_3179;
   }
   result += tmp_3178;
   std::complex<double> tmp_3180;
   std::complex<double> tmp_3181;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3182;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3182 += B0(p,Mhh(gI1),Mhh(gI2))*Conj(CpUAhhhhh(gO2,gI1,gI2))
            *CpUAhhhhh(gO1,gI1,gI2);
      }
      tmp_3181 += tmp_3182;
   }
   tmp_3180 += tmp_3181;
   result += (0.5) * tmp_3180;
   std::complex<double> tmp_3183;
   std::complex<double> tmp_3184;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3184 += A0(MSd(gI1))*CpUAhUAhconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_3183 += tmp_3184;
   result += (-3) * tmp_3183;
   std::complex<double> tmp_3185;
   std::complex<double> tmp_3186;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3186 += A0(MSDX(gI1))*CpUAhUAhconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_3185 += tmp_3186;
   result += (-3) * tmp_3185;
   std::complex<double> tmp_3187;
   std::complex<double> tmp_3188;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3188 += A0(MSe(gI1))*CpUAhUAhconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_3187 += tmp_3188;
   result += (-1) * tmp_3187;
   std::complex<double> tmp_3189;
   std::complex<double> tmp_3190;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3190 += A0(MSu(gI1))*CpUAhUAhconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_3189 += tmp_3190;
   result += (-3) * tmp_3189;
   std::complex<double> tmp_3191;
   std::complex<double> tmp_3192;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3193;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3193 += B0(p,MSd(gI1),MSd(gI2))*Conj(CpUAhconjSdSd(gO2,gI1,
            gI2))*CpUAhconjSdSd(gO1,gI1,gI2);
      }
      tmp_3192 += tmp_3193;
   }
   tmp_3191 += tmp_3192;
   result += (3) * tmp_3191;
   std::complex<double> tmp_3194;
   std::complex<double> tmp_3195;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3196;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3196 += B0(p,MSDX(gI1),MSDX(gI2))*Conj(CpUAhconjSDXSDX(gO2,
            gI1,gI2))*CpUAhconjSDXSDX(gO1,gI1,gI2);
      }
      tmp_3195 += tmp_3196;
   }
   tmp_3194 += tmp_3195;
   result += (3) * tmp_3194;
   std::complex<double> tmp_3197;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3198;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3198 += B0(p,MSe(gI1),MSe(gI2))*Conj(CpUAhconjSeSe(gO2,gI1,
            gI2))*CpUAhconjSeSe(gO1,gI1,gI2);
      }
      tmp_3197 += tmp_3198;
   }
   result += tmp_3197;
   std::complex<double> tmp_3199;
   std::complex<double> tmp_3200;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3201;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3201 += B0(p,MSu(gI1),MSu(gI2))*Conj(CpUAhconjSuSu(gO2,gI1,
            gI2))*CpUAhconjSuSu(gO1,gI1,gI2);
      }
      tmp_3200 += tmp_3201;
   }
   tmp_3199 += tmp_3200;
   result += (3) * tmp_3199;
   std::complex<double> tmp_3202;
   std::complex<double> tmp_3203;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_3204;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3204 += (Conj(CpUAhChiChiPL(gO2,gI1,gI2))*CpUAhChiChiPL(gO1,
            gI1,gI2) + Conj(CpUAhChiChiPR(gO2,gI1,gI2))*CpUAhChiChiPR(gO1,gI1,gI2)
            )*G0(p,MChi(gI1),MChi(gI2));
      }
      tmp_3203 += tmp_3204;
   }
   tmp_3202 += tmp_3203;
   result += (0.5) * tmp_3202;
   std::complex<double> tmp_3205;
   std::complex<double> tmp_3206;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_3207;
      std::complex<double> tmp_3208;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3208 += B0(p,MChi(gI1),MChi(gI2))*(Conj(CpUAhChiChiPR(gO2,
            gI1,gI2))*CpUAhChiChiPL(gO1,gI1,gI2) + Conj(CpUAhChiChiPL(gO2,gI1,gI2)
            )*CpUAhChiChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_3207 += tmp_3208;
      tmp_3206 += (MChi(gI1)) * tmp_3207;
   }
   tmp_3205 += tmp_3206;
   result += (-1) * tmp_3205;
   std::complex<double> tmp_3209;
   std::complex<double> tmp_3210;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3210 += Conj(CpUAhconjVWmHpm(gO2,gI2))*CpUAhconjVWmHpm(gO1,gI2)*F0
         (p,MHpm(gI2),MVWm);
   }
   tmp_3209 += tmp_3210;
   result += (2) * tmp_3209;
   std::complex<double> tmp_3211;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_3211 += Conj(CpUAhVZhh(gO2,gI2))*CpUAhVZhh(gO1,gI2)*F0(p,Mhh(gI2),
         MVZ);
   }
   result += tmp_3211;
   std::complex<double> tmp_3212;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_3212 += Conj(CpUAhVZphh(gO2,gI2))*CpUAhVZphh(gO1,gI2)*F0(p,Mhh(gI2
         ),MVZp);
   }
   result += tmp_3212;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Hpm(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*B0(p,0,MVWm)*Conj(CpconjUHpmVWmVP(gO2))*CpconjUHpmVWmVP(gO1);
   result += 4*B0(p,MVWm,MVZp)*Conj(CpconjUHpmVZpVWm(gO2))*CpconjUHpmVZpVWm(gO1
      );
   result += 4*B0(p,MVWm,MVZ)*Conj(CpconjUHpmVZVWm(gO2))*CpconjUHpmVZVWm(gO1);
   result += 4*A0(MVWm)*CpUHpmconjUHpmconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUHpmconjUHpmVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUHpmconjUHpmVZVZ(gO1,gO2);
   result += -(B0(p,MVZ,MVWm)*CpconjUHpmbargWmCgZ(gO1)*CpUHpmgWmCbargZ(gO2));
   result += -(B0(p,MVZp,MVWm)*CpconjUHpmbargWmCgZp(gO1)*CpUHpmgWmCbargZp(gO2))
      ;
   result += -(B0(p,MVWm,MVZ)*CpconjUHpmbargZgWm(gO1)*CpUHpmgZbargWm(gO2));
   result += -(B0(p,MVWm,MVZp)*CpconjUHpmbargZpgWm(gO1)*CpUHpmgZpbargWm(gO2));
   std::complex<double> tmp_3213;
   std::complex<double> tmp_3214;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3214 += A0(MHpm(gI1))*CpUHpmconjUHpmconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_3213 += tmp_3214;
   result += (-1) * tmp_3213;
   std::complex<double> tmp_3215;
   std::complex<double> tmp_3216;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3216 += A0(MSHp0(gI1))*CpUHpmconjUHpmconjSHp0SHp0(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_3215 += tmp_3216;
   result += (-1) * tmp_3215;
   std::complex<double> tmp_3217;
   std::complex<double> tmp_3218;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3218 += A0(MSHpp(gI1))*CpUHpmconjUHpmconjSHppSHpp(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_3217 += tmp_3218;
   result += (-1) * tmp_3217;
   std::complex<double> tmp_3219;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3220;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3220 += B0(p,MSHp0(gI1),MSHpp(gI2))*Conj(
            CpconjUHpmconjSHp0SHpp(gO2,gI1,gI2))*CpconjUHpmconjSHp0SHpp(gO1,gI1,
            gI2);
      }
      tmp_3219 += tmp_3220;
   }
   result += tmp_3219;
   std::complex<double> tmp_3221;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3222;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3222 += B0(p,MHpm(gI1),MAh(gI2))*Conj(CpconjUHpmHpmAh(gO2,
            gI1,gI2))*CpconjUHpmHpmAh(gO1,gI1,gI2);
      }
      tmp_3221 += tmp_3222;
   }
   result += tmp_3221;
   std::complex<double> tmp_3223;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3224;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3224 += B0(p,MHpm(gI1),Mhh(gI2))*Conj(CpconjUHpmHpmhh(gO2,
            gI1,gI2))*CpconjUHpmHpmhh(gO1,gI1,gI2);
      }
      tmp_3223 += tmp_3224;
   }
   result += tmp_3223;
   std::complex<double> tmp_3225;
   std::complex<double> tmp_3226;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_3226 += A0(MSv(gI1))*CpUHpmconjUHpmconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_3225 += tmp_3226;
   result += (-1) * tmp_3225;
   std::complex<double> tmp_3227;
   std::complex<double> tmp_3228;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3229;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3229 += (Conj(CpconjUHpmbarFuFdPL(gO2,gI1,gI2))*
            CpconjUHpmbarFuFdPL(gO1,gI1,gI2) + Conj(CpconjUHpmbarFuFdPR(gO2,gI1,
            gI2))*CpconjUHpmbarFuFdPR(gO1,gI1,gI2))*G0(p,MFu(gI1),MFd(gI2));
      }
      tmp_3228 += tmp_3229;
   }
   tmp_3227 += tmp_3228;
   result += (3) * tmp_3227;
   std::complex<double> tmp_3230;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3231;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3231 += (Conj(CpconjUHpmbarFvFePL(gO2,gI1,gI2))*
            CpconjUHpmbarFvFePL(gO1,gI1,gI2) + Conj(CpconjUHpmbarFvFePR(gO2,gI1,
            gI2))*CpconjUHpmbarFvFePR(gO1,gI1,gI2))*G0(p,MFv(gI1),MFe(gI2));
      }
      tmp_3230 += tmp_3231;
   }
   result += tmp_3230;
   std::complex<double> tmp_3232;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3233;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3233 += B0(p,MSv(gI1),MSe(gI2))*Conj(CpconjUHpmconjSvSe(gO2,
            gI1,gI2))*CpconjUHpmconjSvSe(gO1,gI1,gI2);
      }
      tmp_3232 += tmp_3233;
   }
   result += tmp_3232;
   std::complex<double> tmp_3234;
   std::complex<double> tmp_3235;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3236;
      std::complex<double> tmp_3237;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3237 += B0(p,MFu(gI1),MFd(gI2))*(Conj(CpconjUHpmbarFuFdPR(
            gO2,gI1,gI2))*CpconjUHpmbarFuFdPL(gO1,gI1,gI2) + Conj(
            CpconjUHpmbarFuFdPL(gO2,gI1,gI2))*CpconjUHpmbarFuFdPR(gO1,gI1,gI2))*
            MFd(gI2);
      }
      tmp_3236 += tmp_3237;
      tmp_3235 += (MFu(gI1)) * tmp_3236;
   }
   tmp_3234 += tmp_3235;
   result += (-6) * tmp_3234;
   std::complex<double> tmp_3238;
   std::complex<double> tmp_3239;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3240;
      std::complex<double> tmp_3241;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3241 += B0(p,MFv(gI1),MFe(gI2))*(Conj(CpconjUHpmbarFvFePR(
            gO2,gI1,gI2))*CpconjUHpmbarFvFePL(gO1,gI1,gI2) + Conj(
            CpconjUHpmbarFvFePL(gO2,gI1,gI2))*CpconjUHpmbarFvFePR(gO1,gI1,gI2))*
            MFe(gI2);
      }
      tmp_3240 += tmp_3241;
      tmp_3239 += (MFv(gI1)) * tmp_3240;
   }
   tmp_3238 += tmp_3239;
   result += (-2) * tmp_3238;
   std::complex<double> tmp_3242;
   std::complex<double> tmp_3243;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3243 += A0(MAh(gI1))*CpUHpmconjUHpmAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_3242 += tmp_3243;
   result += (-0.5) * tmp_3242;
   std::complex<double> tmp_3244;
   std::complex<double> tmp_3245;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3245 += A0(Mhh(gI1))*CpUHpmconjUHpmhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_3244 += tmp_3245;
   result += (-0.5) * tmp_3244;
   std::complex<double> tmp_3246;
   std::complex<double> tmp_3247;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3247 += A0(MSd(gI1))*CpUHpmconjUHpmconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_3246 += tmp_3247;
   result += (-3) * tmp_3246;
   std::complex<double> tmp_3248;
   std::complex<double> tmp_3249;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3249 += A0(MSDX(gI1))*CpUHpmconjUHpmconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_3248 += tmp_3249;
   result += (-3) * tmp_3248;
   std::complex<double> tmp_3250;
   std::complex<double> tmp_3251;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3251 += A0(MSe(gI1))*CpUHpmconjUHpmconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_3250 += tmp_3251;
   result += (-1) * tmp_3250;
   std::complex<double> tmp_3252;
   std::complex<double> tmp_3253;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3253 += A0(MSu(gI1))*CpUHpmconjUHpmconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_3252 += tmp_3253;
   result += (-3) * tmp_3252;
   std::complex<double> tmp_3254;
   std::complex<double> tmp_3255;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3256;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3256 += B0(p,MSu(gI1),MSd(gI2))*Conj(CpconjUHpmconjSuSd(gO2,
            gI1,gI2))*CpconjUHpmconjSuSd(gO1,gI1,gI2);
      }
      tmp_3255 += tmp_3256;
   }
   tmp_3254 += tmp_3255;
   result += (3) * tmp_3254;
   std::complex<double> tmp_3257;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_3258;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3258 += (Conj(CpconjUHpmChiChaPL(gO2,gI1,gI2))*
            CpconjUHpmChiChaPL(gO1,gI1,gI2) + Conj(CpconjUHpmChiChaPR(gO2,gI1,gI2)
            )*CpconjUHpmChiChaPR(gO1,gI1,gI2))*G0(p,MChi(gI1),MCha(gI2));
      }
      tmp_3257 += tmp_3258;
   }
   result += tmp_3257;
   std::complex<double> tmp_3259;
   std::complex<double> tmp_3260;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_3261;
      std::complex<double> tmp_3262;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3262 += B0(p,MChi(gI1),MCha(gI2))*(Conj(CpconjUHpmChiChaPR(
            gO2,gI1,gI2))*CpconjUHpmChiChaPL(gO1,gI1,gI2) + Conj(
            CpconjUHpmChiChaPL(gO2,gI1,gI2))*CpconjUHpmChiChaPR(gO1,gI1,gI2))*MCha
            (gI2);
      }
      tmp_3261 += tmp_3262;
      tmp_3260 += (MChi(gI1)) * tmp_3261;
   }
   tmp_3259 += tmp_3260;
   result += (-2) * tmp_3259;
   std::complex<double> tmp_3263;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3263 += Conj(CpconjUHpmVPHpm(gO2,gI2))*CpconjUHpmVPHpm(gO1,gI2)*F0
         (p,MHpm(gI2),0);
   }
   result += tmp_3263;
   std::complex<double> tmp_3264;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3264 += Conj(CpconjUHpmVZHpm(gO2,gI2))*CpconjUHpmVZHpm(gO1,gI2)*F0
         (p,MHpm(gI2),MVZ);
   }
   result += tmp_3264;
   std::complex<double> tmp_3265;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3265 += Conj(CpconjUHpmVZpHpm(gO2,gI2))*CpconjUHpmVZpHpm(gO1,gI2)*
         F0(p,MHpm(gI2),MVZp);
   }
   result += tmp_3265;
   std::complex<double> tmp_3266;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_3266 += Conj(CpconjUHpmVWmAh(gO2,gI2))*CpconjUHpmVWmAh(gO1,gI2)*F0
         (p,MAh(gI2),MVWm);
   }
   result += tmp_3266;
   std::complex<double> tmp_3267;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_3267 += Conj(CpconjUHpmVWmhh(gO2,gI2))*CpconjUHpmVWmhh(gO1,gI2)*F0
         (p,Mhh(gI2),MVWm);
   }
   result += tmp_3267;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_SHp0(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSHp0conjUSHp0conjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSHp0conjUSHp0VZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSHp0conjUSHp0VZVZ(gO1,gO2);
   std::complex<double> tmp_3268;
   std::complex<double> tmp_3269;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3269 += A0(MHpm(gI1))*CpUSHp0conjUSHp0conjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_3268 += tmp_3269;
   result += (-1) * tmp_3268;
   std::complex<double> tmp_3270;
   std::complex<double> tmp_3271;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3271 += A0(MSHp0(gI1))*CpUSHp0conjUSHp0conjSHp0SHp0(gO1,gO2,gI1,
         gI1);
   }
   tmp_3270 += tmp_3271;
   result += (-1) * tmp_3270;
   std::complex<double> tmp_3272;
   std::complex<double> tmp_3273;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3273 += A0(MSHpp(gI1))*CpUSHp0conjUSHp0conjSHppSHpp(gO1,gO2,gI1,
         gI1);
   }
   tmp_3272 += tmp_3273;
   result += (-1) * tmp_3272;
   std::complex<double> tmp_3274;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3274 += (Conj(CpconjUSHp0barChaChaPPL(gO2,gI1,1))*
         CpconjUSHp0barChaChaPPL(gO1,gI1,1) + Conj(CpconjUSHp0barChaChaPPR(gO2,gI1
         ,1))*CpconjUSHp0barChaChaPPR(gO1,gI1,1))*G0(p,MCha(gI1),MChaP);
   }
   result += tmp_3274;
   std::complex<double> tmp_3275;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3276;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3276 += B0(p,MHpm(gI1),MSHpp(gI2))*Conj(
            CpconjUSHp0conjHpmSHpp(gO2,gI1,gI2))*CpconjUSHp0conjHpmSHpp(gO1,gI1,
            gI2);
      }
      tmp_3275 += tmp_3276;
   }
   result += tmp_3275;
   std::complex<double> tmp_3277;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3278;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3278 += B0(p,MSHp0(gI1),Mhh(gI2))*Conj(CpconjUSHp0SHp0hh(gO2
            ,gI1,gI2))*CpconjUSHp0SHp0hh(gO1,gI1,gI2);
      }
      tmp_3277 += tmp_3278;
   }
   result += tmp_3277;
   std::complex<double> tmp_3279;
   std::complex<double> tmp_3280;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3281;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3281 += (Conj(CpconjUSHp0ChiPChiPL(gO2,gI1,gI2))*
            CpconjUSHp0ChiPChiPL(gO1,gI1,gI2) + Conj(CpconjUSHp0ChiPChiPR(gO2,gI1,
            gI2))*CpconjUSHp0ChiPChiPR(gO1,gI1,gI2))*G0(p,MChiP(gI1),MChi(gI2));
      }
      tmp_3280 += tmp_3281;
   }
   tmp_3279 += tmp_3280;
   result += (0.5) * tmp_3279;
   std::complex<double> tmp_3282;
   std::complex<double> tmp_3283;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3284;
      std::complex<double> tmp_3285;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3285 += B0(p,MChiP(gI1),MChi(gI2))*(Conj(
            CpconjUSHp0ChiPChiPR(gO2,gI1,gI2))*CpconjUSHp0ChiPChiPL(gO1,gI1,gI2) +
            Conj(CpconjUSHp0ChiPChiPL(gO2,gI1,gI2))*CpconjUSHp0ChiPChiPR(gO1,gI1,
            gI2))*MChi(gI2);
      }
      tmp_3284 += tmp_3285;
      tmp_3283 += (MChiP(gI1)) * tmp_3284;
   }
   tmp_3282 += tmp_3283;
   result += (-1) * tmp_3282;
   std::complex<double> tmp_3286;
   std::complex<double> tmp_3287;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_3287 += A0(MSv(gI1))*CpUSHp0conjUSHp0conjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_3286 += tmp_3287;
   result += (-1) * tmp_3286;
   std::complex<double> tmp_3288;
   std::complex<double> tmp_3289;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3289 += A0(MAh(gI1))*CpUSHp0conjUSHp0AhAh(gO1,gO2,gI1,gI1);
   }
   tmp_3288 += tmp_3289;
   result += (-0.5) * tmp_3288;
   std::complex<double> tmp_3290;
   std::complex<double> tmp_3291;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3291 += A0(Mhh(gI1))*CpUSHp0conjUSHp0hhhh(gO1,gO2,gI1,gI1);
   }
   tmp_3290 += tmp_3291;
   result += (-0.5) * tmp_3290;
   std::complex<double> tmp_3292;
   std::complex<double> tmp_3293;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3293 += A0(MSd(gI1))*CpUSHp0conjUSHp0conjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_3292 += tmp_3293;
   result += (-3) * tmp_3292;
   std::complex<double> tmp_3294;
   std::complex<double> tmp_3295;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3295 += A0(MSDX(gI1))*CpUSHp0conjUSHp0conjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_3294 += tmp_3295;
   result += (-3) * tmp_3294;
   std::complex<double> tmp_3296;
   std::complex<double> tmp_3297;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3297 += A0(MSe(gI1))*CpUSHp0conjUSHp0conjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_3296 += tmp_3297;
   result += (-1) * tmp_3296;
   std::complex<double> tmp_3298;
   std::complex<double> tmp_3299;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3299 += A0(MSu(gI1))*CpUSHp0conjUSHp0conjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_3298 += tmp_3299;
   result += (-3) * tmp_3298;
   std::complex<double> tmp_3300;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3300 += Conj(CpconjUSHp0VZSHp0(gO2,gI2))*CpconjUSHp0VZSHp0(gO1,gI2
         )*F0(p,MSHp0(gI2),MVZ);
   }
   result += tmp_3300;
   std::complex<double> tmp_3301;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3301 += Conj(CpconjUSHp0VZpSHp0(gO2,gI2))*CpconjUSHp0VZpSHp0(gO1,
         gI2)*F0(p,MSHp0(gI2),MVZp);
   }
   result += tmp_3301;
   std::complex<double> tmp_3302;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3302 += Conj(CpconjUSHp0conjVWmSHpp(gO2,gI2))*
         CpconjUSHp0conjVWmSHpp(gO1,gI2)*F0(p,MSHpp(gI2),MVWm);
   }
   result += tmp_3302;
   std::complex<double> tmp_3303;
   std::complex<double> tmp_3304;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3304 += B0(p,MCha(gI1),MChaP)*(Conj(CpconjUSHp0barChaChaPPR(gO2,
         gI1,1))*CpconjUSHp0barChaChaPPL(gO1,gI1,1) + Conj(CpconjUSHp0barChaChaPPL
         (gO2,gI1,1))*CpconjUSHp0barChaChaPPR(gO1,gI1,1))*MCha(gI1);
   }
   tmp_3303 += tmp_3304;
   result += (-2*MChaP) * tmp_3303;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_SHpp(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSHppconjUSHppconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSHppconjUSHppVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSHppconjUSHppVZVZ(gO1,gO2);
   std::complex<double> tmp_3305;
   std::complex<double> tmp_3306;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3306 += A0(MHpm(gI1))*CpUSHppconjUSHppconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_3305 += tmp_3306;
   result += (-1) * tmp_3305;
   std::complex<double> tmp_3307;
   std::complex<double> tmp_3308;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3308 += A0(MSHp0(gI1))*CpUSHppconjUSHppconjSHp0SHp0(gO1,gO2,gI1,
         gI1);
   }
   tmp_3307 += tmp_3308;
   result += (-1) * tmp_3307;
   std::complex<double> tmp_3309;
   std::complex<double> tmp_3310;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3310 += A0(MSHpp(gI1))*CpUSHppconjUSHppconjSHppSHpp(gO1,gO2,gI1,
         gI1);
   }
   tmp_3309 += tmp_3310;
   result += (-1) * tmp_3309;
   std::complex<double> tmp_3311;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3312;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3312 += B0(p,MSHp0(gI1),MHpm(gI2))*Conj(CpconjUSHppSHp0Hpm(
            gO2,gI1,gI2))*CpconjUSHppSHp0Hpm(gO1,gI1,gI2);
      }
      tmp_3311 += tmp_3312;
   }
   result += tmp_3311;
   std::complex<double> tmp_3313;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3314;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3314 += (Conj(CpconjUSHppChiPChaPL(gO2,gI1,gI2))*
            CpconjUSHppChiPChaPL(gO1,gI1,gI2) + Conj(CpconjUSHppChiPChaPR(gO2,gI1,
            gI2))*CpconjUSHppChiPChaPR(gO1,gI1,gI2))*G0(p,MChiP(gI1),MCha(gI2));
      }
      tmp_3313 += tmp_3314;
   }
   result += tmp_3313;
   std::complex<double> tmp_3315;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3316;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3316 += B0(p,MSHpp(gI1),Mhh(gI2))*Conj(CpconjUSHppSHpphh(gO2
            ,gI1,gI2))*CpconjUSHppSHpphh(gO1,gI1,gI2);
      }
      tmp_3315 += tmp_3316;
   }
   result += tmp_3315;
   std::complex<double> tmp_3317;
   std::complex<double> tmp_3318;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3319;
      std::complex<double> tmp_3320;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3320 += B0(p,MChiP(gI1),MCha(gI2))*(Conj(
            CpconjUSHppChiPChaPR(gO2,gI1,gI2))*CpconjUSHppChiPChaPL(gO1,gI1,gI2) +
            Conj(CpconjUSHppChiPChaPL(gO2,gI1,gI2))*CpconjUSHppChiPChaPR(gO1,gI1,
            gI2))*MCha(gI2);
      }
      tmp_3319 += tmp_3320;
      tmp_3318 += (MChiP(gI1)) * tmp_3319;
   }
   tmp_3317 += tmp_3318;
   result += (-2) * tmp_3317;
   std::complex<double> tmp_3321;
   std::complex<double> tmp_3322;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_3322 += A0(MSv(gI1))*CpUSHppconjUSHppconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_3321 += tmp_3322;
   result += (-1) * tmp_3321;
   std::complex<double> tmp_3323;
   std::complex<double> tmp_3324;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3324 += A0(MAh(gI1))*CpUSHppconjUSHppAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_3323 += tmp_3324;
   result += (-0.5) * tmp_3323;
   std::complex<double> tmp_3325;
   std::complex<double> tmp_3326;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3326 += A0(Mhh(gI1))*CpUSHppconjUSHpphhhh(gO1,gO2,gI1,gI1);
   }
   tmp_3325 += tmp_3326;
   result += (-0.5) * tmp_3325;
   std::complex<double> tmp_3327;
   std::complex<double> tmp_3328;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3328 += A0(MSd(gI1))*CpUSHppconjUSHppconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_3327 += tmp_3328;
   result += (-3) * tmp_3327;
   std::complex<double> tmp_3329;
   std::complex<double> tmp_3330;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3330 += A0(MSDX(gI1))*CpUSHppconjUSHppconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_3329 += tmp_3330;
   result += (-3) * tmp_3329;
   std::complex<double> tmp_3331;
   std::complex<double> tmp_3332;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3332 += A0(MSe(gI1))*CpUSHppconjUSHppconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_3331 += tmp_3332;
   result += (-1) * tmp_3331;
   std::complex<double> tmp_3333;
   std::complex<double> tmp_3334;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3334 += A0(MSu(gI1))*CpUSHppconjUSHppconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_3333 += tmp_3334;
   result += (-3) * tmp_3333;
   std::complex<double> tmp_3335;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      tmp_3335 += (Conj(CpconjUSHppChiChaPPL(gO2,gI1,1))*
         CpconjUSHppChiChaPPL(gO1,gI1,1) + Conj(CpconjUSHppChiChaPPR(gO2,gI1,1))*
         CpconjUSHppChiChaPPR(gO1,gI1,1))*G0(p,MChi(gI1),MChaP);
   }
   result += tmp_3335;
   std::complex<double> tmp_3336;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3336 += Conj(CpconjUSHppVWmSHp0(gO2,gI2))*CpconjUSHppVWmSHp0(gO1,
         gI2)*F0(p,MSHp0(gI2),MVWm);
   }
   result += tmp_3336;
   std::complex<double> tmp_3337;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3337 += Conj(CpconjUSHppVPSHpp(gO2,gI2))*CpconjUSHppVPSHpp(gO1,gI2
         )*F0(p,MSHpp(gI2),0);
   }
   result += tmp_3337;
   std::complex<double> tmp_3338;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3338 += Conj(CpconjUSHppVZSHpp(gO2,gI2))*CpconjUSHppVZSHpp(gO1,gI2
         )*F0(p,MSHpp(gI2),MVZ);
   }
   result += tmp_3338;
   std::complex<double> tmp_3339;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3339 += Conj(CpconjUSHppVZpSHpp(gO2,gI2))*CpconjUSHppVZpSHpp(gO1,
         gI2)*F0(p,MSHpp(gI2),MVZp);
   }
   result += tmp_3339;
   std::complex<double> tmp_3340;
   std::complex<double> tmp_3341;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      tmp_3341 += B0(p,MChi(gI1),MChaP)*(Conj(CpconjUSHppChiChaPPR(gO2,gI1,1
         ))*CpconjUSHppChiChaPPL(gO1,gI1,1) + Conj(CpconjUSHppChiChaPPL(gO2,gI1,1)
         )*CpconjUSHppChiChaPPR(gO1,gI1,1))*MChi(gI1);
   }
   tmp_3340 += tmp_3341;
   result += (-2*MChaP) * tmp_3340;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_VZ(double p ) const
{
   std::complex<double> result;

   result += AbsSqr(CpVZbargWmCgWmC())*B00(p,MVWm,MVWm);
   result += AbsSqr(CpVZbargWmgWm())*B00(p,MVWm,MVWm);
   result += -(A0(MVWm)*(4*CpVZVZconjVWmVWm1() + CpVZVZconjVWmVWm2() +
      CpVZVZconjVWmVWm3()));
   result += (AbsSqr(CpVZbarChaPChaPPL(1,1)) + AbsSqr(CpVZbarChaPChaPPR(1,1)))*
      H0(p,MChaP,MChaP);
   std::complex<double> tmp_3342;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3342 += A0(MHpm(gI1))*CpVZVZconjHpmHpm(gI1,gI1);
   }
   result += tmp_3342;
   std::complex<double> tmp_3343;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3343 += A0(MSHp0(gI1))*CpVZVZconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_3343;
   std::complex<double> tmp_3344;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3344 += A0(MSHpp(gI1))*CpVZVZconjSHppSHpp(gI1,gI1);
   }
   result += tmp_3344;
   std::complex<double> tmp_3345;
   std::complex<double> tmp_3346;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3347;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3347 += AbsSqr(CpVZconjHpmHpm(gI1,gI2))*B00(p,MHpm(gI1),MHpm
            (gI2));
      }
      tmp_3346 += tmp_3347;
   }
   tmp_3345 += tmp_3346;
   result += (-4) * tmp_3345;
   std::complex<double> tmp_3348;
   std::complex<double> tmp_3349;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3350;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3350 += AbsSqr(CpVZconjSHp0SHp0(gI1,gI2))*B00(p,MSHp0(gI1),
            MSHp0(gI2));
      }
      tmp_3349 += tmp_3350;
   }
   tmp_3348 += tmp_3349;
   result += (-4) * tmp_3348;
   std::complex<double> tmp_3351;
   std::complex<double> tmp_3352;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3353;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3353 += AbsSqr(CpVZconjSHppSHpp(gI1,gI2))*B00(p,MSHpp(gI1),
            MSHpp(gI2));
      }
      tmp_3352 += tmp_3353;
   }
   tmp_3351 += tmp_3352;
   result += (-4) * tmp_3351;
   std::complex<double> tmp_3354;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3355;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3355 += (AbsSqr(CpVZbarChaChaPL(gI1,gI2)) + AbsSqr(
            CpVZbarChaChaPR(gI1,gI2)))*H0(p,MCha(gI1),MCha(gI2));
         tmp_3355 += 4*B0(p,MCha(gI1),MCha(gI2))*MCha(gI1)*MCha(gI2)*Re(
            Conj(CpVZbarChaChaPL(gI1,gI2))*CpVZbarChaChaPR(gI1,gI2));
      }
      tmp_3354 += tmp_3355;
   }
   result += tmp_3354;
   std::complex<double> tmp_3356;
   std::complex<double> tmp_3357;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3358;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3358 += (AbsSqr(CpVZChiPChiPPL(gI1,gI2)) + AbsSqr(
            CpVZChiPChiPPR(gI1,gI2)))*H0(p,MChiP(gI1),MChiP(gI2));
         tmp_3358 += 4*B0(p,MChiP(gI1),MChiP(gI2))*MChiP(gI1)*MChiP(gI2)*
            Re(Conj(CpVZChiPChiPPL(gI1,gI2))*CpVZChiPChiPPR(gI1,gI2));
      }
      tmp_3357 += tmp_3358;
   }
   tmp_3356 += tmp_3357;
   result += (0.5) * tmp_3356;
   std::complex<double> tmp_3359;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_3359 += A0(MSv(gI1))*CpVZVZconjSvSv(gI1,gI1);
   }
   result += tmp_3359;
   std::complex<double> tmp_3360;
   std::complex<double> tmp_3361;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3362;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3362 += AbsSqr(CpVZconjSvSv(gI1,gI2))*B00(p,MSv(gI1),MSv(gI2
            ));
      }
      tmp_3361 += tmp_3362;
   }
   tmp_3360 += tmp_3361;
   result += (-4) * tmp_3360;
   std::complex<double> tmp_3363;
   std::complex<double> tmp_3364;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3365;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3365 += (AbsSqr(CpVZbarFdFdPL(gI1,gI2)) + AbsSqr(
            CpVZbarFdFdPR(gI1,gI2)))*H0(p,MFd(gI1),MFd(gI2));
         tmp_3365 += 4*B0(p,MFd(gI1),MFd(gI2))*MFd(gI1)*MFd(gI2)*Re(Conj(
            CpVZbarFdFdPL(gI1,gI2))*CpVZbarFdFdPR(gI1,gI2));
      }
      tmp_3364 += tmp_3365;
   }
   tmp_3363 += tmp_3364;
   result += (3) * tmp_3363;
   std::complex<double> tmp_3366;
   std::complex<double> tmp_3367;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3368;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3368 += (AbsSqr(CpVZbarFDXFDXPL(gI1,gI2)) + AbsSqr(
            CpVZbarFDXFDXPR(gI1,gI2)))*H0(p,MFDX(gI1),MFDX(gI2));
         tmp_3368 += 4*B0(p,MFDX(gI1),MFDX(gI2))*MFDX(gI1)*MFDX(gI2)*Re(
            Conj(CpVZbarFDXFDXPL(gI1,gI2))*CpVZbarFDXFDXPR(gI1,gI2));
      }
      tmp_3367 += tmp_3368;
   }
   tmp_3366 += tmp_3367;
   result += (3) * tmp_3366;
   std::complex<double> tmp_3369;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3370;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3370 += (AbsSqr(CpVZbarFeFePL(gI1,gI2)) + AbsSqr(
            CpVZbarFeFePR(gI1,gI2)))*H0(p,MFe(gI1),MFe(gI2));
         tmp_3370 += 4*B0(p,MFe(gI1),MFe(gI2))*MFe(gI1)*MFe(gI2)*Re(Conj(
            CpVZbarFeFePL(gI1,gI2))*CpVZbarFeFePR(gI1,gI2));
      }
      tmp_3369 += tmp_3370;
   }
   result += tmp_3369;
   std::complex<double> tmp_3371;
   std::complex<double> tmp_3372;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3373;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3373 += (AbsSqr(CpVZbarFuFuPL(gI1,gI2)) + AbsSqr(
            CpVZbarFuFuPR(gI1,gI2)))*H0(p,MFu(gI1),MFu(gI2));
         tmp_3373 += 4*B0(p,MFu(gI1),MFu(gI2))*MFu(gI1)*MFu(gI2)*Re(Conj(
            CpVZbarFuFuPL(gI1,gI2))*CpVZbarFuFuPR(gI1,gI2));
      }
      tmp_3372 += tmp_3373;
   }
   tmp_3371 += tmp_3372;
   result += (3) * tmp_3371;
   std::complex<double> tmp_3374;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3375;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3375 += (AbsSqr(CpVZbarFvFvPL(gI1,gI2)) + AbsSqr(
            CpVZbarFvFvPR(gI1,gI2)))*H0(p,MFv(gI1),MFv(gI2));
         tmp_3375 += 4*B0(p,MFv(gI1),MFv(gI2))*MFv(gI1)*MFv(gI2)*Re(Conj(
            CpVZbarFvFvPL(gI1,gI2))*CpVZbarFvFvPR(gI1,gI2));
      }
      tmp_3374 += tmp_3375;
   }
   result += tmp_3374;
   std::complex<double> tmp_3376;
   std::complex<double> tmp_3377;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3377 += A0(MAh(gI1))*CpVZVZAhAh(gI1,gI1);
   }
   tmp_3376 += tmp_3377;
   result += (0.5) * tmp_3376;
   std::complex<double> tmp_3378;
   std::complex<double> tmp_3379;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3379 += A0(Mhh(gI1))*CpVZVZhhhh(gI1,gI1);
   }
   tmp_3378 += tmp_3379;
   result += (0.5) * tmp_3378;
   std::complex<double> tmp_3380;
   std::complex<double> tmp_3381;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3382;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3382 += AbsSqr(CpVZhhAh(gI1,gI2))*B00(p,MAh(gI2),Mhh(gI1));
      }
      tmp_3381 += tmp_3382;
   }
   tmp_3380 += tmp_3381;
   result += (-4) * tmp_3380;
   std::complex<double> tmp_3383;
   std::complex<double> tmp_3384;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3384 += A0(MSd(gI1))*CpVZVZconjSdSd(gI1,gI1);
   }
   tmp_3383 += tmp_3384;
   result += (3) * tmp_3383;
   std::complex<double> tmp_3385;
   std::complex<double> tmp_3386;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3386 += A0(MSDX(gI1))*CpVZVZconjSDXSDX(gI1,gI1);
   }
   tmp_3385 += tmp_3386;
   result += (3) * tmp_3385;
   std::complex<double> tmp_3387;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3387 += A0(MSe(gI1))*CpVZVZconjSeSe(gI1,gI1);
   }
   result += tmp_3387;
   std::complex<double> tmp_3388;
   std::complex<double> tmp_3389;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3389 += A0(MSu(gI1))*CpVZVZconjSuSu(gI1,gI1);
   }
   tmp_3388 += tmp_3389;
   result += (3) * tmp_3388;
   std::complex<double> tmp_3390;
   std::complex<double> tmp_3391;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3392;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3392 += AbsSqr(CpVZconjSdSd(gI1,gI2))*B00(p,MSd(gI1),MSd(gI2
            ));
      }
      tmp_3391 += tmp_3392;
   }
   tmp_3390 += tmp_3391;
   result += (-12) * tmp_3390;
   std::complex<double> tmp_3393;
   std::complex<double> tmp_3394;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3395;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3395 += AbsSqr(CpVZconjSDXSDX(gI1,gI2))*B00(p,MSDX(gI1),MSDX
            (gI2));
      }
      tmp_3394 += tmp_3395;
   }
   tmp_3393 += tmp_3394;
   result += (-12) * tmp_3393;
   std::complex<double> tmp_3396;
   std::complex<double> tmp_3397;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3398;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3398 += AbsSqr(CpVZconjSeSe(gI1,gI2))*B00(p,MSe(gI1),MSe(gI2
            ));
      }
      tmp_3397 += tmp_3398;
   }
   tmp_3396 += tmp_3397;
   result += (-4) * tmp_3396;
   std::complex<double> tmp_3399;
   std::complex<double> tmp_3400;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3401;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3401 += AbsSqr(CpVZconjSuSu(gI1,gI2))*B00(p,MSu(gI1),MSu(gI2
            ));
      }
      tmp_3400 += tmp_3401;
   }
   tmp_3399 += tmp_3400;
   result += (-12) * tmp_3399;
   std::complex<double> tmp_3402;
   std::complex<double> tmp_3403;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_3404;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3404 += (AbsSqr(CpVZChiChiPL(gI1,gI2)) + AbsSqr(CpVZChiChiPR
            (gI1,gI2)))*H0(p,MChi(gI1),MChi(gI2));
         tmp_3404 += 4*B0(p,MChi(gI1),MChi(gI2))*MChi(gI1)*MChi(gI2)*Re(
            Conj(CpVZChiChiPL(gI1,gI2))*CpVZChiChiPR(gI1,gI2));
      }
      tmp_3403 += tmp_3404;
   }
   tmp_3402 += tmp_3403;
   result += (0.5) * tmp_3402;
   std::complex<double> tmp_3405;
   std::complex<double> tmp_3406;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3406 += AbsSqr(CpVZconjVWmHpm(gI2))*B0(p,MVWm,MHpm(gI2));
   }
   tmp_3405 += tmp_3406;
   result += (2) * tmp_3405;
   std::complex<double> tmp_3407;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_3407 += AbsSqr(CpVZVZhh(gI2))*B0(p,MVZ,Mhh(gI2));
   }
   result += tmp_3407;
   std::complex<double> tmp_3408;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_3408 += AbsSqr(CpVZVZphh(gI2))*B0(p,MVZp,Mhh(gI2));
   }
   result += tmp_3408;
   result += -(AbsSqr(CpVZconjVWmVWm())*(2*A0(MVWm) + 10*B00(p,MVWm,MVWm) + B0(
      p,MVWm,MVWm)*(2*Sqr(MVWm) + 4*Sqr(p))));
   result += 4*B0(p,MChaP,MChaP)*Re(Conj(CpVZbarChaPChaPPL(1,1))*
      CpVZbarChaPChaPPR(1,1))*Sqr(MChaP);

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_VZp(double p ) const
{
   std::complex<double> result;

   result += AbsSqr(CpVZpbargWmCgWmC())*B00(p,MVWm,MVWm);
   result += AbsSqr(CpVZpbargWmgWm())*B00(p,MVWm,MVWm);
   result += -(A0(MVWm)*(4*CpVZpVZpconjVWmVWm1() + CpVZpVZpconjVWmVWm2() +
      CpVZpVZpconjVWmVWm3()));
   result += (AbsSqr(CpVZpbarChaPChaPPL(1,1)) + AbsSqr(CpVZpbarChaPChaPPR(1,1))
      )*H0(p,MChaP,MChaP);
   std::complex<double> tmp_3409;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3409 += A0(MHpm(gI1))*CpVZpVZpconjHpmHpm(gI1,gI1);
   }
   result += tmp_3409;
   std::complex<double> tmp_3410;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3410 += A0(MSHp0(gI1))*CpVZpVZpconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_3410;
   std::complex<double> tmp_3411;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3411 += A0(MSHpp(gI1))*CpVZpVZpconjSHppSHpp(gI1,gI1);
   }
   result += tmp_3411;
   std::complex<double> tmp_3412;
   std::complex<double> tmp_3413;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3414;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3414 += AbsSqr(CpVZpconjHpmHpm(gI1,gI2))*B00(p,MHpm(gI1),
            MHpm(gI2));
      }
      tmp_3413 += tmp_3414;
   }
   tmp_3412 += tmp_3413;
   result += (-4) * tmp_3412;
   std::complex<double> tmp_3415;
   std::complex<double> tmp_3416;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3417;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3417 += AbsSqr(CpVZpconjSHp0SHp0(gI1,gI2))*B00(p,MSHp0(gI1),
            MSHp0(gI2));
      }
      tmp_3416 += tmp_3417;
   }
   tmp_3415 += tmp_3416;
   result += (-4) * tmp_3415;
   std::complex<double> tmp_3418;
   std::complex<double> tmp_3419;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3420;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3420 += AbsSqr(CpVZpconjSHppSHpp(gI1,gI2))*B00(p,MSHpp(gI1),
            MSHpp(gI2));
      }
      tmp_3419 += tmp_3420;
   }
   tmp_3418 += tmp_3419;
   result += (-4) * tmp_3418;
   std::complex<double> tmp_3421;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3422;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3422 += (AbsSqr(CpVZpbarChaChaPL(gI1,gI2)) + AbsSqr(
            CpVZpbarChaChaPR(gI1,gI2)))*H0(p,MCha(gI1),MCha(gI2));
         tmp_3422 += 4*B0(p,MCha(gI1),MCha(gI2))*MCha(gI1)*MCha(gI2)*Re(
            Conj(CpVZpbarChaChaPL(gI1,gI2))*CpVZpbarChaChaPR(gI1,gI2));
      }
      tmp_3421 += tmp_3422;
   }
   result += tmp_3421;
   std::complex<double> tmp_3423;
   std::complex<double> tmp_3424;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3425;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3425 += (AbsSqr(CpVZpChiPChiPPL(gI1,gI2)) + AbsSqr(
            CpVZpChiPChiPPR(gI1,gI2)))*H0(p,MChiP(gI1),MChiP(gI2));
         tmp_3425 += 4*B0(p,MChiP(gI1),MChiP(gI2))*MChiP(gI1)*MChiP(gI2)*
            Re(Conj(CpVZpChiPChiPPL(gI1,gI2))*CpVZpChiPChiPPR(gI1,gI2));
      }
      tmp_3424 += tmp_3425;
   }
   tmp_3423 += tmp_3424;
   result += (0.5) * tmp_3423;
   std::complex<double> tmp_3426;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_3426 += A0(MSv(gI1))*CpVZpVZpconjSvSv(gI1,gI1);
   }
   result += tmp_3426;
   std::complex<double> tmp_3427;
   std::complex<double> tmp_3428;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3429;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3429 += AbsSqr(CpVZpconjSvSv(gI1,gI2))*B00(p,MSv(gI1),MSv(
            gI2));
      }
      tmp_3428 += tmp_3429;
   }
   tmp_3427 += tmp_3428;
   result += (-4) * tmp_3427;
   std::complex<double> tmp_3430;
   std::complex<double> tmp_3431;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3432;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3432 += (AbsSqr(CpVZpbarFdFdPL(gI1,gI2)) + AbsSqr(
            CpVZpbarFdFdPR(gI1,gI2)))*H0(p,MFd(gI1),MFd(gI2));
         tmp_3432 += 4*B0(p,MFd(gI1),MFd(gI2))*MFd(gI1)*MFd(gI2)*Re(Conj(
            CpVZpbarFdFdPL(gI1,gI2))*CpVZpbarFdFdPR(gI1,gI2));
      }
      tmp_3431 += tmp_3432;
   }
   tmp_3430 += tmp_3431;
   result += (3) * tmp_3430;
   std::complex<double> tmp_3433;
   std::complex<double> tmp_3434;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3435;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3435 += (AbsSqr(CpVZpbarFDXFDXPL(gI1,gI2)) + AbsSqr(
            CpVZpbarFDXFDXPR(gI1,gI2)))*H0(p,MFDX(gI1),MFDX(gI2));
         tmp_3435 += 4*B0(p,MFDX(gI1),MFDX(gI2))*MFDX(gI1)*MFDX(gI2)*Re(
            Conj(CpVZpbarFDXFDXPL(gI1,gI2))*CpVZpbarFDXFDXPR(gI1,gI2));
      }
      tmp_3434 += tmp_3435;
   }
   tmp_3433 += tmp_3434;
   result += (3) * tmp_3433;
   std::complex<double> tmp_3436;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3437;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3437 += (AbsSqr(CpVZpbarFeFePL(gI1,gI2)) + AbsSqr(
            CpVZpbarFeFePR(gI1,gI2)))*H0(p,MFe(gI1),MFe(gI2));
         tmp_3437 += 4*B0(p,MFe(gI1),MFe(gI2))*MFe(gI1)*MFe(gI2)*Re(Conj(
            CpVZpbarFeFePL(gI1,gI2))*CpVZpbarFeFePR(gI1,gI2));
      }
      tmp_3436 += tmp_3437;
   }
   result += tmp_3436;
   std::complex<double> tmp_3438;
   std::complex<double> tmp_3439;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3440;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3440 += (AbsSqr(CpVZpbarFuFuPL(gI1,gI2)) + AbsSqr(
            CpVZpbarFuFuPR(gI1,gI2)))*H0(p,MFu(gI1),MFu(gI2));
         tmp_3440 += 4*B0(p,MFu(gI1),MFu(gI2))*MFu(gI1)*MFu(gI2)*Re(Conj(
            CpVZpbarFuFuPL(gI1,gI2))*CpVZpbarFuFuPR(gI1,gI2));
      }
      tmp_3439 += tmp_3440;
   }
   tmp_3438 += tmp_3439;
   result += (3) * tmp_3438;
   std::complex<double> tmp_3441;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3442;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3442 += (AbsSqr(CpVZpbarFvFvPL(gI1,gI2)) + AbsSqr(
            CpVZpbarFvFvPR(gI1,gI2)))*H0(p,MFv(gI1),MFv(gI2));
         tmp_3442 += 4*B0(p,MFv(gI1),MFv(gI2))*MFv(gI1)*MFv(gI2)*Re(Conj(
            CpVZpbarFvFvPL(gI1,gI2))*CpVZpbarFvFvPR(gI1,gI2));
      }
      tmp_3441 += tmp_3442;
   }
   result += tmp_3441;
   std::complex<double> tmp_3443;
   std::complex<double> tmp_3444;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3444 += A0(MAh(gI1))*CpVZpVZpAhAh(gI1,gI1);
   }
   tmp_3443 += tmp_3444;
   result += (0.5) * tmp_3443;
   std::complex<double> tmp_3445;
   std::complex<double> tmp_3446;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3446 += A0(Mhh(gI1))*CpVZpVZphhhh(gI1,gI1);
   }
   tmp_3445 += tmp_3446;
   result += (0.5) * tmp_3445;
   std::complex<double> tmp_3447;
   std::complex<double> tmp_3448;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3449;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3449 += AbsSqr(CpVZphhAh(gI1,gI2))*B00(p,MAh(gI2),Mhh(gI1));
      }
      tmp_3448 += tmp_3449;
   }
   tmp_3447 += tmp_3448;
   result += (-4) * tmp_3447;
   std::complex<double> tmp_3450;
   std::complex<double> tmp_3451;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3451 += A0(MSd(gI1))*CpVZpVZpconjSdSd(gI1,gI1);
   }
   tmp_3450 += tmp_3451;
   result += (3) * tmp_3450;
   std::complex<double> tmp_3452;
   std::complex<double> tmp_3453;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3453 += A0(MSDX(gI1))*CpVZpVZpconjSDXSDX(gI1,gI1);
   }
   tmp_3452 += tmp_3453;
   result += (3) * tmp_3452;
   std::complex<double> tmp_3454;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3454 += A0(MSe(gI1))*CpVZpVZpconjSeSe(gI1,gI1);
   }
   result += tmp_3454;
   std::complex<double> tmp_3455;
   std::complex<double> tmp_3456;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3456 += A0(MSu(gI1))*CpVZpVZpconjSuSu(gI1,gI1);
   }
   tmp_3455 += tmp_3456;
   result += (3) * tmp_3455;
   std::complex<double> tmp_3457;
   std::complex<double> tmp_3458;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3459;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3459 += AbsSqr(CpVZpconjSdSd(gI1,gI2))*B00(p,MSd(gI1),MSd(
            gI2));
      }
      tmp_3458 += tmp_3459;
   }
   tmp_3457 += tmp_3458;
   result += (-12) * tmp_3457;
   std::complex<double> tmp_3460;
   std::complex<double> tmp_3461;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3462;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3462 += AbsSqr(CpVZpconjSDXSDX(gI1,gI2))*B00(p,MSDX(gI1),
            MSDX(gI2));
      }
      tmp_3461 += tmp_3462;
   }
   tmp_3460 += tmp_3461;
   result += (-12) * tmp_3460;
   std::complex<double> tmp_3463;
   std::complex<double> tmp_3464;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3465;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3465 += AbsSqr(CpVZpconjSeSe(gI1,gI2))*B00(p,MSe(gI1),MSe(
            gI2));
      }
      tmp_3464 += tmp_3465;
   }
   tmp_3463 += tmp_3464;
   result += (-4) * tmp_3463;
   std::complex<double> tmp_3466;
   std::complex<double> tmp_3467;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3468;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3468 += AbsSqr(CpVZpconjSuSu(gI1,gI2))*B00(p,MSu(gI1),MSu(
            gI2));
      }
      tmp_3467 += tmp_3468;
   }
   tmp_3466 += tmp_3467;
   result += (-12) * tmp_3466;
   std::complex<double> tmp_3469;
   std::complex<double> tmp_3470;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_3471;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3471 += (AbsSqr(CpVZpChiChiPL(gI1,gI2)) + AbsSqr(
            CpVZpChiChiPR(gI1,gI2)))*H0(p,MChi(gI1),MChi(gI2));
         tmp_3471 += 4*B0(p,MChi(gI1),MChi(gI2))*MChi(gI1)*MChi(gI2)*Re(
            Conj(CpVZpChiChiPL(gI1,gI2))*CpVZpChiChiPR(gI1,gI2));
      }
      tmp_3470 += tmp_3471;
   }
   tmp_3469 += tmp_3470;
   result += (0.5) * tmp_3469;
   std::complex<double> tmp_3472;
   std::complex<double> tmp_3473;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3473 += AbsSqr(CpVZpconjVWmHpm(gI2))*B0(p,MVWm,MHpm(gI2));
   }
   tmp_3472 += tmp_3473;
   result += (2) * tmp_3472;
   std::complex<double> tmp_3474;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_3474 += AbsSqr(CpVZpVZhh(gI2))*B0(p,MVZ,Mhh(gI2));
   }
   result += tmp_3474;
   std::complex<double> tmp_3475;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_3475 += AbsSqr(CpVZpVZphh(gI2))*B0(p,MVZp,Mhh(gI2));
   }
   result += tmp_3475;
   result += -(AbsSqr(CpVZpconjVWmVWm())*(2*A0(MVWm) + 10*B00(p,MVWm,MVWm) + B0
      (p,MVWm,MVWm)*(2*Sqr(MVWm) + 4*Sqr(p))));
   result += 4*B0(p,MChaP,MChaP)*Re(Conj(CpVZpbarChaPChaPPL(1,1))*
      CpVZpbarChaPChaPPR(1,1))*Sqr(MChaP);

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_VWm(double p ) const
{
   std::complex<double> result;

   result += AbsSqr(CpconjVWmbargPgWm())*B00(p,MVWm,MVP);
   result += AbsSqr(CpconjVWmbargWmCgP())*B00(p,MVP,MVWm);
   result += AbsSqr(CpconjVWmbargWmCgZ())*B00(p,MVZ,MVWm);
   result += AbsSqr(CpconjVWmbargWmCgZp())*B00(p,MVZp,MVWm);
   result += AbsSqr(CpconjVWmbargZgWm())*B00(p,MVWm,MVZ);
   result += AbsSqr(CpconjVWmbargZpgWm())*B00(p,MVWm,MVZp);
   result += -(A0(MVWm)*(4*CpVWmconjVWmconjVWmVWm1() + CpVWmconjVWmconjVWmVWm2(
      ) + CpVWmconjVWmconjVWmVWm3()));
   result += 0;
   result += -0.5*A0(MVZp)*(4*CpVWmconjVWmVZpVZp1() + CpVWmconjVWmVZpVZp2() +
      CpVWmconjVWmVZpVZp3());
   result += -0.5*A0(MVZ)*(4*CpVWmconjVWmVZVZ1() + CpVWmconjVWmVZVZ2() +
      CpVWmconjVWmVZVZ3());
   std::complex<double> tmp_3476;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3476 += A0(MHpm(gI1))*CpVWmconjVWmconjHpmHpm(gI1,gI1);
   }
   result += tmp_3476;
   std::complex<double> tmp_3477;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3477 += A0(MSHp0(gI1))*CpVWmconjVWmconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_3477;
   std::complex<double> tmp_3478;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3478 += A0(MSHpp(gI1))*CpVWmconjVWmconjSHppSHpp(gI1,gI1);
   }
   result += tmp_3478;
   std::complex<double> tmp_3479;
   std::complex<double> tmp_3480;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3481;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3481 += AbsSqr(CpconjVWmconjSHp0SHpp(gI1,gI2))*B00(p,MSHpp(
            gI2),MSHp0(gI1));
      }
      tmp_3480 += tmp_3481;
   }
   tmp_3479 += tmp_3480;
   result += (-4) * tmp_3479;
   std::complex<double> tmp_3482;
   std::complex<double> tmp_3483;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3484;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3484 += AbsSqr(CpconjVWmHpmAh(gI1,gI2))*B00(p,MAh(gI2),MHpm(
            gI1));
      }
      tmp_3483 += tmp_3484;
   }
   tmp_3482 += tmp_3483;
   result += (-4) * tmp_3482;
   std::complex<double> tmp_3485;
   std::complex<double> tmp_3486;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3487;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3487 += AbsSqr(CpconjVWmHpmhh(gI1,gI2))*B00(p,Mhh(gI2),MHpm(
            gI1));
      }
      tmp_3486 += tmp_3487;
   }
   tmp_3485 += tmp_3486;
   result += (-4) * tmp_3485;
   std::complex<double> tmp_3488;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3488 += (AbsSqr(CpconjVWmChiPChaPPL(gI1,1)) + AbsSqr(
         CpconjVWmChiPChaPPR(gI1,1)))*H0(p,MChiP(gI1),MChaP);
      tmp_3488 += 4*MChaP*B0(p,MChiP(gI1),MChaP)*MChiP(gI1)*Re(Conj(
         CpconjVWmChiPChaPPL(gI1,1))*CpconjVWmChiPChaPPR(gI1,1));
   }
   result += tmp_3488;
   std::complex<double> tmp_3489;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_3489 += A0(MSv(gI1))*CpVWmconjVWmconjSvSv(gI1,gI1);
   }
   result += tmp_3489;
   std::complex<double> tmp_3490;
   std::complex<double> tmp_3491;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3492;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3492 += (AbsSqr(CpconjVWmbarFuFdPL(gI1,gI2)) + AbsSqr(
            CpconjVWmbarFuFdPR(gI1,gI2)))*H0(p,MFu(gI1),MFd(gI2));
         tmp_3492 += 4*B0(p,MFu(gI1),MFd(gI2))*MFd(gI2)*MFu(gI1)*Re(Conj(
            CpconjVWmbarFuFdPL(gI1,gI2))*CpconjVWmbarFuFdPR(gI1,gI2));
      }
      tmp_3491 += tmp_3492;
   }
   tmp_3490 += tmp_3491;
   result += (3) * tmp_3490;
   std::complex<double> tmp_3493;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3494;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3494 += (AbsSqr(CpconjVWmbarFvFePL(gI1,gI2)) + AbsSqr(
            CpconjVWmbarFvFePR(gI1,gI2)))*H0(p,MFv(gI1),MFe(gI2));
         tmp_3494 += 4*B0(p,MFv(gI1),MFe(gI2))*MFe(gI2)*MFv(gI1)*Re(Conj(
            CpconjVWmbarFvFePL(gI1,gI2))*CpconjVWmbarFvFePR(gI1,gI2));
      }
      tmp_3493 += tmp_3494;
   }
   result += tmp_3493;
   std::complex<double> tmp_3495;
   std::complex<double> tmp_3496;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3497;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3497 += AbsSqr(CpconjVWmconjSvSe(gI1,gI2))*B00(p,MSe(gI2),
            MSv(gI1));
      }
      tmp_3496 += tmp_3497;
   }
   tmp_3495 += tmp_3496;
   result += (-4) * tmp_3495;
   std::complex<double> tmp_3498;
   std::complex<double> tmp_3499;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3499 += A0(MAh(gI1))*CpVWmconjVWmAhAh(gI1,gI1);
   }
   tmp_3498 += tmp_3499;
   result += (0.5) * tmp_3498;
   std::complex<double> tmp_3500;
   std::complex<double> tmp_3501;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_3501 += A0(Mhh(gI1))*CpVWmconjVWmhhhh(gI1,gI1);
   }
   tmp_3500 += tmp_3501;
   result += (0.5) * tmp_3500;
   std::complex<double> tmp_3502;
   std::complex<double> tmp_3503;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3503 += A0(MSd(gI1))*CpVWmconjVWmconjSdSd(gI1,gI1);
   }
   tmp_3502 += tmp_3503;
   result += (3) * tmp_3502;
   std::complex<double> tmp_3504;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3504 += A0(MSe(gI1))*CpVWmconjVWmconjSeSe(gI1,gI1);
   }
   result += tmp_3504;
   std::complex<double> tmp_3505;
   std::complex<double> tmp_3506;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3506 += A0(MSu(gI1))*CpVWmconjVWmconjSuSu(gI1,gI1);
   }
   tmp_3505 += tmp_3506;
   result += (3) * tmp_3505;
   std::complex<double> tmp_3507;
   std::complex<double> tmp_3508;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3509;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3509 += AbsSqr(CpconjVWmconjSuSd(gI1,gI2))*B00(p,MSd(gI2),
            MSu(gI1));
      }
      tmp_3508 += tmp_3509;
   }
   tmp_3507 += tmp_3508;
   result += (-12) * tmp_3507;
   std::complex<double> tmp_3510;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_3511;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3511 += (AbsSqr(CpconjVWmChiChaPL(gI1,gI2)) + AbsSqr(
            CpconjVWmChiChaPR(gI1,gI2)))*H0(p,MChi(gI1),MCha(gI2));
         tmp_3511 += 4*B0(p,MChi(gI1),MCha(gI2))*MCha(gI2)*MChi(gI1)*Re(
            Conj(CpconjVWmChiChaPL(gI1,gI2))*CpconjVWmChiChaPR(gI1,gI2));
      }
      tmp_3510 += tmp_3511;
   }
   result += tmp_3510;
   std::complex<double> tmp_3512;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3512 += AbsSqr(CpconjVWmVPHpm(gI2))*B0(p,0,MHpm(gI2));
   }
   result += tmp_3512;
   std::complex<double> tmp_3513;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3513 += AbsSqr(CpconjVWmVZHpm(gI2))*B0(p,MVZ,MHpm(gI2));
   }
   result += tmp_3513;
   std::complex<double> tmp_3514;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3514 += AbsSqr(CpconjVWmVZpHpm(gI2))*B0(p,MVZp,MHpm(gI2));
   }
   result += tmp_3514;
   std::complex<double> tmp_3515;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_3515 += AbsSqr(CpconjVWmVWmhh(gI2))*B0(p,MVWm,Mhh(gI2));
   }
   result += tmp_3515;
   result += -(AbsSqr(CpconjVWmVWmVP())*(A0(MVWm) + 10*B00(p,MVWm,0) + B0(p,
      MVWm,0)*(Sqr(MVWm) + 4*Sqr(p))));
   result += -(AbsSqr(CpconjVWmVZVWm())*(A0(MVWm) + A0(MVZ) + 10*B00(p,MVZ,MVWm
      ) + B0(p,MVZ,MVWm)*(Sqr(MVWm) + Sqr(MVZ) + 4*Sqr(p))));
   result += -(AbsSqr(CpconjVWmVZpVWm())*(A0(MVWm) + A0(MVZp) + 10*B00(p,MVZp,
      MVWm) + B0(p,MVZp,MVWm)*(Sqr(MVWm) + Sqr(MVZp) + 4*Sqr(p))));

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Chi_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3516;
   std::complex<double> tmp_3517;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3518;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3518 += B0(p,MCha(gI2),MHpm(gI1))*Conj(CpUChiconjHpmChaPL(
            gO2,gI1,gI2))*CpUChiconjHpmChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_3517 += tmp_3518;
   }
   tmp_3516 += tmp_3517;
   result += (2) * tmp_3516;
   std::complex<double> tmp_3519;
   std::complex<double> tmp_3520;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3521;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3521 += B0(p,MChiP(gI2),MSHp0(gI1))*Conj(
            CpUChiconjSHp0ChiPPL(gO2,gI1,gI2))*CpUChiconjSHp0ChiPPR(gO1,gI1,gI2)*
            MChiP(gI2);
      }
      tmp_3520 += tmp_3521;
   }
   tmp_3519 += tmp_3520;
   result += (2) * tmp_3519;
   std::complex<double> tmp_3522;
   std::complex<double> tmp_3523;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3524;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3524 += B0(p,MFv(gI2),MSv(gI1))*Conj(CpUChiconjSvFvPL(gO2,
            gI1,gI2))*CpUChiconjSvFvPR(gO1,gI1,gI2)*MFv(gI2);
      }
      tmp_3523 += tmp_3524;
   }
   tmp_3522 += tmp_3523;
   result += (2) * tmp_3522;
   std::complex<double> tmp_3525;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3526;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3526 += B0(p,MChi(gI2),Mhh(gI1))*Conj(CpUChihhChiPL(gO2,gI1,
            gI2))*CpUChihhChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_3525 += tmp_3526;
   }
   result += tmp_3525;
   std::complex<double> tmp_3527;
   std::complex<double> tmp_3528;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3529;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3529 += B0(p,MFd(gI2),MSd(gI1))*Conj(CpUChiconjSdFdPL(gO2,
            gI1,gI2))*CpUChiconjSdFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_3528 += tmp_3529;
   }
   tmp_3527 += tmp_3528;
   result += (6) * tmp_3527;
   std::complex<double> tmp_3530;
   std::complex<double> tmp_3531;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3532;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3532 += B0(p,MFDX(gI2),MSDX(gI1))*Conj(CpUChiconjSDXFDXPL(
            gO2,gI1,gI2))*CpUChiconjSDXFDXPR(gO1,gI1,gI2)*MFDX(gI2);
      }
      tmp_3531 += tmp_3532;
   }
   tmp_3530 += tmp_3531;
   result += (6) * tmp_3530;
   std::complex<double> tmp_3533;
   std::complex<double> tmp_3534;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3535;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3535 += B0(p,MFe(gI2),MSe(gI1))*Conj(CpUChiconjSeFePL(gO2,
            gI1,gI2))*CpUChiconjSeFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_3534 += tmp_3535;
   }
   tmp_3533 += tmp_3534;
   result += (2) * tmp_3533;
   std::complex<double> tmp_3536;
   std::complex<double> tmp_3537;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3538;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3538 += B0(p,MFu(gI2),MSu(gI1))*Conj(CpUChiconjSuFuPL(gO2,
            gI1,gI2))*CpUChiconjSuFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_3537 += tmp_3538;
   }
   tmp_3536 += tmp_3537;
   result += (6) * tmp_3536;
   std::complex<double> tmp_3539;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_3540;
      std::complex<double> tmp_3541;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3541 += B0(p,MChi(gI1),MAh(gI2))*Conj(CpUChiChiAhPL(gO2,gI1,
            gI2))*CpUChiChiAhPR(gO1,gI1,gI2);
      }
      tmp_3540 += tmp_3541;
      tmp_3539 += (MChi(gI1)) * tmp_3540;
   }
   result += tmp_3539;
   std::complex<double> tmp_3542;
   std::complex<double> tmp_3543;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3543 += B0(p,MCha(gI2),MVWm)*Conj(CpUChiconjVWmChaPR(gO2,gI2))*
         CpUChiconjVWmChaPL(gO1,gI2)*MCha(gI2);
   }
   tmp_3542 += tmp_3543;
   result += (-8) * tmp_3542;
   std::complex<double> tmp_3544;
   std::complex<double> tmp_3545;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_3545 += B0(p,MChi(gI2),MVZ)*Conj(CpUChiVZChiPR(gO2,gI2))*
         CpUChiVZChiPL(gO1,gI2)*MChi(gI2);
   }
   tmp_3544 += tmp_3545;
   result += (-4) * tmp_3544;
   std::complex<double> tmp_3546;
   std::complex<double> tmp_3547;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_3547 += B0(p,MChi(gI2),MVZp)*Conj(CpUChiVZpChiPR(gO2,gI2))*
         CpUChiVZpChiPL(gO1,gI2)*MChi(gI2);
   }
   tmp_3546 += tmp_3547;
   result += (-4) * tmp_3546;
   std::complex<double> tmp_3548;
   std::complex<double> tmp_3549;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3549 += B0(p,MChaP,MSHpp(gI1))*Conj(CpUChiconjSHppChaPPL(gO2,gI1,1
         ))*CpUChiconjSHppChaPPR(gO1,gI1,1);
   }
   tmp_3548 += tmp_3549;
   result += (2*MChaP) * tmp_3548;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Chi_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3550;
   std::complex<double> tmp_3551;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3551 += B1(p,MChaP,MSHpp(gI1))*Conj(CpUChiconjSHppChaPPR(gO2,gI1,1
         ))*CpUChiconjSHppChaPPR(gO1,gI1,1);
   }
   tmp_3550 += tmp_3551;
   result += (-1) * tmp_3550;
   std::complex<double> tmp_3552;
   std::complex<double> tmp_3553;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3554;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3554 += B1(p,MCha(gI2),MHpm(gI1))*Conj(CpUChiconjHpmChaPR(
            gO2,gI1,gI2))*CpUChiconjHpmChaPR(gO1,gI1,gI2);
      }
      tmp_3553 += tmp_3554;
   }
   tmp_3552 += tmp_3553;
   result += (-1) * tmp_3552;
   std::complex<double> tmp_3555;
   std::complex<double> tmp_3556;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3557;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3557 += B1(p,MChiP(gI2),MSHp0(gI1))*Conj(
            CpUChiconjSHp0ChiPPR(gO2,gI1,gI2))*CpUChiconjSHp0ChiPPR(gO1,gI1,gI2);
      }
      tmp_3556 += tmp_3557;
   }
   tmp_3555 += tmp_3556;
   result += (-1) * tmp_3555;
   std::complex<double> tmp_3558;
   std::complex<double> tmp_3559;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3560;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3560 += B1(p,MFv(gI2),MSv(gI1))*Conj(CpUChiconjSvFvPR(gO2,
            gI1,gI2))*CpUChiconjSvFvPR(gO1,gI1,gI2);
      }
      tmp_3559 += tmp_3560;
   }
   tmp_3558 += tmp_3559;
   result += (-1) * tmp_3558;
   std::complex<double> tmp_3561;
   std::complex<double> tmp_3562;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3563;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3563 += B1(p,MChi(gI2),Mhh(gI1))*Conj(CpUChihhChiPR(gO2,gI1,
            gI2))*CpUChihhChiPR(gO1,gI1,gI2);
      }
      tmp_3562 += tmp_3563;
   }
   tmp_3561 += tmp_3562;
   result += (-0.5) * tmp_3561;
   std::complex<double> tmp_3564;
   std::complex<double> tmp_3565;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3566;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3566 += B1(p,MFd(gI2),MSd(gI1))*Conj(CpUChiconjSdFdPR(gO2,
            gI1,gI2))*CpUChiconjSdFdPR(gO1,gI1,gI2);
      }
      tmp_3565 += tmp_3566;
   }
   tmp_3564 += tmp_3565;
   result += (-3) * tmp_3564;
   std::complex<double> tmp_3567;
   std::complex<double> tmp_3568;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3569;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3569 += B1(p,MFDX(gI2),MSDX(gI1))*Conj(CpUChiconjSDXFDXPR(
            gO2,gI1,gI2))*CpUChiconjSDXFDXPR(gO1,gI1,gI2);
      }
      tmp_3568 += tmp_3569;
   }
   tmp_3567 += tmp_3568;
   result += (-3) * tmp_3567;
   std::complex<double> tmp_3570;
   std::complex<double> tmp_3571;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3572;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3572 += B1(p,MFe(gI2),MSe(gI1))*Conj(CpUChiconjSeFePR(gO2,
            gI1,gI2))*CpUChiconjSeFePR(gO1,gI1,gI2);
      }
      tmp_3571 += tmp_3572;
   }
   tmp_3570 += tmp_3571;
   result += (-1) * tmp_3570;
   std::complex<double> tmp_3573;
   std::complex<double> tmp_3574;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3575;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3575 += B1(p,MFu(gI2),MSu(gI1))*Conj(CpUChiconjSuFuPR(gO2,
            gI1,gI2))*CpUChiconjSuFuPR(gO1,gI1,gI2);
      }
      tmp_3574 += tmp_3575;
   }
   tmp_3573 += tmp_3574;
   result += (-3) * tmp_3573;
   std::complex<double> tmp_3576;
   std::complex<double> tmp_3577;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_3578;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3578 += B1(p,MChi(gI1),MAh(gI2))*Conj(CpUChiChiAhPR(gO2,gI1,
            gI2))*CpUChiChiAhPR(gO1,gI1,gI2);
      }
      tmp_3577 += tmp_3578;
   }
   tmp_3576 += tmp_3577;
   result += (-0.5) * tmp_3576;
   std::complex<double> tmp_3579;
   std::complex<double> tmp_3580;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3580 += B1(p,MCha(gI2),MVWm)*Conj(CpUChiconjVWmChaPL(gO2,gI2))*
         CpUChiconjVWmChaPL(gO1,gI2);
   }
   tmp_3579 += tmp_3580;
   result += (-2) * tmp_3579;
   std::complex<double> tmp_3581;
   std::complex<double> tmp_3582;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_3582 += B1(p,MChi(gI2),MVZ)*Conj(CpUChiVZChiPL(gO2,gI2))*
         CpUChiVZChiPL(gO1,gI2);
   }
   tmp_3581 += tmp_3582;
   result += (-1) * tmp_3581;
   std::complex<double> tmp_3583;
   std::complex<double> tmp_3584;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_3584 += B1(p,MChi(gI2),MVZp)*Conj(CpUChiVZpChiPL(gO2,gI2))*
         CpUChiVZpChiPL(gO1,gI2);
   }
   tmp_3583 += tmp_3584;
   result += (-1) * tmp_3583;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Chi_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3585;
   std::complex<double> tmp_3586;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3586 += B1(p,MChaP,MSHpp(gI1))*Conj(CpUChiconjSHppChaPPL(gO2,gI1,1
         ))*CpUChiconjSHppChaPPL(gO1,gI1,1);
   }
   tmp_3585 += tmp_3586;
   result += (-1) * tmp_3585;
   std::complex<double> tmp_3587;
   std::complex<double> tmp_3588;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3589;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3589 += B1(p,MCha(gI2),MHpm(gI1))*Conj(CpUChiconjHpmChaPL(
            gO2,gI1,gI2))*CpUChiconjHpmChaPL(gO1,gI1,gI2);
      }
      tmp_3588 += tmp_3589;
   }
   tmp_3587 += tmp_3588;
   result += (-1) * tmp_3587;
   std::complex<double> tmp_3590;
   std::complex<double> tmp_3591;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3592;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3592 += B1(p,MChiP(gI2),MSHp0(gI1))*Conj(
            CpUChiconjSHp0ChiPPL(gO2,gI1,gI2))*CpUChiconjSHp0ChiPPL(gO1,gI1,gI2);
      }
      tmp_3591 += tmp_3592;
   }
   tmp_3590 += tmp_3591;
   result += (-1) * tmp_3590;
   std::complex<double> tmp_3593;
   std::complex<double> tmp_3594;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3595;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3595 += B1(p,MFv(gI2),MSv(gI1))*Conj(CpUChiconjSvFvPL(gO2,
            gI1,gI2))*CpUChiconjSvFvPL(gO1,gI1,gI2);
      }
      tmp_3594 += tmp_3595;
   }
   tmp_3593 += tmp_3594;
   result += (-1) * tmp_3593;
   std::complex<double> tmp_3596;
   std::complex<double> tmp_3597;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3598;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3598 += B1(p,MChi(gI2),Mhh(gI1))*Conj(CpUChihhChiPL(gO2,gI1,
            gI2))*CpUChihhChiPL(gO1,gI1,gI2);
      }
      tmp_3597 += tmp_3598;
   }
   tmp_3596 += tmp_3597;
   result += (-0.5) * tmp_3596;
   std::complex<double> tmp_3599;
   std::complex<double> tmp_3600;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3601;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3601 += B1(p,MFd(gI2),MSd(gI1))*Conj(CpUChiconjSdFdPL(gO2,
            gI1,gI2))*CpUChiconjSdFdPL(gO1,gI1,gI2);
      }
      tmp_3600 += tmp_3601;
   }
   tmp_3599 += tmp_3600;
   result += (-3) * tmp_3599;
   std::complex<double> tmp_3602;
   std::complex<double> tmp_3603;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3604;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3604 += B1(p,MFDX(gI2),MSDX(gI1))*Conj(CpUChiconjSDXFDXPL(
            gO2,gI1,gI2))*CpUChiconjSDXFDXPL(gO1,gI1,gI2);
      }
      tmp_3603 += tmp_3604;
   }
   tmp_3602 += tmp_3603;
   result += (-3) * tmp_3602;
   std::complex<double> tmp_3605;
   std::complex<double> tmp_3606;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3607;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3607 += B1(p,MFe(gI2),MSe(gI1))*Conj(CpUChiconjSeFePL(gO2,
            gI1,gI2))*CpUChiconjSeFePL(gO1,gI1,gI2);
      }
      tmp_3606 += tmp_3607;
   }
   tmp_3605 += tmp_3606;
   result += (-1) * tmp_3605;
   std::complex<double> tmp_3608;
   std::complex<double> tmp_3609;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3610;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3610 += B1(p,MFu(gI2),MSu(gI1))*Conj(CpUChiconjSuFuPL(gO2,
            gI1,gI2))*CpUChiconjSuFuPL(gO1,gI1,gI2);
      }
      tmp_3609 += tmp_3610;
   }
   tmp_3608 += tmp_3609;
   result += (-3) * tmp_3608;
   std::complex<double> tmp_3611;
   std::complex<double> tmp_3612;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_3613;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3613 += B1(p,MChi(gI1),MAh(gI2))*Conj(CpUChiChiAhPL(gO2,gI1,
            gI2))*CpUChiChiAhPL(gO1,gI1,gI2);
      }
      tmp_3612 += tmp_3613;
   }
   tmp_3611 += tmp_3612;
   result += (-0.5) * tmp_3611;
   std::complex<double> tmp_3614;
   std::complex<double> tmp_3615;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3615 += B1(p,MCha(gI2),MVWm)*Conj(CpUChiconjVWmChaPR(gO2,gI2))*
         CpUChiconjVWmChaPR(gO1,gI2);
   }
   tmp_3614 += tmp_3615;
   result += (-2) * tmp_3614;
   std::complex<double> tmp_3616;
   std::complex<double> tmp_3617;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_3617 += B1(p,MChi(gI2),MVZ)*Conj(CpUChiVZChiPR(gO2,gI2))*
         CpUChiVZChiPR(gO1,gI2);
   }
   tmp_3616 += tmp_3617;
   result += (-1) * tmp_3616;
   std::complex<double> tmp_3618;
   std::complex<double> tmp_3619;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_3619 += B1(p,MChi(gI2),MVZp)*Conj(CpUChiVZpChiPR(gO2,gI2))*
         CpUChiVZpChiPR(gO1,gI2);
   }
   tmp_3618 += tmp_3619;
   result += (-1) * tmp_3618;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Cha_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3620;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3621;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3621 += B0(p,MChiP(gI2),MSHpp(gI1))*Conj(CpbarUChaSHppChiPPL
            (gO2,gI1,gI2))*CpbarUChaSHppChiPPR(gO1,gI1,gI2)*MChiP(gI2);
      }
      tmp_3620 += tmp_3621;
   }
   result += tmp_3620;
   std::complex<double> tmp_3622;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3623;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3623 += B0(p,MChi(gI2),MHpm(gI1))*Conj(CpbarUChaHpmChiPL(gO2
            ,gI1,gI2))*CpbarUChaHpmChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_3622 += tmp_3623;
   }
   result += tmp_3622;
   std::complex<double> tmp_3624;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3625;
      std::complex<double> tmp_3626;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3626 += B0(p,MCha(gI1),MAh(gI2))*Conj(CpbarUChaChaAhPL(gO2,
            gI1,gI2))*CpbarUChaChaAhPR(gO1,gI1,gI2);
      }
      tmp_3625 += tmp_3626;
      tmp_3624 += (MCha(gI1)) * tmp_3625;
   }
   result += tmp_3624;
   std::complex<double> tmp_3627;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3628;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3628 += B0(p,MFe(gI2),MSv(gI1))*Conj(CpbarUChaconjSvFePL(gO2
            ,gI1,gI2))*CpbarUChaconjSvFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_3627 += tmp_3628;
   }
   result += tmp_3627;
   std::complex<double> tmp_3629;
   std::complex<double> tmp_3630;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3631;
      std::complex<double> tmp_3632;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3632 += B0(p,MFu(gI1),MSd(gI2))*Conj(CpbarUChabarFuSdPL(gO2,
            gI1,gI2))*CpbarUChabarFuSdPR(gO1,gI1,gI2);
      }
      tmp_3631 += tmp_3632;
      tmp_3630 += (MFu(gI1)) * tmp_3631;
   }
   tmp_3629 += tmp_3630;
   result += (3) * tmp_3629;
   std::complex<double> tmp_3633;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3634;
      std::complex<double> tmp_3635;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3635 += B0(p,MFv(gI1),MSe(gI2))*Conj(CpbarUChabarFvSePL(gO2,
            gI1,gI2))*CpbarUChabarFvSePR(gO1,gI1,gI2);
      }
      tmp_3634 += tmp_3635;
      tmp_3633 += (MFv(gI1)) * tmp_3634;
   }
   result += tmp_3633;
   std::complex<double> tmp_3636;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3637;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3637 += B0(p,MCha(gI2),Mhh(gI1))*Conj(CpbarUChahhChaPL(gO2,
            gI1,gI2))*CpbarUChahhChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_3636 += tmp_3637;
   }
   result += tmp_3636;
   std::complex<double> tmp_3638;
   std::complex<double> tmp_3639;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3640;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3640 += B0(p,MFd(gI2),MSu(gI1))*Conj(CpbarUChaconjSuFdPL(gO2
            ,gI1,gI2))*CpbarUChaconjSuFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_3639 += tmp_3640;
   }
   tmp_3638 += tmp_3639;
   result += (3) * tmp_3638;
   std::complex<double> tmp_3641;
   std::complex<double> tmp_3642;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3642 += B0(p,MCha(gI2),0)*Conj(CpbarUChaVPChaPR(gO2,gI2))*
         CpbarUChaVPChaPL(gO1,gI2)*MCha(gI2);
   }
   tmp_3641 += tmp_3642;
   result += (-4) * tmp_3641;
   std::complex<double> tmp_3643;
   std::complex<double> tmp_3644;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3644 += B0(p,MCha(gI2),MVZ)*Conj(CpbarUChaVZChaPR(gO2,gI2))*
         CpbarUChaVZChaPL(gO1,gI2)*MCha(gI2);
   }
   tmp_3643 += tmp_3644;
   result += (-4) * tmp_3643;
   std::complex<double> tmp_3645;
   std::complex<double> tmp_3646;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3646 += B0(p,MCha(gI2),MVZp)*Conj(CpbarUChaVZpChaPR(gO2,gI2))*
         CpbarUChaVZpChaPL(gO1,gI2)*MCha(gI2);
   }
   tmp_3645 += tmp_3646;
   result += (-4) * tmp_3645;
   std::complex<double> tmp_3647;
   std::complex<double> tmp_3648;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_3648 += B0(p,MChi(gI2),MVWm)*Conj(CpbarUChaVWmChiPR(gO2,gI2))*
         CpbarUChaVWmChiPL(gO1,gI2)*MChi(gI2);
   }
   tmp_3647 += tmp_3648;
   result += (-4) * tmp_3647;
   std::complex<double> tmp_3649;
   std::complex<double> tmp_3650;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3650 += B0(p,MChaP,MSHp0(gI1))*Conj(CpbarUChaconjSHp0ChaPPL(gO2,
         gI1,1))*CpbarUChaconjSHp0ChaPPR(gO1,gI1,1);
   }
   tmp_3649 += tmp_3650;
   result += (MChaP) * tmp_3649;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Cha_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3651;
   std::complex<double> tmp_3652;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3652 += B1(p,MChaP,MSHp0(gI1))*Conj(CpbarUChaconjSHp0ChaPPR(gO2,
         gI1,1))*CpbarUChaconjSHp0ChaPPR(gO1,gI1,1);
   }
   tmp_3651 += tmp_3652;
   result += (-0.5) * tmp_3651;
   std::complex<double> tmp_3653;
   std::complex<double> tmp_3654;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3655;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3655 += B1(p,MChiP(gI2),MSHpp(gI1))*Conj(CpbarUChaSHppChiPPR
            (gO2,gI1,gI2))*CpbarUChaSHppChiPPR(gO1,gI1,gI2);
      }
      tmp_3654 += tmp_3655;
   }
   tmp_3653 += tmp_3654;
   result += (-0.5) * tmp_3653;
   std::complex<double> tmp_3656;
   std::complex<double> tmp_3657;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3658;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3658 += B1(p,MCha(gI1),MAh(gI2))*Conj(CpbarUChaChaAhPR(gO2,
            gI1,gI2))*CpbarUChaChaAhPR(gO1,gI1,gI2);
      }
      tmp_3657 += tmp_3658;
   }
   tmp_3656 += tmp_3657;
   result += (-0.5) * tmp_3656;
   std::complex<double> tmp_3659;
   std::complex<double> tmp_3660;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3661;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3661 += B1(p,MChi(gI2),MHpm(gI1))*Conj(CpbarUChaHpmChiPR(gO2
            ,gI1,gI2))*CpbarUChaHpmChiPR(gO1,gI1,gI2);
      }
      tmp_3660 += tmp_3661;
   }
   tmp_3659 += tmp_3660;
   result += (-0.5) * tmp_3659;
   std::complex<double> tmp_3662;
   std::complex<double> tmp_3663;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3664;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3664 += B1(p,MFe(gI2),MSv(gI1))*Conj(CpbarUChaconjSvFePR(gO2
            ,gI1,gI2))*CpbarUChaconjSvFePR(gO1,gI1,gI2);
      }
      tmp_3663 += tmp_3664;
   }
   tmp_3662 += tmp_3663;
   result += (-0.5) * tmp_3662;
   std::complex<double> tmp_3665;
   std::complex<double> tmp_3666;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3667;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3667 += B1(p,MFu(gI1),MSd(gI2))*Conj(CpbarUChabarFuSdPR(gO2,
            gI1,gI2))*CpbarUChabarFuSdPR(gO1,gI1,gI2);
      }
      tmp_3666 += tmp_3667;
   }
   tmp_3665 += tmp_3666;
   result += (-1.5) * tmp_3665;
   std::complex<double> tmp_3668;
   std::complex<double> tmp_3669;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3670;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3670 += B1(p,MFv(gI1),MSe(gI2))*Conj(CpbarUChabarFvSePR(gO2,
            gI1,gI2))*CpbarUChabarFvSePR(gO1,gI1,gI2);
      }
      tmp_3669 += tmp_3670;
   }
   tmp_3668 += tmp_3669;
   result += (-0.5) * tmp_3668;
   std::complex<double> tmp_3671;
   std::complex<double> tmp_3672;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3673;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3673 += B1(p,MCha(gI2),Mhh(gI1))*Conj(CpbarUChahhChaPR(gO2,
            gI1,gI2))*CpbarUChahhChaPR(gO1,gI1,gI2);
      }
      tmp_3672 += tmp_3673;
   }
   tmp_3671 += tmp_3672;
   result += (-0.5) * tmp_3671;
   std::complex<double> tmp_3674;
   std::complex<double> tmp_3675;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3676;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3676 += B1(p,MFd(gI2),MSu(gI1))*Conj(CpbarUChaconjSuFdPR(gO2
            ,gI1,gI2))*CpbarUChaconjSuFdPR(gO1,gI1,gI2);
      }
      tmp_3675 += tmp_3676;
   }
   tmp_3674 += tmp_3675;
   result += (-1.5) * tmp_3674;
   std::complex<double> tmp_3677;
   std::complex<double> tmp_3678;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3678 += B1(p,MCha(gI2),0)*Conj(CpbarUChaVPChaPL(gO2,gI2))*
         CpbarUChaVPChaPL(gO1,gI2);
   }
   tmp_3677 += tmp_3678;
   result += (-1) * tmp_3677;
   std::complex<double> tmp_3679;
   std::complex<double> tmp_3680;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3680 += B1(p,MCha(gI2),MVZ)*Conj(CpbarUChaVZChaPL(gO2,gI2))*
         CpbarUChaVZChaPL(gO1,gI2);
   }
   tmp_3679 += tmp_3680;
   result += (-1) * tmp_3679;
   std::complex<double> tmp_3681;
   std::complex<double> tmp_3682;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3682 += B1(p,MCha(gI2),MVZp)*Conj(CpbarUChaVZpChaPL(gO2,gI2))*
         CpbarUChaVZpChaPL(gO1,gI2);
   }
   tmp_3681 += tmp_3682;
   result += (-1) * tmp_3681;
   std::complex<double> tmp_3683;
   std::complex<double> tmp_3684;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_3684 += B1(p,MChi(gI2),MVWm)*Conj(CpbarUChaVWmChiPL(gO2,gI2))*
         CpbarUChaVWmChiPL(gO1,gI2);
   }
   tmp_3683 += tmp_3684;
   result += (-1) * tmp_3683;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Cha_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3685;
   std::complex<double> tmp_3686;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_3686 += B1(p,MChaP,MSHp0(gI1))*Conj(CpbarUChaconjSHp0ChaPPL(gO2,
         gI1,1))*CpbarUChaconjSHp0ChaPPL(gO1,gI1,1);
   }
   tmp_3685 += tmp_3686;
   result += (-0.5) * tmp_3685;
   std::complex<double> tmp_3687;
   std::complex<double> tmp_3688;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3689;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3689 += B1(p,MChiP(gI2),MSHpp(gI1))*Conj(CpbarUChaSHppChiPPL
            (gO2,gI1,gI2))*CpbarUChaSHppChiPPL(gO1,gI1,gI2);
      }
      tmp_3688 += tmp_3689;
   }
   tmp_3687 += tmp_3688;
   result += (-0.5) * tmp_3687;
   std::complex<double> tmp_3690;
   std::complex<double> tmp_3691;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3692;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3692 += B1(p,MCha(gI1),MAh(gI2))*Conj(CpbarUChaChaAhPL(gO2,
            gI1,gI2))*CpbarUChaChaAhPL(gO1,gI1,gI2);
      }
      tmp_3691 += tmp_3692;
   }
   tmp_3690 += tmp_3691;
   result += (-0.5) * tmp_3690;
   std::complex<double> tmp_3693;
   std::complex<double> tmp_3694;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3695;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3695 += B1(p,MChi(gI2),MHpm(gI1))*Conj(CpbarUChaHpmChiPL(gO2
            ,gI1,gI2))*CpbarUChaHpmChiPL(gO1,gI1,gI2);
      }
      tmp_3694 += tmp_3695;
   }
   tmp_3693 += tmp_3694;
   result += (-0.5) * tmp_3693;
   std::complex<double> tmp_3696;
   std::complex<double> tmp_3697;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3698;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3698 += B1(p,MFe(gI2),MSv(gI1))*Conj(CpbarUChaconjSvFePL(gO2
            ,gI1,gI2))*CpbarUChaconjSvFePL(gO1,gI1,gI2);
      }
      tmp_3697 += tmp_3698;
   }
   tmp_3696 += tmp_3697;
   result += (-0.5) * tmp_3696;
   std::complex<double> tmp_3699;
   std::complex<double> tmp_3700;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3701;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3701 += B1(p,MFu(gI1),MSd(gI2))*Conj(CpbarUChabarFuSdPL(gO2,
            gI1,gI2))*CpbarUChabarFuSdPL(gO1,gI1,gI2);
      }
      tmp_3700 += tmp_3701;
   }
   tmp_3699 += tmp_3700;
   result += (-1.5) * tmp_3699;
   std::complex<double> tmp_3702;
   std::complex<double> tmp_3703;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3704;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3704 += B1(p,MFv(gI1),MSe(gI2))*Conj(CpbarUChabarFvSePL(gO2,
            gI1,gI2))*CpbarUChabarFvSePL(gO1,gI1,gI2);
      }
      tmp_3703 += tmp_3704;
   }
   tmp_3702 += tmp_3703;
   result += (-0.5) * tmp_3702;
   std::complex<double> tmp_3705;
   std::complex<double> tmp_3706;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3707;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3707 += B1(p,MCha(gI2),Mhh(gI1))*Conj(CpbarUChahhChaPL(gO2,
            gI1,gI2))*CpbarUChahhChaPL(gO1,gI1,gI2);
      }
      tmp_3706 += tmp_3707;
   }
   tmp_3705 += tmp_3706;
   result += (-0.5) * tmp_3705;
   std::complex<double> tmp_3708;
   std::complex<double> tmp_3709;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3710;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3710 += B1(p,MFd(gI2),MSu(gI1))*Conj(CpbarUChaconjSuFdPL(gO2
            ,gI1,gI2))*CpbarUChaconjSuFdPL(gO1,gI1,gI2);
      }
      tmp_3709 += tmp_3710;
   }
   tmp_3708 += tmp_3709;
   result += (-1.5) * tmp_3708;
   std::complex<double> tmp_3711;
   std::complex<double> tmp_3712;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3712 += B1(p,MCha(gI2),0)*Conj(CpbarUChaVPChaPR(gO2,gI2))*
         CpbarUChaVPChaPR(gO1,gI2);
   }
   tmp_3711 += tmp_3712;
   result += (-1) * tmp_3711;
   std::complex<double> tmp_3713;
   std::complex<double> tmp_3714;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3714 += B1(p,MCha(gI2),MVZ)*Conj(CpbarUChaVZChaPR(gO2,gI2))*
         CpbarUChaVZChaPR(gO1,gI2);
   }
   tmp_3713 += tmp_3714;
   result += (-1) * tmp_3713;
   std::complex<double> tmp_3715;
   std::complex<double> tmp_3716;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_3716 += B1(p,MCha(gI2),MVZp)*Conj(CpbarUChaVZpChaPR(gO2,gI2))*
         CpbarUChaVZpChaPR(gO1,gI2);
   }
   tmp_3715 += tmp_3716;
   result += (-1) * tmp_3715;
   std::complex<double> tmp_3717;
   std::complex<double> tmp_3718;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_3718 += B1(p,MChi(gI2),MVWm)*Conj(CpbarUChaVWmChiPR(gO2,gI2))*
         CpbarUChaVWmChiPR(gO1,gI2);
   }
   tmp_3717 += tmp_3718;
   result += (-1) * tmp_3717;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fe_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3719;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3720;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3720 += B0(p,MFv(gI2),MHpm(gI1))*Conj(CpbarUFeHpmFvPL(gO2,
            gI1,gI2))*CpbarUFeHpmFvPR(gO1,gI1,gI2)*MFv(gI2);
      }
      tmp_3719 += tmp_3720;
   }
   result += tmp_3719;
   std::complex<double> tmp_3721;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3722;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3722 += B0(p,MCha(gI2),MSv(gI1))*Conj(CpbarUFeSvChaPL(gO2,
            gI1,gI2))*CpbarUFeSvChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_3721 += tmp_3722;
   }
   result += tmp_3721;
   std::complex<double> tmp_3723;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3724;
      std::complex<double> tmp_3725;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3725 += B0(p,MFe(gI1),MAh(gI2))*Conj(CpbarUFeFeAhPL(gO2,gI1,
            gI2))*CpbarUFeFeAhPR(gO1,gI1,gI2);
      }
      tmp_3724 += tmp_3725;
      tmp_3723 += (MFe(gI1)) * tmp_3724;
   }
   result += tmp_3723;
   std::complex<double> tmp_3726;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3727;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3727 += B0(p,MFe(gI2),Mhh(gI1))*Conj(CpbarUFehhFePL(gO2,gI1,
            gI2))*CpbarUFehhFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_3726 += tmp_3727;
   }
   result += tmp_3726;
   std::complex<double> tmp_3728;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3729;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3729 += B0(p,MChi(gI2),MSe(gI1))*Conj(CpbarUFeSeChiPL(gO2,
            gI1,gI2))*CpbarUFeSeChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_3728 += tmp_3729;
   }
   result += tmp_3728;
   std::complex<double> tmp_3730;
   std::complex<double> tmp_3731;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3731 += B0(p,MFe(gI2),0)*Conj(CpbarUFeVPFePR(gO2,gI2))*
         CpbarUFeVPFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_3730 += tmp_3731;
   result += (-4) * tmp_3730;
   std::complex<double> tmp_3732;
   std::complex<double> tmp_3733;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3733 += B0(p,MFe(gI2),MVZ)*Conj(CpbarUFeVZFePR(gO2,gI2))*
         CpbarUFeVZFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_3732 += tmp_3733;
   result += (-4) * tmp_3732;
   std::complex<double> tmp_3734;
   std::complex<double> tmp_3735;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3735 += B0(p,MFe(gI2),MVZp)*Conj(CpbarUFeVZpFePR(gO2,gI2))*
         CpbarUFeVZpFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_3734 += tmp_3735;
   result += (-4) * tmp_3734;
   std::complex<double> tmp_3736;
   std::complex<double> tmp_3737;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3737 += B0(p,MFv(gI2),MVWm)*Conj(CpbarUFeVWmFvPR(gO2,gI2))*
         CpbarUFeVWmFvPL(gO1,gI2)*MFv(gI2);
   }
   tmp_3736 += tmp_3737;
   result += (-4) * tmp_3736;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fe_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3738;
   std::complex<double> tmp_3739;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3740;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3740 += B1(p,MFv(gI2),MHpm(gI1))*Conj(CpbarUFeHpmFvPR(gO2,
            gI1,gI2))*CpbarUFeHpmFvPR(gO1,gI1,gI2);
      }
      tmp_3739 += tmp_3740;
   }
   tmp_3738 += tmp_3739;
   result += (-0.5) * tmp_3738;
   std::complex<double> tmp_3741;
   std::complex<double> tmp_3742;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3743;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3743 += B1(p,MCha(gI2),MSv(gI1))*Conj(CpbarUFeSvChaPR(gO2,
            gI1,gI2))*CpbarUFeSvChaPR(gO1,gI1,gI2);
      }
      tmp_3742 += tmp_3743;
   }
   tmp_3741 += tmp_3742;
   result += (-0.5) * tmp_3741;
   std::complex<double> tmp_3744;
   std::complex<double> tmp_3745;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3746;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3746 += B1(p,MFe(gI1),MAh(gI2))*Conj(CpbarUFeFeAhPR(gO2,gI1,
            gI2))*CpbarUFeFeAhPR(gO1,gI1,gI2);
      }
      tmp_3745 += tmp_3746;
   }
   tmp_3744 += tmp_3745;
   result += (-0.5) * tmp_3744;
   std::complex<double> tmp_3747;
   std::complex<double> tmp_3748;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3749;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3749 += B1(p,MFe(gI2),Mhh(gI1))*Conj(CpbarUFehhFePR(gO2,gI1,
            gI2))*CpbarUFehhFePR(gO1,gI1,gI2);
      }
      tmp_3748 += tmp_3749;
   }
   tmp_3747 += tmp_3748;
   result += (-0.5) * tmp_3747;
   std::complex<double> tmp_3750;
   std::complex<double> tmp_3751;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3752;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3752 += B1(p,MChi(gI2),MSe(gI1))*Conj(CpbarUFeSeChiPR(gO2,
            gI1,gI2))*CpbarUFeSeChiPR(gO1,gI1,gI2);
      }
      tmp_3751 += tmp_3752;
   }
   tmp_3750 += tmp_3751;
   result += (-0.5) * tmp_3750;
   std::complex<double> tmp_3753;
   std::complex<double> tmp_3754;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3754 += B1(p,MFe(gI2),0)*Conj(CpbarUFeVPFePL(gO2,gI2))*
         CpbarUFeVPFePL(gO1,gI2);
   }
   tmp_3753 += tmp_3754;
   result += (-1) * tmp_3753;
   std::complex<double> tmp_3755;
   std::complex<double> tmp_3756;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3756 += B1(p,MFv(gI2),MVWm)*Conj(CpbarUFeVWmFvPL(gO2,gI2))*
         CpbarUFeVWmFvPL(gO1,gI2);
   }
   tmp_3755 += tmp_3756;
   result += (-1) * tmp_3755;
   std::complex<double> tmp_3757;
   std::complex<double> tmp_3758;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3758 += B1(p,MFe(gI2),MVZ)*Conj(CpbarUFeVZFePL(gO2,gI2))*
         CpbarUFeVZFePL(gO1,gI2);
   }
   tmp_3757 += tmp_3758;
   result += (-1) * tmp_3757;
   std::complex<double> tmp_3759;
   std::complex<double> tmp_3760;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3760 += B1(p,MFe(gI2),MVZp)*Conj(CpbarUFeVZpFePL(gO2,gI2))*
         CpbarUFeVZpFePL(gO1,gI2);
   }
   tmp_3759 += tmp_3760;
   result += (-1) * tmp_3759;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fe_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3761;
   std::complex<double> tmp_3762;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3763;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3763 += B1(p,MFv(gI2),MHpm(gI1))*Conj(CpbarUFeHpmFvPL(gO2,
            gI1,gI2))*CpbarUFeHpmFvPL(gO1,gI1,gI2);
      }
      tmp_3762 += tmp_3763;
   }
   tmp_3761 += tmp_3762;
   result += (-0.5) * tmp_3761;
   std::complex<double> tmp_3764;
   std::complex<double> tmp_3765;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3766;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3766 += B1(p,MCha(gI2),MSv(gI1))*Conj(CpbarUFeSvChaPL(gO2,
            gI1,gI2))*CpbarUFeSvChaPL(gO1,gI1,gI2);
      }
      tmp_3765 += tmp_3766;
   }
   tmp_3764 += tmp_3765;
   result += (-0.5) * tmp_3764;
   std::complex<double> tmp_3767;
   std::complex<double> tmp_3768;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3769;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3769 += B1(p,MFe(gI1),MAh(gI2))*Conj(CpbarUFeFeAhPL(gO2,gI1,
            gI2))*CpbarUFeFeAhPL(gO1,gI1,gI2);
      }
      tmp_3768 += tmp_3769;
   }
   tmp_3767 += tmp_3768;
   result += (-0.5) * tmp_3767;
   std::complex<double> tmp_3770;
   std::complex<double> tmp_3771;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3772;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3772 += B1(p,MFe(gI2),Mhh(gI1))*Conj(CpbarUFehhFePL(gO2,gI1,
            gI2))*CpbarUFehhFePL(gO1,gI1,gI2);
      }
      tmp_3771 += tmp_3772;
   }
   tmp_3770 += tmp_3771;
   result += (-0.5) * tmp_3770;
   std::complex<double> tmp_3773;
   std::complex<double> tmp_3774;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3775;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3775 += B1(p,MChi(gI2),MSe(gI1))*Conj(CpbarUFeSeChiPL(gO2,
            gI1,gI2))*CpbarUFeSeChiPL(gO1,gI1,gI2);
      }
      tmp_3774 += tmp_3775;
   }
   tmp_3773 += tmp_3774;
   result += (-0.5) * tmp_3773;
   std::complex<double> tmp_3776;
   std::complex<double> tmp_3777;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3777 += B1(p,MFe(gI2),0)*Conj(CpbarUFeVPFePR(gO2,gI2))*
         CpbarUFeVPFePR(gO1,gI2);
   }
   tmp_3776 += tmp_3777;
   result += (-1) * tmp_3776;
   std::complex<double> tmp_3778;
   std::complex<double> tmp_3779;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3779 += B1(p,MFv(gI2),MVWm)*Conj(CpbarUFeVWmFvPR(gO2,gI2))*
         CpbarUFeVWmFvPR(gO1,gI2);
   }
   tmp_3778 += tmp_3779;
   result += (-1) * tmp_3778;
   std::complex<double> tmp_3780;
   std::complex<double> tmp_3781;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3781 += B1(p,MFe(gI2),MVZ)*Conj(CpbarUFeVZFePR(gO2,gI2))*
         CpbarUFeVZFePR(gO1,gI2);
   }
   tmp_3780 += tmp_3781;
   result += (-1) * tmp_3780;
   std::complex<double> tmp_3782;
   std::complex<double> tmp_3783;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3783 += B1(p,MFe(gI2),MVZp)*Conj(CpbarUFeVZpFePR(gO2,gI2))*
         CpbarUFeVZpFePR(gO1,gI2);
   }
   tmp_3782 += tmp_3783;
   result += (-1) * tmp_3782;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fd_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3784;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3785;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3785 += B0(p,MFu(gI2),MHpm(gI1))*Conj(CpbarUFdHpmFuPL(gO2,
            gI1,gI2))*CpbarUFdHpmFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_3784 += tmp_3785;
   }
   result += tmp_3784;
   std::complex<double> tmp_3786;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3787;
      std::complex<double> tmp_3788;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3788 += B0(p,MFd(gI1),MAh(gI2))*Conj(CpbarUFdFdAhPL(gO2,gI1,
            gI2))*CpbarUFdFdAhPR(gO1,gI1,gI2);
      }
      tmp_3787 += tmp_3788;
      tmp_3786 += (MFd(gI1)) * tmp_3787;
   }
   result += tmp_3786;
   std::complex<double> tmp_3789;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3790;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3790 += B0(p,MFd(gI2),Mhh(gI1))*Conj(CpbarUFdhhFdPL(gO2,gI1,
            gI2))*CpbarUFdhhFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_3789 += tmp_3790;
   }
   result += tmp_3789;
   std::complex<double> tmp_3791;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3792;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3792 += B0(p,MCha(gI2),MSu(gI1))*Conj(CpbarUFdSuChaPL(gO2,
            gI1,gI2))*CpbarUFdSuChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_3791 += tmp_3792;
   }
   result += tmp_3791;
   std::complex<double> tmp_3793;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3794;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3794 += B0(p,MChi(gI2),MSd(gI1))*Conj(CpbarUFdSdChiPL(gO2,
            gI1,gI2))*CpbarUFdSdChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_3793 += tmp_3794;
   }
   result += tmp_3793;
   std::complex<double> tmp_3795;
   std::complex<double> tmp_3796;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3796 += B0(p,MFd(gI2),0)*Conj(CpbarUFdVGFdPR(gO2,gI2))*
         CpbarUFdVGFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_3795 += tmp_3796;
   result += (-5.333333333333333) * tmp_3795;
   std::complex<double> tmp_3797;
   std::complex<double> tmp_3798;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3798 += B0(p,MFd(gI2),0)*Conj(CpbarUFdVPFdPR(gO2,gI2))*
         CpbarUFdVPFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_3797 += tmp_3798;
   result += (-4) * tmp_3797;
   std::complex<double> tmp_3799;
   std::complex<double> tmp_3800;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3800 += B0(p,MFd(gI2),MVZ)*Conj(CpbarUFdVZFdPR(gO2,gI2))*
         CpbarUFdVZFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_3799 += tmp_3800;
   result += (-4) * tmp_3799;
   std::complex<double> tmp_3801;
   std::complex<double> tmp_3802;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3802 += B0(p,MFd(gI2),MVZp)*Conj(CpbarUFdVZpFdPR(gO2,gI2))*
         CpbarUFdVZpFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_3801 += tmp_3802;
   result += (-4) * tmp_3801;
   std::complex<double> tmp_3803;
   std::complex<double> tmp_3804;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3804 += B0(p,MFu(gI2),MVWm)*Conj(CpbarUFdVWmFuPR(gO2,gI2))*
         CpbarUFdVWmFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_3803 += tmp_3804;
   result += (-4) * tmp_3803;
   std::complex<double> tmp_3805;
   std::complex<double> tmp_3806;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3806 += B0(p,MGlu,MSd(gI1))*Conj(CpbarUFdSdGluPL(gO2,gI1,1))*
         CpbarUFdSdGluPR(gO1,gI1,1);
   }
   tmp_3805 += tmp_3806;
   result += (1.3333333333333333*MGlu) * tmp_3805;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fd_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3807;
   std::complex<double> tmp_3808;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3809;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3809 += B1(p,MFu(gI2),MHpm(gI1))*Conj(CpbarUFdHpmFuPR(gO2,
            gI1,gI2))*CpbarUFdHpmFuPR(gO1,gI1,gI2);
      }
      tmp_3808 += tmp_3809;
   }
   tmp_3807 += tmp_3808;
   result += (-0.5) * tmp_3807;
   std::complex<double> tmp_3810;
   std::complex<double> tmp_3811;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3812;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3812 += B1(p,MFd(gI1),MAh(gI2))*Conj(CpbarUFdFdAhPR(gO2,gI1,
            gI2))*CpbarUFdFdAhPR(gO1,gI1,gI2);
      }
      tmp_3811 += tmp_3812;
   }
   tmp_3810 += tmp_3811;
   result += (-0.5) * tmp_3810;
   std::complex<double> tmp_3813;
   std::complex<double> tmp_3814;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3815;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3815 += B1(p,MFd(gI2),Mhh(gI1))*Conj(CpbarUFdhhFdPR(gO2,gI1,
            gI2))*CpbarUFdhhFdPR(gO1,gI1,gI2);
      }
      tmp_3814 += tmp_3815;
   }
   tmp_3813 += tmp_3814;
   result += (-0.5) * tmp_3813;
   std::complex<double> tmp_3816;
   std::complex<double> tmp_3817;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3817 += B1(p,MGlu,MSd(gI1))*Conj(CpbarUFdSdGluPR(gO2,gI1,1))*
         CpbarUFdSdGluPR(gO1,gI1,1);
   }
   tmp_3816 += tmp_3817;
   result += (-0.6666666666666666) * tmp_3816;
   std::complex<double> tmp_3818;
   std::complex<double> tmp_3819;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3820;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3820 += B1(p,MCha(gI2),MSu(gI1))*Conj(CpbarUFdSuChaPR(gO2,
            gI1,gI2))*CpbarUFdSuChaPR(gO1,gI1,gI2);
      }
      tmp_3819 += tmp_3820;
   }
   tmp_3818 += tmp_3819;
   result += (-0.5) * tmp_3818;
   std::complex<double> tmp_3821;
   std::complex<double> tmp_3822;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3823;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3823 += B1(p,MChi(gI2),MSd(gI1))*Conj(CpbarUFdSdChiPR(gO2,
            gI1,gI2))*CpbarUFdSdChiPR(gO1,gI1,gI2);
      }
      tmp_3822 += tmp_3823;
   }
   tmp_3821 += tmp_3822;
   result += (-0.5) * tmp_3821;
   std::complex<double> tmp_3824;
   std::complex<double> tmp_3825;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3825 += B1(p,MFd(gI2),0)*Conj(CpbarUFdVGFdPL(gO2,gI2))*
         CpbarUFdVGFdPL(gO1,gI2);
   }
   tmp_3824 += tmp_3825;
   result += (-1.3333333333333333) * tmp_3824;
   std::complex<double> tmp_3826;
   std::complex<double> tmp_3827;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3827 += B1(p,MFd(gI2),0)*Conj(CpbarUFdVPFdPL(gO2,gI2))*
         CpbarUFdVPFdPL(gO1,gI2);
   }
   tmp_3826 += tmp_3827;
   result += (-1) * tmp_3826;
   std::complex<double> tmp_3828;
   std::complex<double> tmp_3829;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3829 += B1(p,MFu(gI2),MVWm)*Conj(CpbarUFdVWmFuPL(gO2,gI2))*
         CpbarUFdVWmFuPL(gO1,gI2);
   }
   tmp_3828 += tmp_3829;
   result += (-1) * tmp_3828;
   std::complex<double> tmp_3830;
   std::complex<double> tmp_3831;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3831 += B1(p,MFd(gI2),MVZ)*Conj(CpbarUFdVZFdPL(gO2,gI2))*
         CpbarUFdVZFdPL(gO1,gI2);
   }
   tmp_3830 += tmp_3831;
   result += (-1) * tmp_3830;
   std::complex<double> tmp_3832;
   std::complex<double> tmp_3833;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3833 += B1(p,MFd(gI2),MVZp)*Conj(CpbarUFdVZpFdPL(gO2,gI2))*
         CpbarUFdVZpFdPL(gO1,gI2);
   }
   tmp_3832 += tmp_3833;
   result += (-1) * tmp_3832;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fd_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3834;
   std::complex<double> tmp_3835;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3836;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3836 += B1(p,MFu(gI2),MHpm(gI1))*Conj(CpbarUFdHpmFuPL(gO2,
            gI1,gI2))*CpbarUFdHpmFuPL(gO1,gI1,gI2);
      }
      tmp_3835 += tmp_3836;
   }
   tmp_3834 += tmp_3835;
   result += (-0.5) * tmp_3834;
   std::complex<double> tmp_3837;
   std::complex<double> tmp_3838;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3839;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3839 += B1(p,MFd(gI1),MAh(gI2))*Conj(CpbarUFdFdAhPL(gO2,gI1,
            gI2))*CpbarUFdFdAhPL(gO1,gI1,gI2);
      }
      tmp_3838 += tmp_3839;
   }
   tmp_3837 += tmp_3838;
   result += (-0.5) * tmp_3837;
   std::complex<double> tmp_3840;
   std::complex<double> tmp_3841;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3842;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3842 += B1(p,MFd(gI2),Mhh(gI1))*Conj(CpbarUFdhhFdPL(gO2,gI1,
            gI2))*CpbarUFdhhFdPL(gO1,gI1,gI2);
      }
      tmp_3841 += tmp_3842;
   }
   tmp_3840 += tmp_3841;
   result += (-0.5) * tmp_3840;
   std::complex<double> tmp_3843;
   std::complex<double> tmp_3844;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3844 += B1(p,MGlu,MSd(gI1))*Conj(CpbarUFdSdGluPL(gO2,gI1,1))*
         CpbarUFdSdGluPL(gO1,gI1,1);
   }
   tmp_3843 += tmp_3844;
   result += (-0.6666666666666666) * tmp_3843;
   std::complex<double> tmp_3845;
   std::complex<double> tmp_3846;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3847;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3847 += B1(p,MCha(gI2),MSu(gI1))*Conj(CpbarUFdSuChaPL(gO2,
            gI1,gI2))*CpbarUFdSuChaPL(gO1,gI1,gI2);
      }
      tmp_3846 += tmp_3847;
   }
   tmp_3845 += tmp_3846;
   result += (-0.5) * tmp_3845;
   std::complex<double> tmp_3848;
   std::complex<double> tmp_3849;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3850;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3850 += B1(p,MChi(gI2),MSd(gI1))*Conj(CpbarUFdSdChiPL(gO2,
            gI1,gI2))*CpbarUFdSdChiPL(gO1,gI1,gI2);
      }
      tmp_3849 += tmp_3850;
   }
   tmp_3848 += tmp_3849;
   result += (-0.5) * tmp_3848;
   std::complex<double> tmp_3851;
   std::complex<double> tmp_3852;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3852 += B1(p,MFd(gI2),0)*Conj(CpbarUFdVGFdPR(gO2,gI2))*
         CpbarUFdVGFdPR(gO1,gI2);
   }
   tmp_3851 += tmp_3852;
   result += (-1.3333333333333333) * tmp_3851;
   std::complex<double> tmp_3853;
   std::complex<double> tmp_3854;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3854 += B1(p,MFd(gI2),0)*Conj(CpbarUFdVPFdPR(gO2,gI2))*
         CpbarUFdVPFdPR(gO1,gI2);
   }
   tmp_3853 += tmp_3854;
   result += (-1) * tmp_3853;
   std::complex<double> tmp_3855;
   std::complex<double> tmp_3856;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3856 += B1(p,MFu(gI2),MVWm)*Conj(CpbarUFdVWmFuPR(gO2,gI2))*
         CpbarUFdVWmFuPR(gO1,gI2);
   }
   tmp_3855 += tmp_3856;
   result += (-1) * tmp_3855;
   std::complex<double> tmp_3857;
   std::complex<double> tmp_3858;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3858 += B1(p,MFd(gI2),MVZ)*Conj(CpbarUFdVZFdPR(gO2,gI2))*
         CpbarUFdVZFdPR(gO1,gI2);
   }
   tmp_3857 += tmp_3858;
   result += (-1) * tmp_3857;
   std::complex<double> tmp_3859;
   std::complex<double> tmp_3860;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3860 += B1(p,MFd(gI2),MVZp)*Conj(CpbarUFdVZpFdPR(gO2,gI2))*
         CpbarUFdVZpFdPR(gO1,gI2);
   }
   tmp_3859 += tmp_3860;
   result += (-1) * tmp_3859;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3861;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3862;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3862 += B0(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPL(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_3861 += tmp_3862;
   }
   result += tmp_3861;
   std::complex<double> tmp_3863;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3864;
      std::complex<double> tmp_3865;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3865 += B0(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPL(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_3864 += tmp_3865;
      tmp_3863 += (MCha(gI1)) * tmp_3864;
   }
   result += tmp_3863;
   std::complex<double> tmp_3866;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3867;
      std::complex<double> tmp_3868;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3868 += B0(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPL(gO2,gI1,
            gI2))*CpbarUFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_3867 += tmp_3868;
      tmp_3866 += (MFu(gI1)) * tmp_3867;
   }
   result += tmp_3866;
   std::complex<double> tmp_3869;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3870;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3870 += B0(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPL(gO2,gI1,
            gI2))*CpbarUFuhhFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_3869 += tmp_3870;
   }
   result += tmp_3869;
   std::complex<double> tmp_3871;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3872;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3872 += B0(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPL(gO2,
            gI1,gI2))*CpbarUFuSuChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_3871 += tmp_3872;
   }
   result += tmp_3871;
   std::complex<double> tmp_3873;
   std::complex<double> tmp_3874;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3874 += B0(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPR(gO2,gI2))*
         CpbarUFuconjVWmFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_3873 += tmp_3874;
   result += (-4) * tmp_3873;
   std::complex<double> tmp_3875;
   std::complex<double> tmp_3876;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3876 += B0(p,MFu(gI2),0)*Conj(CpbarUFuVGFuPR(gO2,gI2))*
         CpbarUFuVGFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_3875 += tmp_3876;
   result += (-5.333333333333333) * tmp_3875;
   std::complex<double> tmp_3877;
   std::complex<double> tmp_3878;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3878 += B0(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPR(gO2,gI2))*
         CpbarUFuVPFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_3877 += tmp_3878;
   result += (-4) * tmp_3877;
   std::complex<double> tmp_3879;
   std::complex<double> tmp_3880;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3880 += B0(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPR(gO2,gI2))*
         CpbarUFuVZFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_3879 += tmp_3880;
   result += (-4) * tmp_3879;
   std::complex<double> tmp_3881;
   std::complex<double> tmp_3882;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3882 += B0(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPR(gO2,gI2))*
         CpbarUFuVZpFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_3881 += tmp_3882;
   result += (-4) * tmp_3881;
   std::complex<double> tmp_3883;
   std::complex<double> tmp_3884;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3884 += B0(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPL(gO2,gI1,1))*
         CpbarUFuSuGluPR(gO1,gI1,1);
   }
   tmp_3883 += tmp_3884;
   result += (1.3333333333333333*MGlu) * tmp_3883;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3885;
   std::complex<double> tmp_3886;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3887;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3887 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPR(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPR(gO1,gI1,gI2);
      }
      tmp_3886 += tmp_3887;
   }
   tmp_3885 += tmp_3886;
   result += (-0.5) * tmp_3885;
   std::complex<double> tmp_3888;
   std::complex<double> tmp_3889;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3890;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3890 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPR(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_3889 += tmp_3890;
   }
   tmp_3888 += tmp_3889;
   result += (-0.5) * tmp_3888;
   std::complex<double> tmp_3891;
   std::complex<double> tmp_3892;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3893;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3893 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPR(gO2,gI1,
            gI2))*CpbarUFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_3892 += tmp_3893;
   }
   tmp_3891 += tmp_3892;
   result += (-0.5) * tmp_3891;
   std::complex<double> tmp_3894;
   std::complex<double> tmp_3895;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3896;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3896 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPR(gO2,gI1,
            gI2))*CpbarUFuhhFuPR(gO1,gI1,gI2);
      }
      tmp_3895 += tmp_3896;
   }
   tmp_3894 += tmp_3895;
   result += (-0.5) * tmp_3894;
   std::complex<double> tmp_3897;
   std::complex<double> tmp_3898;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3898 += B1(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPR(gO2,gI1,1))*
         CpbarUFuSuGluPR(gO1,gI1,1);
   }
   tmp_3897 += tmp_3898;
   result += (-0.6666666666666666) * tmp_3897;
   std::complex<double> tmp_3899;
   std::complex<double> tmp_3900;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3901;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3901 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPR(gO2,
            gI1,gI2))*CpbarUFuSuChiPR(gO1,gI1,gI2);
      }
      tmp_3900 += tmp_3901;
   }
   tmp_3899 += tmp_3900;
   result += (-0.5) * tmp_3899;
   std::complex<double> tmp_3902;
   std::complex<double> tmp_3903;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3903 += B1(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPL(gO2,gI2))*
         CpbarUFuconjVWmFdPL(gO1,gI2);
   }
   tmp_3902 += tmp_3903;
   result += (-1) * tmp_3902;
   std::complex<double> tmp_3904;
   std::complex<double> tmp_3905;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3905 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVGFuPL(gO2,gI2))*
         CpbarUFuVGFuPL(gO1,gI2);
   }
   tmp_3904 += tmp_3905;
   result += (-1.3333333333333333) * tmp_3904;
   std::complex<double> tmp_3906;
   std::complex<double> tmp_3907;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3907 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPL(gO2,gI2))*
         CpbarUFuVPFuPL(gO1,gI2);
   }
   tmp_3906 += tmp_3907;
   result += (-1) * tmp_3906;
   std::complex<double> tmp_3908;
   std::complex<double> tmp_3909;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3909 += B1(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPL(gO2,gI2))*
         CpbarUFuVZFuPL(gO1,gI2);
   }
   tmp_3908 += tmp_3909;
   result += (-1) * tmp_3908;
   std::complex<double> tmp_3910;
   std::complex<double> tmp_3911;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3911 += B1(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPL(gO2,gI2))*
         CpbarUFuVZpFuPL(gO1,gI2);
   }
   tmp_3910 += tmp_3911;
   result += (-1) * tmp_3910;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3912;
   std::complex<double> tmp_3913;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3914;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3914 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPL(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPL(gO1,gI1,gI2);
      }
      tmp_3913 += tmp_3914;
   }
   tmp_3912 += tmp_3913;
   result += (-0.5) * tmp_3912;
   std::complex<double> tmp_3915;
   std::complex<double> tmp_3916;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3917;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_3917 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPL(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPL(gO1,gI1,gI2);
      }
      tmp_3916 += tmp_3917;
   }
   tmp_3915 += tmp_3916;
   result += (-0.5) * tmp_3915;
   std::complex<double> tmp_3918;
   std::complex<double> tmp_3919;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3920;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3920 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPL(gO2,gI1,
            gI2))*CpbarUFuFuAhPL(gO1,gI1,gI2);
      }
      tmp_3919 += tmp_3920;
   }
   tmp_3918 += tmp_3919;
   result += (-0.5) * tmp_3918;
   std::complex<double> tmp_3921;
   std::complex<double> tmp_3922;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3923;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3923 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPL(gO2,gI1,
            gI2))*CpbarUFuhhFuPL(gO1,gI1,gI2);
      }
      tmp_3922 += tmp_3923;
   }
   tmp_3921 += tmp_3922;
   result += (-0.5) * tmp_3921;
   std::complex<double> tmp_3924;
   std::complex<double> tmp_3925;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3925 += B1(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPL(gO2,gI1,1))*
         CpbarUFuSuGluPL(gO1,gI1,1);
   }
   tmp_3924 += tmp_3925;
   result += (-0.6666666666666666) * tmp_3924;
   std::complex<double> tmp_3926;
   std::complex<double> tmp_3927;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3928;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3928 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPL(gO2,
            gI1,gI2))*CpbarUFuSuChiPL(gO1,gI1,gI2);
      }
      tmp_3927 += tmp_3928;
   }
   tmp_3926 += tmp_3927;
   result += (-0.5) * tmp_3926;
   std::complex<double> tmp_3929;
   std::complex<double> tmp_3930;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3930 += B1(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPR(gO2,gI2))*
         CpbarUFuconjVWmFdPR(gO1,gI2);
   }
   tmp_3929 += tmp_3930;
   result += (-1) * tmp_3929;
   std::complex<double> tmp_3931;
   std::complex<double> tmp_3932;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3932 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVGFuPR(gO2,gI2))*
         CpbarUFuVGFuPR(gO1,gI2);
   }
   tmp_3931 += tmp_3932;
   result += (-1.3333333333333333) * tmp_3931;
   std::complex<double> tmp_3933;
   std::complex<double> tmp_3934;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3934 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPR(gO2,gI2))*
         CpbarUFuVPFuPR(gO1,gI2);
   }
   tmp_3933 += tmp_3934;
   result += (-1) * tmp_3933;
   std::complex<double> tmp_3935;
   std::complex<double> tmp_3936;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3936 += B1(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPR(gO2,gI2))*
         CpbarUFuVZFuPR(gO1,gI2);
   }
   tmp_3935 += tmp_3936;
   result += (-1) * tmp_3935;
   std::complex<double> tmp_3937;
   std::complex<double> tmp_3938;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3938 += B1(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPR(gO2,gI2))*
         CpbarUFuVZpFuPR(gO1,gI2);
   }
   tmp_3937 += tmp_3938;
   result += (-1) * tmp_3937;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_FDX_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3939;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3940;
      std::complex<double> tmp_3941;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3941 += B0(p,MFDX(gI1),MAh(gI2))*Conj(CpbarUFDXFDXAhPL(gO2,
            gI1,gI2))*CpbarUFDXFDXAhPR(gO1,gI1,gI2);
      }
      tmp_3940 += tmp_3941;
      tmp_3939 += (MFDX(gI1)) * tmp_3940;
   }
   result += tmp_3939;
   std::complex<double> tmp_3942;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3943;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3943 += B0(p,MFDX(gI2),Mhh(gI1))*Conj(CpbarUFDXhhFDXPL(gO2,
            gI1,gI2))*CpbarUFDXhhFDXPR(gO1,gI1,gI2)*MFDX(gI2);
      }
      tmp_3942 += tmp_3943;
   }
   result += tmp_3942;
   std::complex<double> tmp_3944;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3945;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3945 += B0(p,MChi(gI2),MSDX(gI1))*Conj(CpbarUFDXSDXChiPL(gO2
            ,gI1,gI2))*CpbarUFDXSDXChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_3944 += tmp_3945;
   }
   result += tmp_3944;
   std::complex<double> tmp_3946;
   std::complex<double> tmp_3947;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3947 += B0(p,MFDX(gI2),0)*Conj(CpbarUFDXVGFDXPR(gO2,gI2))*
         CpbarUFDXVGFDXPL(gO1,gI2)*MFDX(gI2);
   }
   tmp_3946 += tmp_3947;
   result += (-5.333333333333333) * tmp_3946;
   std::complex<double> tmp_3948;
   std::complex<double> tmp_3949;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3949 += B0(p,MFDX(gI2),0)*Conj(CpbarUFDXVPFDXPR(gO2,gI2))*
         CpbarUFDXVPFDXPL(gO1,gI2)*MFDX(gI2);
   }
   tmp_3948 += tmp_3949;
   result += (-4) * tmp_3948;
   std::complex<double> tmp_3950;
   std::complex<double> tmp_3951;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3951 += B0(p,MFDX(gI2),MVZ)*Conj(CpbarUFDXVZFDXPR(gO2,gI2))*
         CpbarUFDXVZFDXPL(gO1,gI2)*MFDX(gI2);
   }
   tmp_3950 += tmp_3951;
   result += (-4) * tmp_3950;
   std::complex<double> tmp_3952;
   std::complex<double> tmp_3953;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3953 += B0(p,MFDX(gI2),MVZp)*Conj(CpbarUFDXVZpFDXPR(gO2,gI2))*
         CpbarUFDXVZpFDXPL(gO1,gI2)*MFDX(gI2);
   }
   tmp_3952 += tmp_3953;
   result += (-4) * tmp_3952;
   std::complex<double> tmp_3954;
   std::complex<double> tmp_3955;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3955 += B0(p,MGlu,MSDX(gI1))*Conj(CpbarUFDXSDXGluPL(gO2,gI1,1))*
         CpbarUFDXSDXGluPR(gO1,gI1,1);
   }
   tmp_3954 += tmp_3955;
   result += (1.3333333333333333*MGlu) * tmp_3954;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_FDX_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3956;
   std::complex<double> tmp_3957;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3958;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3958 += B1(p,MFDX(gI1),MAh(gI2))*Conj(CpbarUFDXFDXAhPR(gO2,
            gI1,gI2))*CpbarUFDXFDXAhPR(gO1,gI1,gI2);
      }
      tmp_3957 += tmp_3958;
   }
   tmp_3956 += tmp_3957;
   result += (-0.5) * tmp_3956;
   std::complex<double> tmp_3959;
   std::complex<double> tmp_3960;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3961;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3961 += B1(p,MFDX(gI2),Mhh(gI1))*Conj(CpbarUFDXhhFDXPR(gO2,
            gI1,gI2))*CpbarUFDXhhFDXPR(gO1,gI1,gI2);
      }
      tmp_3960 += tmp_3961;
   }
   tmp_3959 += tmp_3960;
   result += (-0.5) * tmp_3959;
   std::complex<double> tmp_3962;
   std::complex<double> tmp_3963;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3963 += B1(p,MGlu,MSDX(gI1))*Conj(CpbarUFDXSDXGluPR(gO2,gI1,1))*
         CpbarUFDXSDXGluPR(gO1,gI1,1);
   }
   tmp_3962 += tmp_3963;
   result += (-0.6666666666666666) * tmp_3962;
   std::complex<double> tmp_3964;
   std::complex<double> tmp_3965;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3966;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3966 += B1(p,MChi(gI2),MSDX(gI1))*Conj(CpbarUFDXSDXChiPR(gO2
            ,gI1,gI2))*CpbarUFDXSDXChiPR(gO1,gI1,gI2);
      }
      tmp_3965 += tmp_3966;
   }
   tmp_3964 += tmp_3965;
   result += (-0.5) * tmp_3964;
   std::complex<double> tmp_3967;
   std::complex<double> tmp_3968;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3968 += B1(p,MFDX(gI2),0)*Conj(CpbarUFDXVGFDXPL(gO2,gI2))*
         CpbarUFDXVGFDXPL(gO1,gI2);
   }
   tmp_3967 += tmp_3968;
   result += (-1.3333333333333333) * tmp_3967;
   std::complex<double> tmp_3969;
   std::complex<double> tmp_3970;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3970 += B1(p,MFDX(gI2),0)*Conj(CpbarUFDXVPFDXPL(gO2,gI2))*
         CpbarUFDXVPFDXPL(gO1,gI2);
   }
   tmp_3969 += tmp_3970;
   result += (-1) * tmp_3969;
   std::complex<double> tmp_3971;
   std::complex<double> tmp_3972;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3972 += B1(p,MFDX(gI2),MVZ)*Conj(CpbarUFDXVZFDXPL(gO2,gI2))*
         CpbarUFDXVZFDXPL(gO1,gI2);
   }
   tmp_3971 += tmp_3972;
   result += (-1) * tmp_3971;
   std::complex<double> tmp_3973;
   std::complex<double> tmp_3974;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3974 += B1(p,MFDX(gI2),MVZp)*Conj(CpbarUFDXVZpFDXPL(gO2,gI2))*
         CpbarUFDXVZpFDXPL(gO1,gI2);
   }
   tmp_3973 += tmp_3974;
   result += (-1) * tmp_3973;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_FDX_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3975;
   std::complex<double> tmp_3976;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_3977;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_3977 += B1(p,MFDX(gI1),MAh(gI2))*Conj(CpbarUFDXFDXAhPL(gO2,
            gI1,gI2))*CpbarUFDXFDXAhPL(gO1,gI1,gI2);
      }
      tmp_3976 += tmp_3977;
   }
   tmp_3975 += tmp_3976;
   result += (-0.5) * tmp_3975;
   std::complex<double> tmp_3978;
   std::complex<double> tmp_3979;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_3980;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_3980 += B1(p,MFDX(gI2),Mhh(gI1))*Conj(CpbarUFDXhhFDXPL(gO2,
            gI1,gI2))*CpbarUFDXhhFDXPL(gO1,gI1,gI2);
      }
      tmp_3979 += tmp_3980;
   }
   tmp_3978 += tmp_3979;
   result += (-0.5) * tmp_3978;
   std::complex<double> tmp_3981;
   std::complex<double> tmp_3982;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_3982 += B1(p,MGlu,MSDX(gI1))*Conj(CpbarUFDXSDXGluPL(gO2,gI1,1))*
         CpbarUFDXSDXGluPL(gO1,gI1,1);
   }
   tmp_3981 += tmp_3982;
   result += (-0.6666666666666666) * tmp_3981;
   std::complex<double> tmp_3983;
   std::complex<double> tmp_3984;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_3985;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3985 += B1(p,MChi(gI2),MSDX(gI1))*Conj(CpbarUFDXSDXChiPL(gO2
            ,gI1,gI2))*CpbarUFDXSDXChiPL(gO1,gI1,gI2);
      }
      tmp_3984 += tmp_3985;
   }
   tmp_3983 += tmp_3984;
   result += (-0.5) * tmp_3983;
   std::complex<double> tmp_3986;
   std::complex<double> tmp_3987;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3987 += B1(p,MFDX(gI2),0)*Conj(CpbarUFDXVGFDXPR(gO2,gI2))*
         CpbarUFDXVGFDXPR(gO1,gI2);
   }
   tmp_3986 += tmp_3987;
   result += (-1.3333333333333333) * tmp_3986;
   std::complex<double> tmp_3988;
   std::complex<double> tmp_3989;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3989 += B1(p,MFDX(gI2),0)*Conj(CpbarUFDXVPFDXPR(gO2,gI2))*
         CpbarUFDXVPFDXPR(gO1,gI2);
   }
   tmp_3988 += tmp_3989;
   result += (-1) * tmp_3988;
   std::complex<double> tmp_3990;
   std::complex<double> tmp_3991;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3991 += B1(p,MFDX(gI2),MVZ)*Conj(CpbarUFDXVZFDXPR(gO2,gI2))*
         CpbarUFDXVZFDXPR(gO1,gI2);
   }
   tmp_3990 += tmp_3991;
   result += (-1) * tmp_3990;
   std::complex<double> tmp_3992;
   std::complex<double> tmp_3993;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_3993 += B1(p,MFDX(gI2),MVZp)*Conj(CpbarUFDXVZpFDXPR(gO2,gI2))*
         CpbarUFDXVZpFDXPR(gO1,gI2);
   }
   tmp_3992 += tmp_3993;
   result += (-1) * tmp_3992;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChiP_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3994;
   std::complex<double> tmp_3995;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3996;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_3996 += B0(p,MCha(gI2),MSHpp(gI1))*Conj(CpUChiPconjSHppChaPL
            (gO2,gI1,gI2))*CpUChiPconjSHppChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_3995 += tmp_3996;
   }
   tmp_3994 += tmp_3995;
   result += (2) * tmp_3994;
   std::complex<double> tmp_3997;
   std::complex<double> tmp_3998;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_3999;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_3999 += B0(p,MChi(gI2),MSHp0(gI1))*Conj(CpUChiPconjSHp0ChiPL
            (gO2,gI1,gI2))*CpUChiPconjSHp0ChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_3998 += tmp_3999;
   }
   tmp_3997 += tmp_3998;
   result += (2) * tmp_3997;
   std::complex<double> tmp_4000;
   std::complex<double> tmp_4001;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_4001 += B0(p,MChiP(gI2),MVZ)*Conj(CpUChiPVZChiPPR(gO2,gI2))*
         CpUChiPVZChiPPL(gO1,gI2)*MChiP(gI2);
   }
   tmp_4000 += tmp_4001;
   result += (-4) * tmp_4000;
   std::complex<double> tmp_4002;
   std::complex<double> tmp_4003;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_4003 += B0(p,MChiP(gI2),MVZp)*Conj(CpUChiPVZpChiPPR(gO2,gI2))*
         CpUChiPVZpChiPPL(gO1,gI2)*MChiP(gI2);
   }
   tmp_4002 += tmp_4003;
   result += (-4) * tmp_4002;
   result += -8*MChaP*B0(p,MChaP,MVWm)*Conj(CpUChiPconjVWmChaPPR(gO2,1))*
      CpUChiPconjVWmChaPPL(gO1,1);

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChiP_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += -2*B1(p,MChaP,MVWm)*Conj(CpUChiPconjVWmChaPPL(gO2,1))*
      CpUChiPconjVWmChaPPL(gO1,1);
   std::complex<double> tmp_4004;
   std::complex<double> tmp_4005;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4006;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4006 += B1(p,MCha(gI2),MSHpp(gI1))*Conj(CpUChiPconjSHppChaPR
            (gO2,gI1,gI2))*CpUChiPconjSHppChaPR(gO1,gI1,gI2);
      }
      tmp_4005 += tmp_4006;
   }
   tmp_4004 += tmp_4005;
   result += (-1) * tmp_4004;
   std::complex<double> tmp_4007;
   std::complex<double> tmp_4008;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4009;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4009 += B1(p,MChi(gI2),MSHp0(gI1))*Conj(CpUChiPconjSHp0ChiPR
            (gO2,gI1,gI2))*CpUChiPconjSHp0ChiPR(gO1,gI1,gI2);
      }
      tmp_4008 += tmp_4009;
   }
   tmp_4007 += tmp_4008;
   result += (-1) * tmp_4007;
   std::complex<double> tmp_4010;
   std::complex<double> tmp_4011;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_4011 += B1(p,MChiP(gI2),MVZ)*Conj(CpUChiPVZChiPPL(gO2,gI2))*
         CpUChiPVZChiPPL(gO1,gI2);
   }
   tmp_4010 += tmp_4011;
   result += (-1) * tmp_4010;
   std::complex<double> tmp_4012;
   std::complex<double> tmp_4013;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_4013 += B1(p,MChiP(gI2),MVZp)*Conj(CpUChiPVZpChiPPL(gO2,gI2))*
         CpUChiPVZpChiPPL(gO1,gI2);
   }
   tmp_4012 += tmp_4013;
   result += (-1) * tmp_4012;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChiP_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += -2*B1(p,MChaP,MVWm)*Conj(CpUChiPconjVWmChaPPR(gO2,1))*
      CpUChiPconjVWmChaPPR(gO1,1);
   std::complex<double> tmp_4014;
   std::complex<double> tmp_4015;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4016;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4016 += B1(p,MCha(gI2),MSHpp(gI1))*Conj(CpUChiPconjSHppChaPL
            (gO2,gI1,gI2))*CpUChiPconjSHppChaPL(gO1,gI1,gI2);
      }
      tmp_4015 += tmp_4016;
   }
   tmp_4014 += tmp_4015;
   result += (-1) * tmp_4014;
   std::complex<double> tmp_4017;
   std::complex<double> tmp_4018;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4019;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4019 += B1(p,MChi(gI2),MSHp0(gI1))*Conj(CpUChiPconjSHp0ChiPL
            (gO2,gI1,gI2))*CpUChiPconjSHp0ChiPL(gO1,gI1,gI2);
      }
      tmp_4018 += tmp_4019;
   }
   tmp_4017 += tmp_4018;
   result += (-1) * tmp_4017;
   std::complex<double> tmp_4020;
   std::complex<double> tmp_4021;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_4021 += B1(p,MChiP(gI2),MVZ)*Conj(CpUChiPVZChiPPR(gO2,gI2))*
         CpUChiPVZChiPPR(gO1,gI2);
   }
   tmp_4020 += tmp_4021;
   result += (-1) * tmp_4020;
   std::complex<double> tmp_4022;
   std::complex<double> tmp_4023;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_4023 += B1(p,MChiP(gI2),MVZp)*Conj(CpUChiPVZpChiPPR(gO2,gI2))*
         CpUChiPVZpChiPPR(gO1,gI2);
   }
   tmp_4022 += tmp_4023;
   result += (-1) * tmp_4022;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Glu_1(double p ) const
{
   std::complex<double> result;

   std::complex<double> tmp_4024;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4025;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4025 += B0(p,MFd(gI2),MSd(gI1))*Conj(CpGluconjSdFdPL(gI1,gI2
            ))*CpGluconjSdFdPR(gI1,gI2)*MFd(gI2);
      }
      tmp_4024 += tmp_4025;
   }
   result += tmp_4024;
   std::complex<double> tmp_4026;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4027;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4027 += B0(p,MFDX(gI2),MSDX(gI1))*Conj(CpGluconjSDXFDXPL(gI1
            ,gI2))*CpGluconjSDXFDXPR(gI1,gI2)*MFDX(gI2);
      }
      tmp_4026 += tmp_4027;
   }
   result += tmp_4026;
   std::complex<double> tmp_4028;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4029;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4029 += B0(p,MFu(gI2),MSu(gI1))*Conj(CpGluconjSuFuPL(gI1,gI2
            ))*CpGluconjSuFuPR(gI1,gI2)*MFu(gI2);
      }
      tmp_4028 += tmp_4029;
   }
   result += tmp_4028;
   result += -12*MGlu*B0(p,MGlu,0)*Conj(CpGluVGGluPR())*CpGluVGGluPL();

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Glu_PR(double p ) const
{
   std::complex<double> result;

   result += -3*AbsSqr(CpGluVGGluPL())*B1(p,MGlu,0);
   std::complex<double> tmp_4030;
   std::complex<double> tmp_4031;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4032;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4032 += AbsSqr(CpGluconjSdFdPR(gI1,gI2))*B1(p,MFd(gI2),MSd(
            gI1));
      }
      tmp_4031 += tmp_4032;
   }
   tmp_4030 += tmp_4031;
   result += (-0.5) * tmp_4030;
   std::complex<double> tmp_4033;
   std::complex<double> tmp_4034;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4035;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4035 += AbsSqr(CpGluconjSDXFDXPR(gI1,gI2))*B1(p,MFDX(gI2),
            MSDX(gI1));
      }
      tmp_4034 += tmp_4035;
   }
   tmp_4033 += tmp_4034;
   result += (-0.5) * tmp_4033;
   std::complex<double> tmp_4036;
   std::complex<double> tmp_4037;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4038;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4038 += AbsSqr(CpGluconjSuFuPR(gI1,gI2))*B1(p,MFu(gI2),MSu(
            gI1));
      }
      tmp_4037 += tmp_4038;
   }
   tmp_4036 += tmp_4037;
   result += (-0.5) * tmp_4036;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Glu_PL(double p ) const
{
   std::complex<double> result;

   result += -3*AbsSqr(CpGluVGGluPR())*B1(p,MGlu,0);
   std::complex<double> tmp_4039;
   std::complex<double> tmp_4040;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4041;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4041 += AbsSqr(CpGluconjSdFdPL(gI1,gI2))*B1(p,MFd(gI2),MSd(
            gI1));
      }
      tmp_4040 += tmp_4041;
   }
   tmp_4039 += tmp_4040;
   result += (-0.5) * tmp_4039;
   std::complex<double> tmp_4042;
   std::complex<double> tmp_4043;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4044;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4044 += AbsSqr(CpGluconjSDXFDXPL(gI1,gI2))*B1(p,MFDX(gI2),
            MSDX(gI1));
      }
      tmp_4043 += tmp_4044;
   }
   tmp_4042 += tmp_4043;
   result += (-0.5) * tmp_4042;
   std::complex<double> tmp_4045;
   std::complex<double> tmp_4046;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4047;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4047 += AbsSqr(CpGluconjSuFuPL(gI1,gI2))*B1(p,MFu(gI2),MSu(
            gI1));
      }
      tmp_4046 += tmp_4047;
   }
   tmp_4045 += tmp_4046;
   result += (-0.5) * tmp_4045;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChaP_1(double p ) const
{
   std::complex<double> result;

   std::complex<double> tmp_4048;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4049;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4049 += B0(p,MCha(gI2),MSHp0(gI1))*Conj(CpbarChaPSHp0ChaPL(
            gI1,gI2))*CpbarChaPSHp0ChaPR(gI1,gI2)*MCha(gI2);
      }
      tmp_4048 += tmp_4049;
   }
   result += tmp_4048;
   std::complex<double> tmp_4050;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4051;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4051 += B0(p,MChi(gI2),MSHpp(gI1))*Conj(CpbarChaPSHppChiPL(
            gI1,gI2))*CpbarChaPSHppChiPR(gI1,gI2)*MChi(gI2);
      }
      tmp_4050 += tmp_4051;
   }
   result += tmp_4050;
   std::complex<double> tmp_4052;
   std::complex<double> tmp_4053;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_4053 += B0(p,MChiP(gI2),MVWm)*Conj(CpbarChaPVWmChiPPR(gI2))*
         CpbarChaPVWmChiPPL(gI2)*MChiP(gI2);
   }
   tmp_4052 += tmp_4053;
   result += (-4) * tmp_4052;
   result += -4*MChaP*B0(p,MChaP,0)*Conj(CpbarChaPVPChaPPR())*CpbarChaPVPChaPPL
      ();
   result += -4*MChaP*B0(p,MChaP,MVZ)*Conj(CpbarChaPVZChaPPR())*
      CpbarChaPVZChaPPL();
   result += -4*MChaP*B0(p,MChaP,MVZp)*Conj(CpbarChaPVZpChaPPR())*
      CpbarChaPVZpChaPPL();

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChaP_PR(double p ) const
{
   std::complex<double> result;

   result += -(AbsSqr(CpbarChaPVPChaPPL())*B1(p,MChaP,0));
   result += -(AbsSqr(CpbarChaPVZChaPPL())*B1(p,MChaP,MVZ));
   result += -(AbsSqr(CpbarChaPVZpChaPPL())*B1(p,MChaP,MVZp));
   std::complex<double> tmp_4054;
   std::complex<double> tmp_4055;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4056;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4056 += AbsSqr(CpbarChaPSHp0ChaPR(gI1,gI2))*B1(p,MCha(gI2),
            MSHp0(gI1));
      }
      tmp_4055 += tmp_4056;
   }
   tmp_4054 += tmp_4055;
   result += (-0.5) * tmp_4054;
   std::complex<double> tmp_4057;
   std::complex<double> tmp_4058;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4059;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4059 += AbsSqr(CpbarChaPSHppChiPR(gI1,gI2))*B1(p,MChi(gI2),
            MSHpp(gI1));
      }
      tmp_4058 += tmp_4059;
   }
   tmp_4057 += tmp_4058;
   result += (-0.5) * tmp_4057;
   std::complex<double> tmp_4060;
   std::complex<double> tmp_4061;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_4061 += AbsSqr(CpbarChaPVWmChiPPL(gI2))*B1(p,MChiP(gI2),MVWm);
   }
   tmp_4060 += tmp_4061;
   result += (-1) * tmp_4060;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_ChaP_PL(double p ) const
{
   std::complex<double> result;

   result += -(AbsSqr(CpbarChaPVPChaPPR())*B1(p,MChaP,0));
   result += -(AbsSqr(CpbarChaPVZChaPPR())*B1(p,MChaP,MVZ));
   result += -(AbsSqr(CpbarChaPVZpChaPPR())*B1(p,MChaP,MVZp));
   std::complex<double> tmp_4062;
   std::complex<double> tmp_4063;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4064;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4064 += AbsSqr(CpbarChaPSHp0ChaPL(gI1,gI2))*B1(p,MCha(gI2),
            MSHp0(gI1));
      }
      tmp_4063 += tmp_4064;
   }
   tmp_4062 += tmp_4063;
   result += (-0.5) * tmp_4062;
   std::complex<double> tmp_4065;
   std::complex<double> tmp_4066;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4067;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4067 += AbsSqr(CpbarChaPSHppChiPL(gI1,gI2))*B1(p,MChi(gI2),
            MSHpp(gI1));
      }
      tmp_4066 += tmp_4067;
   }
   tmp_4065 += tmp_4066;
   result += (-0.5) * tmp_4065;
   std::complex<double> tmp_4068;
   std::complex<double> tmp_4069;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_4069 += AbsSqr(CpbarChaPVWmChiPPR(gI2))*B1(p,MChiP(gI2),MVWm);
   }
   tmp_4068 += tmp_4069;
   result += (-1) * tmp_4068;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_VZ_heavy(double p ) const
{
   std::complex<double> result;

   result += -4*AbsSqr(CpVZconjHpmHpm(1,1))*B00(p,MHpm(1),MHpm(1));
   result += 2*AbsSqr(CpVZconjVWmHpm(1))*B0(p,MVWm,MHpm(1));
   result += A0(MHpm(1))*CpVZVZconjHpmHpm(1,1);
   result += (AbsSqr(CpVZbarChaPChaPPL(1,1)) + AbsSqr(CpVZbarChaPChaPPR(1,1)))*
      H0(p,MChaP,MChaP);
   std::complex<double> tmp_4070;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_4070 += A0(MSHp0(gI1))*CpVZVZconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_4070;
   std::complex<double> tmp_4071;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_4071 += A0(MSHpp(gI1))*CpVZVZconjSHppSHpp(gI1,gI1);
   }
   result += tmp_4071;
   std::complex<double> tmp_4072;
   std::complex<double> tmp_4073;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4074;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4074 += AbsSqr(CpVZconjSHp0SHp0(gI1,gI2))*B00(p,MSHp0(gI1),
            MSHp0(gI2));
      }
      tmp_4073 += tmp_4074;
   }
   tmp_4072 += tmp_4073;
   result += (-4) * tmp_4072;
   std::complex<double> tmp_4075;
   std::complex<double> tmp_4076;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4077;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4077 += AbsSqr(CpVZconjSHppSHpp(gI1,gI2))*B00(p,MSHpp(gI1),
            MSHpp(gI2));
      }
      tmp_4076 += tmp_4077;
   }
   tmp_4075 += tmp_4076;
   result += (-4) * tmp_4075;
   std::complex<double> tmp_4078;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4079;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4079 += (AbsSqr(CpVZbarChaChaPL(gI1,gI2)) + AbsSqr(
            CpVZbarChaChaPR(gI1,gI2)))*H0(p,MCha(gI1),MCha(gI2));
         tmp_4079 += 4*B0(p,MCha(gI1),MCha(gI2))*MCha(gI1)*MCha(gI2)*Re(
            Conj(CpVZbarChaChaPL(gI1,gI2))*CpVZbarChaChaPR(gI1,gI2));
      }
      tmp_4078 += tmp_4079;
   }
   result += tmp_4078;
   std::complex<double> tmp_4080;
   std::complex<double> tmp_4081;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4082;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4082 += (AbsSqr(CpVZChiPChiPPL(gI1,gI2)) + AbsSqr(
            CpVZChiPChiPPR(gI1,gI2)))*H0(p,MChiP(gI1),MChiP(gI2));
         tmp_4082 += 4*B0(p,MChiP(gI1),MChiP(gI2))*MChiP(gI1)*MChiP(gI2)*
            Re(Conj(CpVZChiPChiPPL(gI1,gI2))*CpVZChiPChiPPR(gI1,gI2));
      }
      tmp_4081 += tmp_4082;
   }
   tmp_4080 += tmp_4081;
   result += (0.5) * tmp_4080;
   std::complex<double> tmp_4083;
   std::complex<double> tmp_4084;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_4084 += A0(MAh(2 + gI1))*CpVZVZAhAh(2 + gI1,2 + gI1);
   }
   tmp_4083 += tmp_4084;
   result += (0.5) * tmp_4083;
   std::complex<double> tmp_4085;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_4085 += A0(MSv(gI1))*CpVZVZconjSvSv(gI1,gI1);
   }
   result += tmp_4085;
   std::complex<double> tmp_4086;
   std::complex<double> tmp_4087;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4088;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4088 += AbsSqr(CpVZconjSvSv(gI1,gI2))*B00(p,MSv(gI1),MSv(gI2
            ));
      }
      tmp_4087 += tmp_4088;
   }
   tmp_4086 += tmp_4087;
   result += (-4) * tmp_4086;
   std::complex<double> tmp_4089;
   std::complex<double> tmp_4090;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4091;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4091 += (AbsSqr(CpVZbarFDXFDXPL(gI1,gI2)) + AbsSqr(
            CpVZbarFDXFDXPR(gI1,gI2)))*H0(p,MFDX(gI1),MFDX(gI2));
         tmp_4091 += 4*B0(p,MFDX(gI1),MFDX(gI2))*MFDX(gI1)*MFDX(gI2)*Re(
            Conj(CpVZbarFDXFDXPL(gI1,gI2))*CpVZbarFDXFDXPR(gI1,gI2));
      }
      tmp_4090 += tmp_4091;
   }
   tmp_4089 += tmp_4090;
   result += (3) * tmp_4089;
   std::complex<double> tmp_4092;
   std::complex<double> tmp_4093;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_4093 += A0(Mhh(gI1))*CpVZVZhhhh(gI1,gI1);
   }
   tmp_4092 += tmp_4093;
   result += (0.5) * tmp_4092;
   std::complex<double> tmp_4094;
   std::complex<double> tmp_4095;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_4096;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4096 += AbsSqr(CpVZhhAh(gI1,2 + gI2))*B00(p,MAh(2 + gI2),Mhh
            (gI1));
      }
      tmp_4095 += tmp_4096;
   }
   tmp_4094 += tmp_4095;
   result += (-4) * tmp_4094;
   std::complex<double> tmp_4097;
   std::complex<double> tmp_4098;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4098 += A0(MSd(gI1))*CpVZVZconjSdSd(gI1,gI1);
   }
   tmp_4097 += tmp_4098;
   result += (3) * tmp_4097;
   std::complex<double> tmp_4099;
   std::complex<double> tmp_4100;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4100 += A0(MSDX(gI1))*CpVZVZconjSDXSDX(gI1,gI1);
   }
   tmp_4099 += tmp_4100;
   result += (3) * tmp_4099;
   std::complex<double> tmp_4101;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4101 += A0(MSe(gI1))*CpVZVZconjSeSe(gI1,gI1);
   }
   result += tmp_4101;
   std::complex<double> tmp_4102;
   std::complex<double> tmp_4103;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4103 += A0(MSu(gI1))*CpVZVZconjSuSu(gI1,gI1);
   }
   tmp_4102 += tmp_4103;
   result += (3) * tmp_4102;
   std::complex<double> tmp_4104;
   std::complex<double> tmp_4105;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4106;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_4106 += AbsSqr(CpVZconjSdSd(gI1,gI2))*B00(p,MSd(gI1),MSd(gI2
            ));
      }
      tmp_4105 += tmp_4106;
   }
   tmp_4104 += tmp_4105;
   result += (-12) * tmp_4104;
   std::complex<double> tmp_4107;
   std::complex<double> tmp_4108;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4109;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_4109 += AbsSqr(CpVZconjSDXSDX(gI1,gI2))*B00(p,MSDX(gI1),MSDX
            (gI2));
      }
      tmp_4108 += tmp_4109;
   }
   tmp_4107 += tmp_4108;
   result += (-12) * tmp_4107;
   std::complex<double> tmp_4110;
   std::complex<double> tmp_4111;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4112;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_4112 += AbsSqr(CpVZconjSeSe(gI1,gI2))*B00(p,MSe(gI1),MSe(gI2
            ));
      }
      tmp_4111 += tmp_4112;
   }
   tmp_4110 += tmp_4111;
   result += (-4) * tmp_4110;
   std::complex<double> tmp_4113;
   std::complex<double> tmp_4114;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4115;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_4115 += AbsSqr(CpVZconjSuSu(gI1,gI2))*B00(p,MSu(gI1),MSu(gI2
            ));
      }
      tmp_4114 += tmp_4115;
   }
   tmp_4113 += tmp_4114;
   result += (-12) * tmp_4113;
   std::complex<double> tmp_4116;
   std::complex<double> tmp_4117;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_4118;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4118 += (AbsSqr(CpVZChiChiPL(gI1,gI2)) + AbsSqr(CpVZChiChiPR
            (gI1,gI2)))*H0(p,MChi(gI1),MChi(gI2));
         tmp_4118 += 4*B0(p,MChi(gI1),MChi(gI2))*MChi(gI1)*MChi(gI2)*Re(
            Conj(CpVZChiChiPL(gI1,gI2))*CpVZChiChiPR(gI1,gI2));
      }
      tmp_4117 += tmp_4118;
   }
   tmp_4116 += tmp_4117;
   result += (0.5) * tmp_4116;
   std::complex<double> tmp_4119;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_4119 += AbsSqr(CpVZVZhh(gI2))*B0(p,MVZ,Mhh(gI2));
   }
   result += tmp_4119;
   std::complex<double> tmp_4120;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_4120 += AbsSqr(CpVZVZphh(gI2))*B0(p,MVZp,Mhh(gI2));
   }
   result += tmp_4120;
   result += 4*B0(p,MChaP,MChaP)*Re(Conj(CpVZbarChaPChaPPL(1,1))*
      CpVZbarChaPChaPPR(1,1))*Sqr(MChaP);

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_VWm_heavy(double p ) const
{
   std::complex<double> result;

   result += AbsSqr(CpconjVWmbarVWmVZp())*B00(p,MVZp,MVWm);
   result += AbsSqr(CpconjVWmbarVZpVWm())*B00(p,MVWm,MVZp);
   result += AbsSqr(CpconjVWmVPHpm(1))*B0(p,0,MHpm(1));
   result += AbsSqr(CpconjVWmVZHpm(1))*B0(p,MVZ,MHpm(1));
   result += AbsSqr(CpconjVWmVZpHpm(1))*B0(p,MVZp,MHpm(1));
   result += A0(MHpm(1))*CpVWmconjVWmconjHpmHpm(1,1);
   result += -0.5*A0(MVZp)*(4*CpVWmconjVWmVZpVZp1() + CpVWmconjVWmVZpVZp2() +
      CpVWmconjVWmVZpVZp3());
   std::complex<double> tmp_4121;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_4121 += A0(MSHp0(gI1))*CpVWmconjVWmconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_4121;
   std::complex<double> tmp_4122;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_4122 += A0(MSHpp(gI1))*CpVWmconjVWmconjSHppSHpp(gI1,gI1);
   }
   result += tmp_4122;
   std::complex<double> tmp_4123;
   std::complex<double> tmp_4124;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4125;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4125 += AbsSqr(CpconjVWmconjSHp0SHpp(gI1,gI2))*B00(p,MSHpp(
            gI2),MSHp0(gI1));
      }
      tmp_4124 += tmp_4125;
   }
   tmp_4123 += tmp_4124;
   result += (-4) * tmp_4123;
   std::complex<double> tmp_4126;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_4126 += (AbsSqr(CpconjVWmChiPChaPPL(gI1,1)) + AbsSqr(
         CpconjVWmChiPChaPPR(gI1,1)))*H0(p,MChiP(gI1),MChaP);
      tmp_4126 += 4*MChaP*B0(p,MChiP(gI1),MChaP)*MChiP(gI1)*Re(Conj(
         CpconjVWmChiPChaPPL(gI1,1))*CpconjVWmChiPChaPPR(gI1,1));
   }
   result += tmp_4126;
   std::complex<double> tmp_4127;
   std::complex<double> tmp_4128;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_4128 += A0(MAh(2 + gI1))*CpVWmconjVWmAhAh(2 + gI1,2 + gI1);
   }
   tmp_4127 += tmp_4128;
   result += (0.5) * tmp_4127;
   std::complex<double> tmp_4129;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_4129 += A0(MSv(gI1))*CpVWmconjVWmconjSvSv(gI1,gI1);
   }
   result += tmp_4129;
   std::complex<double> tmp_4130;
   std::complex<double> tmp_4131;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4132;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_4132 += AbsSqr(CpconjVWmconjSvSe(gI1,gI2))*B00(p,MSe(gI2),
            MSv(gI1));
      }
      tmp_4131 += tmp_4132;
   }
   tmp_4130 += tmp_4131;
   result += (-4) * tmp_4130;
   std::complex<double> tmp_4133;
   std::complex<double> tmp_4134;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_4134 += A0(Mhh(gI1))*CpVWmconjVWmhhhh(gI1,gI1);
   }
   tmp_4133 += tmp_4134;
   result += (0.5) * tmp_4133;
   std::complex<double> tmp_4135;
   std::complex<double> tmp_4136;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4136 += A0(MSd(gI1))*CpVWmconjVWmconjSdSd(gI1,gI1);
   }
   tmp_4135 += tmp_4136;
   result += (3) * tmp_4135;
   std::complex<double> tmp_4137;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4137 += A0(MSe(gI1))*CpVWmconjVWmconjSeSe(gI1,gI1);
   }
   result += tmp_4137;
   std::complex<double> tmp_4138;
   std::complex<double> tmp_4139;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4139 += A0(MSu(gI1))*CpVWmconjVWmconjSuSu(gI1,gI1);
   }
   tmp_4138 += tmp_4139;
   result += (3) * tmp_4138;
   std::complex<double> tmp_4140;
   std::complex<double> tmp_4141;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4142;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_4142 += AbsSqr(CpconjVWmconjSuSd(gI1,gI2))*B00(p,MSd(gI2),
            MSu(gI1));
      }
      tmp_4141 += tmp_4142;
   }
   tmp_4140 += tmp_4141;
   result += (-12) * tmp_4140;
   std::complex<double> tmp_4143;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_4144;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4144 += (AbsSqr(CpconjVWmChiChaPL(gI1,gI2)) + AbsSqr(
            CpconjVWmChiChaPR(gI1,gI2)))*H0(p,MChi(gI1),MCha(gI2));
         tmp_4144 += 4*B0(p,MChi(gI1),MCha(gI2))*MCha(gI2)*MChi(gI1)*Re(
            Conj(CpconjVWmChiChaPL(gI1,gI2))*CpconjVWmChiChaPR(gI1,gI2));
      }
      tmp_4143 += tmp_4144;
   }
   result += tmp_4143;
   std::complex<double> tmp_4145;
   std::complex<double> tmp_4146;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4146 += AbsSqr(CpconjVWmHpmAh(1,2 + gI2))*B00(p,MAh(2 + gI2),MHpm(
         1));
   }
   tmp_4145 += tmp_4146;
   result += (-4) * tmp_4145;
   std::complex<double> tmp_4147;
   std::complex<double> tmp_4148;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_4148 += AbsSqr(CpconjVWmHpmhh(1,gI2))*B00(p,Mhh(gI2),MHpm(1));
   }
   tmp_4147 += tmp_4148;
   result += (-4) * tmp_4147;
   std::complex<double> tmp_4149;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_4149 += AbsSqr(CpconjVWmVWmhh(gI2))*B0(p,MVWm,Mhh(gI2));
   }
   result += tmp_4149;
   result += -(AbsSqr(CpconjVWmVZpVWm())*(A0(MVWm) + A0(MVZp) + 10*B00(p,MVZp,
      MVWm) + B0(p,MVZp,MVWm)*(Sqr(MVWm) + Sqr(MVZp) + 4*Sqr(p))));

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fe_1_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4150;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4151;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4151 += B0(p,MFv(gI2),MHpm(gI1))*Conj(CpbarFeHpmFvPL(gO2,gI1
            ,gI2))*CpbarFeHpmFvPR(gO1,gI1,gI2)*MFv(gI2);
      }
      tmp_4150 += tmp_4151;
   }
   result += tmp_4150;
   std::complex<double> tmp_4152;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4153;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4153 += B0(p,MCha(gI2),MSv(gI1))*Conj(CpbarFeSvChaPL(gO2,gI1
            ,gI2))*CpbarFeSvChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_4152 += tmp_4153;
   }
   result += tmp_4152;
   std::complex<double> tmp_4154;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4155;
      std::complex<double> tmp_4156;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_4156 += B0(p,MFe(gI1),MAh(gI2))*Conj(CpbarFeFeAhPL(gO2,gI1,
            gI2))*CpbarFeFeAhPR(gO1,gI1,gI2);
      }
      tmp_4155 += tmp_4156;
      tmp_4154 += (MFe(gI1)) * tmp_4155;
   }
   result += tmp_4154;
   std::complex<double> tmp_4157;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_4158;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4158 += B0(p,MFe(gI2),Mhh(gI1))*Conj(CpbarFehhFePL(gO2,gI1,
            gI2))*CpbarFehhFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_4157 += tmp_4158;
   }
   result += tmp_4157;
   std::complex<double> tmp_4159;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4160;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4160 += B0(p,MChi(gI2),MSe(gI1))*Conj(CpbarFeSeChiPL(gO2,gI1
            ,gI2))*CpbarFeSeChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_4159 += tmp_4160;
   }
   result += tmp_4159;
   std::complex<double> tmp_4161;
   std::complex<double> tmp_4162;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4162 += B0(p,MFe(gI2),MVZ)*Conj(CpbarFeVZFePR(gO2,gI2))*
         CpbarFeVZFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_4161 += tmp_4162;
   result += (-4) * tmp_4161;
   std::complex<double> tmp_4163;
   std::complex<double> tmp_4164;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4164 += B0(p,MFe(gI2),MVZp)*Conj(CpbarFeVZpFePR(gO2,gI2))*
         CpbarFeVZpFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_4163 += tmp_4164;
   result += (-4) * tmp_4163;
   std::complex<double> tmp_4165;
   std::complex<double> tmp_4166;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4166 += B0(p,MFv(gI2),MVWm)*Conj(CpbarFeVWmFvPR(gO2,gI2))*
         CpbarFeVWmFvPL(gO1,gI2)*MFv(gI2);
   }
   tmp_4165 += tmp_4166;
   result += (-4) * tmp_4165;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fe_PR_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4167;
   std::complex<double> tmp_4168;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4169;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4169 += B1(p,MFv(gI2),MHpm(gI1))*Conj(CpbarFeHpmFvPR(gO2,gI1
            ,gI2))*CpbarFeHpmFvPR(gO1,gI1,gI2);
      }
      tmp_4168 += tmp_4169;
   }
   tmp_4167 += tmp_4168;
   result += (-0.5) * tmp_4167;
   std::complex<double> tmp_4170;
   std::complex<double> tmp_4171;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4172;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4172 += B1(p,MCha(gI2),MSv(gI1))*Conj(CpbarFeSvChaPR(gO2,gI1
            ,gI2))*CpbarFeSvChaPR(gO1,gI1,gI2);
      }
      tmp_4171 += tmp_4172;
   }
   tmp_4170 += tmp_4171;
   result += (-0.5) * tmp_4170;
   std::complex<double> tmp_4173;
   std::complex<double> tmp_4174;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4175;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_4175 += B1(p,MFe(gI1),MAh(gI2))*Conj(CpbarFeFeAhPR(gO2,gI1,
            gI2))*CpbarFeFeAhPR(gO1,gI1,gI2);
      }
      tmp_4174 += tmp_4175;
   }
   tmp_4173 += tmp_4174;
   result += (-0.5) * tmp_4173;
   std::complex<double> tmp_4176;
   std::complex<double> tmp_4177;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_4178;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4178 += B1(p,MFe(gI2),Mhh(gI1))*Conj(CpbarFehhFePR(gO2,gI1,
            gI2))*CpbarFehhFePR(gO1,gI1,gI2);
      }
      tmp_4177 += tmp_4178;
   }
   tmp_4176 += tmp_4177;
   result += (-0.5) * tmp_4176;
   std::complex<double> tmp_4179;
   std::complex<double> tmp_4180;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4181;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4181 += B1(p,MChi(gI2),MSe(gI1))*Conj(CpbarFeSeChiPR(gO2,gI1
            ,gI2))*CpbarFeSeChiPR(gO1,gI1,gI2);
      }
      tmp_4180 += tmp_4181;
   }
   tmp_4179 += tmp_4180;
   result += (-0.5) * tmp_4179;
   std::complex<double> tmp_4182;
   std::complex<double> tmp_4183;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4183 += B1(p,MFv(gI2),MVWm)*Conj(CpbarFeVWmFvPL(gO2,gI2))*
         CpbarFeVWmFvPL(gO1,gI2);
   }
   tmp_4182 += tmp_4183;
   result += (-1) * tmp_4182;
   std::complex<double> tmp_4184;
   std::complex<double> tmp_4185;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4185 += B1(p,MFe(gI2),MVZ)*Conj(CpbarFeVZFePL(gO2,gI2))*
         CpbarFeVZFePL(gO1,gI2);
   }
   tmp_4184 += tmp_4185;
   result += (-1) * tmp_4184;
   std::complex<double> tmp_4186;
   std::complex<double> tmp_4187;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4187 += B1(p,MFe(gI2),MVZp)*Conj(CpbarFeVZpFePL(gO2,gI2))*
         CpbarFeVZpFePL(gO1,gI2);
   }
   tmp_4186 += tmp_4187;
   result += (-1) * tmp_4186;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fe_PL_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4188;
   std::complex<double> tmp_4189;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4190;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4190 += B1(p,MFv(gI2),MHpm(gI1))*Conj(CpbarFeHpmFvPL(gO2,gI1
            ,gI2))*CpbarFeHpmFvPL(gO1,gI1,gI2);
      }
      tmp_4189 += tmp_4190;
   }
   tmp_4188 += tmp_4189;
   result += (-0.5) * tmp_4188;
   std::complex<double> tmp_4191;
   std::complex<double> tmp_4192;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4193;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4193 += B1(p,MCha(gI2),MSv(gI1))*Conj(CpbarFeSvChaPL(gO2,gI1
            ,gI2))*CpbarFeSvChaPL(gO1,gI1,gI2);
      }
      tmp_4192 += tmp_4193;
   }
   tmp_4191 += tmp_4192;
   result += (-0.5) * tmp_4191;
   std::complex<double> tmp_4194;
   std::complex<double> tmp_4195;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4196;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_4196 += B1(p,MFe(gI1),MAh(gI2))*Conj(CpbarFeFeAhPL(gO2,gI1,
            gI2))*CpbarFeFeAhPL(gO1,gI1,gI2);
      }
      tmp_4195 += tmp_4196;
   }
   tmp_4194 += tmp_4195;
   result += (-0.5) * tmp_4194;
   std::complex<double> tmp_4197;
   std::complex<double> tmp_4198;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_4199;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4199 += B1(p,MFe(gI2),Mhh(gI1))*Conj(CpbarFehhFePL(gO2,gI1,
            gI2))*CpbarFehhFePL(gO1,gI1,gI2);
      }
      tmp_4198 += tmp_4199;
   }
   tmp_4197 += tmp_4198;
   result += (-0.5) * tmp_4197;
   std::complex<double> tmp_4200;
   std::complex<double> tmp_4201;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4202;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4202 += B1(p,MChi(gI2),MSe(gI1))*Conj(CpbarFeSeChiPL(gO2,gI1
            ,gI2))*CpbarFeSeChiPL(gO1,gI1,gI2);
      }
      tmp_4201 += tmp_4202;
   }
   tmp_4200 += tmp_4201;
   result += (-0.5) * tmp_4200;
   std::complex<double> tmp_4203;
   std::complex<double> tmp_4204;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4204 += B1(p,MFv(gI2),MVWm)*Conj(CpbarFeVWmFvPR(gO2,gI2))*
         CpbarFeVWmFvPR(gO1,gI2);
   }
   tmp_4203 += tmp_4204;
   result += (-1) * tmp_4203;
   std::complex<double> tmp_4205;
   std::complex<double> tmp_4206;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4206 += B1(p,MFe(gI2),MVZ)*Conj(CpbarFeVZFePR(gO2,gI2))*
         CpbarFeVZFePR(gO1,gI2);
   }
   tmp_4205 += tmp_4206;
   result += (-1) * tmp_4205;
   std::complex<double> tmp_4207;
   std::complex<double> tmp_4208;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4208 += B1(p,MFe(gI2),MVZp)*Conj(CpbarFeVZpFePR(gO2,gI2))*
         CpbarFeVZpFePR(gO1,gI2);
   }
   tmp_4207 += tmp_4208;
   result += (-1) * tmp_4207;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fd_1_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4209;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4210;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4210 += B0(p,MFu(gI2),MHpm(gI1))*Conj(CpbarFdHpmFuPL(gO2,gI1
            ,gI2))*CpbarFdHpmFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_4209 += tmp_4210;
   }
   result += tmp_4209;
   std::complex<double> tmp_4211;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4212;
      std::complex<double> tmp_4213;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_4213 += B0(p,MFd(gI1),MAh(gI2))*Conj(CpbarFdFdAhPL(gO2,gI1,
            gI2))*CpbarFdFdAhPR(gO1,gI1,gI2);
      }
      tmp_4212 += tmp_4213;
      tmp_4211 += (MFd(gI1)) * tmp_4212;
   }
   result += tmp_4211;
   std::complex<double> tmp_4214;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_4215;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4215 += B0(p,MFd(gI2),Mhh(gI1))*Conj(CpbarFdhhFdPL(gO2,gI1,
            gI2))*CpbarFdhhFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_4214 += tmp_4215;
   }
   result += tmp_4214;
   std::complex<double> tmp_4216;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4217;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4217 += B0(p,MCha(gI2),MSu(gI1))*Conj(CpbarFdSuChaPL(gO2,gI1
            ,gI2))*CpbarFdSuChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_4216 += tmp_4217;
   }
   result += tmp_4216;
   std::complex<double> tmp_4218;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4219;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4219 += B0(p,MChi(gI2),MSd(gI1))*Conj(CpbarFdSdChiPL(gO2,gI1
            ,gI2))*CpbarFdSdChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_4218 += tmp_4219;
   }
   result += tmp_4218;
   std::complex<double> tmp_4220;
   std::complex<double> tmp_4221;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4221 += B0(p,MFd(gI2),MVZ)*Conj(CpbarFdVZFdPR(gO2,gI2))*
         CpbarFdVZFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_4220 += tmp_4221;
   result += (-4) * tmp_4220;
   std::complex<double> tmp_4222;
   std::complex<double> tmp_4223;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4223 += B0(p,MFd(gI2),MVZp)*Conj(CpbarFdVZpFdPR(gO2,gI2))*
         CpbarFdVZpFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_4222 += tmp_4223;
   result += (-4) * tmp_4222;
   std::complex<double> tmp_4224;
   std::complex<double> tmp_4225;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4225 += B0(p,MFu(gI2),MVWm)*Conj(CpbarFdVWmFuPR(gO2,gI2))*
         CpbarFdVWmFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_4224 += tmp_4225;
   result += (-4) * tmp_4224;
   std::complex<double> tmp_4226;
   std::complex<double> tmp_4227;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4227 += B0(p,MGlu,MSd(gI1))*Conj(CpbarFdSdGluPL(gO2,gI1,1))*
         CpbarFdSdGluPR(gO1,gI1,1);
   }
   tmp_4226 += tmp_4227;
   result += (1.3333333333333333*MGlu) * tmp_4226;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fd_PR_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4228;
   std::complex<double> tmp_4229;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4230;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4230 += B1(p,MFu(gI2),MHpm(gI1))*Conj(CpbarFdHpmFuPR(gO2,gI1
            ,gI2))*CpbarFdHpmFuPR(gO1,gI1,gI2);
      }
      tmp_4229 += tmp_4230;
   }
   tmp_4228 += tmp_4229;
   result += (-0.5) * tmp_4228;
   std::complex<double> tmp_4231;
   std::complex<double> tmp_4232;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4233;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_4233 += B1(p,MFd(gI1),MAh(gI2))*Conj(CpbarFdFdAhPR(gO2,gI1,
            gI2))*CpbarFdFdAhPR(gO1,gI1,gI2);
      }
      tmp_4232 += tmp_4233;
   }
   tmp_4231 += tmp_4232;
   result += (-0.5) * tmp_4231;
   std::complex<double> tmp_4234;
   std::complex<double> tmp_4235;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_4236;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4236 += B1(p,MFd(gI2),Mhh(gI1))*Conj(CpbarFdhhFdPR(gO2,gI1,
            gI2))*CpbarFdhhFdPR(gO1,gI1,gI2);
      }
      tmp_4235 += tmp_4236;
   }
   tmp_4234 += tmp_4235;
   result += (-0.5) * tmp_4234;
   std::complex<double> tmp_4237;
   std::complex<double> tmp_4238;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4238 += B1(p,MGlu,MSd(gI1))*Conj(CpbarFdSdGluPR(gO2,gI1,1))*
         CpbarFdSdGluPR(gO1,gI1,1);
   }
   tmp_4237 += tmp_4238;
   result += (-0.6666666666666666) * tmp_4237;
   std::complex<double> tmp_4239;
   std::complex<double> tmp_4240;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4241;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4241 += B1(p,MCha(gI2),MSu(gI1))*Conj(CpbarFdSuChaPR(gO2,gI1
            ,gI2))*CpbarFdSuChaPR(gO1,gI1,gI2);
      }
      tmp_4240 += tmp_4241;
   }
   tmp_4239 += tmp_4240;
   result += (-0.5) * tmp_4239;
   std::complex<double> tmp_4242;
   std::complex<double> tmp_4243;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4244;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4244 += B1(p,MChi(gI2),MSd(gI1))*Conj(CpbarFdSdChiPR(gO2,gI1
            ,gI2))*CpbarFdSdChiPR(gO1,gI1,gI2);
      }
      tmp_4243 += tmp_4244;
   }
   tmp_4242 += tmp_4243;
   result += (-0.5) * tmp_4242;
   std::complex<double> tmp_4245;
   std::complex<double> tmp_4246;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4246 += B1(p,MFu(gI2),MVWm)*Conj(CpbarFdVWmFuPL(gO2,gI2))*
         CpbarFdVWmFuPL(gO1,gI2);
   }
   tmp_4245 += tmp_4246;
   result += (-1) * tmp_4245;
   std::complex<double> tmp_4247;
   std::complex<double> tmp_4248;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4248 += B1(p,MFd(gI2),MVZ)*Conj(CpbarFdVZFdPL(gO2,gI2))*
         CpbarFdVZFdPL(gO1,gI2);
   }
   tmp_4247 += tmp_4248;
   result += (-1) * tmp_4247;
   std::complex<double> tmp_4249;
   std::complex<double> tmp_4250;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4250 += B1(p,MFd(gI2),MVZp)*Conj(CpbarFdVZpFdPL(gO2,gI2))*
         CpbarFdVZpFdPL(gO1,gI2);
   }
   tmp_4249 += tmp_4250;
   result += (-1) * tmp_4249;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fd_PL_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4251;
   std::complex<double> tmp_4252;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4253;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4253 += B1(p,MFu(gI2),MHpm(gI1))*Conj(CpbarFdHpmFuPL(gO2,gI1
            ,gI2))*CpbarFdHpmFuPL(gO1,gI1,gI2);
      }
      tmp_4252 += tmp_4253;
   }
   tmp_4251 += tmp_4252;
   result += (-0.5) * tmp_4251;
   std::complex<double> tmp_4254;
   std::complex<double> tmp_4255;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4256;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_4256 += B1(p,MFd(gI1),MAh(gI2))*Conj(CpbarFdFdAhPL(gO2,gI1,
            gI2))*CpbarFdFdAhPL(gO1,gI1,gI2);
      }
      tmp_4255 += tmp_4256;
   }
   tmp_4254 += tmp_4255;
   result += (-0.5) * tmp_4254;
   std::complex<double> tmp_4257;
   std::complex<double> tmp_4258;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_4259;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4259 += B1(p,MFd(gI2),Mhh(gI1))*Conj(CpbarFdhhFdPL(gO2,gI1,
            gI2))*CpbarFdhhFdPL(gO1,gI1,gI2);
      }
      tmp_4258 += tmp_4259;
   }
   tmp_4257 += tmp_4258;
   result += (-0.5) * tmp_4257;
   std::complex<double> tmp_4260;
   std::complex<double> tmp_4261;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4261 += B1(p,MGlu,MSd(gI1))*Conj(CpbarFdSdGluPL(gO2,gI1,1))*
         CpbarFdSdGluPL(gO1,gI1,1);
   }
   tmp_4260 += tmp_4261;
   result += (-0.6666666666666666) * tmp_4260;
   std::complex<double> tmp_4262;
   std::complex<double> tmp_4263;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4264;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_4264 += B1(p,MCha(gI2),MSu(gI1))*Conj(CpbarFdSuChaPL(gO2,gI1
            ,gI2))*CpbarFdSuChaPL(gO1,gI1,gI2);
      }
      tmp_4263 += tmp_4264;
   }
   tmp_4262 += tmp_4263;
   result += (-0.5) * tmp_4262;
   std::complex<double> tmp_4265;
   std::complex<double> tmp_4266;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4267;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4267 += B1(p,MChi(gI2),MSd(gI1))*Conj(CpbarFdSdChiPL(gO2,gI1
            ,gI2))*CpbarFdSdChiPL(gO1,gI1,gI2);
      }
      tmp_4266 += tmp_4267;
   }
   tmp_4265 += tmp_4266;
   result += (-0.5) * tmp_4265;
   std::complex<double> tmp_4268;
   std::complex<double> tmp_4269;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4269 += B1(p,MFu(gI2),MVWm)*Conj(CpbarFdVWmFuPR(gO2,gI2))*
         CpbarFdVWmFuPR(gO1,gI2);
   }
   tmp_4268 += tmp_4269;
   result += (-1) * tmp_4268;
   std::complex<double> tmp_4270;
   std::complex<double> tmp_4271;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4271 += B1(p,MFd(gI2),MVZ)*Conj(CpbarFdVZFdPR(gO2,gI2))*
         CpbarFdVZFdPR(gO1,gI2);
   }
   tmp_4270 += tmp_4271;
   result += (-1) * tmp_4270;
   std::complex<double> tmp_4272;
   std::complex<double> tmp_4273;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4273 += B1(p,MFd(gI2),MVZp)*Conj(CpbarFdVZpFdPR(gO2,gI2))*
         CpbarFdVZpFdPR(gO1,gI2);
   }
   tmp_4272 += tmp_4273;
   result += (-1) * tmp_4272;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_1_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4274;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4275;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4275 += B0(p,MFd(gI2),MHpm(gI1))*Conj(CpbarFuconjHpmFdPL(gO2
            ,gI1,gI2))*CpbarFuconjHpmFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_4274 += tmp_4275;
   }
   result += tmp_4274;
   std::complex<double> tmp_4276;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4277;
      std::complex<double> tmp_4278;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_4278 += B0(p,MCha(gI1),MSd(gI2))*Conj(CpbarFubarChaSdPL(gO2,
            gI1,gI2))*CpbarFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_4277 += tmp_4278;
      tmp_4276 += (MCha(gI1)) * tmp_4277;
   }
   result += tmp_4276;
   std::complex<double> tmp_4279;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4280;
      std::complex<double> tmp_4281;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_4281 += B0(p,MFu(gI1),MAh(gI2))*Conj(CpbarFuFuAhPL(gO2,gI1,
            gI2))*CpbarFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_4280 += tmp_4281;
      tmp_4279 += (MFu(gI1)) * tmp_4280;
   }
   result += tmp_4279;
   std::complex<double> tmp_4282;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_4283;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4283 += B0(p,MFu(gI2),Mhh(gI1))*Conj(CpbarFuhhFuPL(gO2,gI1,
            gI2))*CpbarFuhhFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_4282 += tmp_4283;
   }
   result += tmp_4282;
   std::complex<double> tmp_4284;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4285;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4285 += B0(p,MChi(gI2),MSu(gI1))*Conj(CpbarFuSuChiPL(gO2,gI1
            ,gI2))*CpbarFuSuChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_4284 += tmp_4285;
   }
   result += tmp_4284;
   std::complex<double> tmp_4286;
   std::complex<double> tmp_4287;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4287 += B0(p,MFd(gI2),MVWm)*Conj(CpbarFuconjVWmFdPR(gO2,gI2))*
         CpbarFuconjVWmFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_4286 += tmp_4287;
   result += (-4) * tmp_4286;
   std::complex<double> tmp_4288;
   std::complex<double> tmp_4289;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4289 += B0(p,MFu(gI2),0)*Conj(CpbarFuVPFuPR(gO2,gI2))*
         CpbarFuVPFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_4288 += tmp_4289;
   result += (-4) * tmp_4288;
   std::complex<double> tmp_4290;
   std::complex<double> tmp_4291;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4291 += B0(p,MFu(gI2),MVZ)*Conj(CpbarFuVZFuPR(gO2,gI2))*
         CpbarFuVZFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_4290 += tmp_4291;
   result += (-4) * tmp_4290;
   std::complex<double> tmp_4292;
   std::complex<double> tmp_4293;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4293 += B0(p,MFu(gI2),MVZp)*Conj(CpbarFuVZpFuPR(gO2,gI2))*
         CpbarFuVZpFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_4292 += tmp_4293;
   result += (-4) * tmp_4292;
   std::complex<double> tmp_4294;
   std::complex<double> tmp_4295;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4295 += B0(p,MGlu,MSu(gI1))*Conj(CpbarFuSuGluPL(gO2,gI1,1))*
         CpbarFuSuGluPR(gO1,gI1,1);
   }
   tmp_4294 += tmp_4295;
   result += (1.3333333333333333*MGlu) * tmp_4294;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_PR_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4296;
   std::complex<double> tmp_4297;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4298;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4298 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarFuconjHpmFdPR(gO2
            ,gI1,gI2))*CpbarFuconjHpmFdPR(gO1,gI1,gI2);
      }
      tmp_4297 += tmp_4298;
   }
   tmp_4296 += tmp_4297;
   result += (-0.5) * tmp_4296;
   std::complex<double> tmp_4299;
   std::complex<double> tmp_4300;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4301;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_4301 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarFubarChaSdPR(gO2,
            gI1,gI2))*CpbarFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_4300 += tmp_4301;
   }
   tmp_4299 += tmp_4300;
   result += (-0.5) * tmp_4299;
   std::complex<double> tmp_4302;
   std::complex<double> tmp_4303;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4304;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_4304 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarFuFuAhPR(gO2,gI1,
            gI2))*CpbarFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_4303 += tmp_4304;
   }
   tmp_4302 += tmp_4303;
   result += (-0.5) * tmp_4302;
   std::complex<double> tmp_4305;
   std::complex<double> tmp_4306;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_4307;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4307 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarFuhhFuPR(gO2,gI1,
            gI2))*CpbarFuhhFuPR(gO1,gI1,gI2);
      }
      tmp_4306 += tmp_4307;
   }
   tmp_4305 += tmp_4306;
   result += (-0.5) * tmp_4305;
   std::complex<double> tmp_4308;
   std::complex<double> tmp_4309;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4309 += B1(p,MGlu,MSu(gI1))*Conj(CpbarFuSuGluPR(gO2,gI1,1))*
         CpbarFuSuGluPR(gO1,gI1,1);
   }
   tmp_4308 += tmp_4309;
   result += (-0.6666666666666666) * tmp_4308;
   std::complex<double> tmp_4310;
   std::complex<double> tmp_4311;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4312;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4312 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarFuSuChiPR(gO2,gI1
            ,gI2))*CpbarFuSuChiPR(gO1,gI1,gI2);
      }
      tmp_4311 += tmp_4312;
   }
   tmp_4310 += tmp_4311;
   result += (-0.5) * tmp_4310;
   std::complex<double> tmp_4313;
   std::complex<double> tmp_4314;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4314 += B1(p,MFd(gI2),MVWm)*Conj(CpbarFuconjVWmFdPL(gO2,gI2))*
         CpbarFuconjVWmFdPL(gO1,gI2);
   }
   tmp_4313 += tmp_4314;
   result += (-1) * tmp_4313;
   std::complex<double> tmp_4315;
   std::complex<double> tmp_4316;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4316 += B1(p,MFu(gI2),0)*Conj(CpbarFuVPFuPL(gO2,gI2))*
         CpbarFuVPFuPL(gO1,gI2);
   }
   tmp_4315 += tmp_4316;
   result += (-1) * tmp_4315;
   std::complex<double> tmp_4317;
   std::complex<double> tmp_4318;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4318 += B1(p,MFu(gI2),MVZ)*Conj(CpbarFuVZFuPL(gO2,gI2))*
         CpbarFuVZFuPL(gO1,gI2);
   }
   tmp_4317 += tmp_4318;
   result += (-1) * tmp_4317;
   std::complex<double> tmp_4319;
   std::complex<double> tmp_4320;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4320 += B1(p,MFu(gI2),MVZp)*Conj(CpbarFuVZpFuPL(gO2,gI2))*
         CpbarFuVZpFuPL(gO1,gI2);
   }
   tmp_4319 += tmp_4320;
   result += (-1) * tmp_4319;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::self_energy_Fu_PL_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4321;
   std::complex<double> tmp_4322;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4323;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4323 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarFuconjHpmFdPL(gO2
            ,gI1,gI2))*CpbarFuconjHpmFdPL(gO1,gI1,gI2);
      }
      tmp_4322 += tmp_4323;
   }
   tmp_4321 += tmp_4322;
   result += (-0.5) * tmp_4321;
   std::complex<double> tmp_4324;
   std::complex<double> tmp_4325;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_4326;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_4326 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarFubarChaSdPL(gO2,
            gI1,gI2))*CpbarFubarChaSdPL(gO1,gI1,gI2);
      }
      tmp_4325 += tmp_4326;
   }
   tmp_4324 += tmp_4325;
   result += (-0.5) * tmp_4324;
   std::complex<double> tmp_4327;
   std::complex<double> tmp_4328;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_4329;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_4329 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarFuFuAhPL(gO2,gI1,
            gI2))*CpbarFuFuAhPL(gO1,gI1,gI2);
      }
      tmp_4328 += tmp_4329;
   }
   tmp_4327 += tmp_4328;
   result += (-0.5) * tmp_4327;
   std::complex<double> tmp_4330;
   std::complex<double> tmp_4331;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_4332;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_4332 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarFuhhFuPL(gO2,gI1,
            gI2))*CpbarFuhhFuPL(gO1,gI1,gI2);
      }
      tmp_4331 += tmp_4332;
   }
   tmp_4330 += tmp_4331;
   result += (-0.5) * tmp_4330;
   std::complex<double> tmp_4333;
   std::complex<double> tmp_4334;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4334 += B1(p,MGlu,MSu(gI1))*Conj(CpbarFuSuGluPL(gO2,gI1,1))*
         CpbarFuSuGluPL(gO1,gI1,1);
   }
   tmp_4333 += tmp_4334;
   result += (-0.6666666666666666) * tmp_4333;
   std::complex<double> tmp_4335;
   std::complex<double> tmp_4336;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_4337;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_4337 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarFuSuChiPL(gO2,gI1
            ,gI2))*CpbarFuSuChiPL(gO1,gI1,gI2);
      }
      tmp_4336 += tmp_4337;
   }
   tmp_4335 += tmp_4336;
   result += (-0.5) * tmp_4335;
   std::complex<double> tmp_4338;
   std::complex<double> tmp_4339;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4339 += B1(p,MFd(gI2),MVWm)*Conj(CpbarFuconjVWmFdPR(gO2,gI2))*
         CpbarFuconjVWmFdPR(gO1,gI2);
   }
   tmp_4338 += tmp_4339;
   result += (-1) * tmp_4338;
   std::complex<double> tmp_4340;
   std::complex<double> tmp_4341;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4341 += B1(p,MFu(gI2),0)*Conj(CpbarFuVPFuPR(gO2,gI2))*
         CpbarFuVPFuPR(gO1,gI2);
   }
   tmp_4340 += tmp_4341;
   result += (-1) * tmp_4340;
   std::complex<double> tmp_4342;
   std::complex<double> tmp_4343;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4343 += B1(p,MFu(gI2),MVZ)*Conj(CpbarFuVZFuPR(gO2,gI2))*
         CpbarFuVZFuPR(gO1,gI2);
   }
   tmp_4342 += tmp_4343;
   result += (-1) * tmp_4342;
   std::complex<double> tmp_4344;
   std::complex<double> tmp_4345;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_4345 += B1(p,MFu(gI2),MVZp)*Conj(CpbarFuVZpFuPR(gO2,gI2))*
         CpbarFuVZpFuPR(gO1,gI2);
   }
   tmp_4344 += tmp_4345;
   result += (-1) * tmp_4344;

   return result * oneOver16PiSqr;

}

std::complex<double> CLASSNAME::tadpole_hh(unsigned gO1) const
{
   std::complex<double> result;

   result += A0(MVWm)*CpUhhbargWmCgWmC(gO1);
   result += A0(MVWm)*CpUhhbargWmgWm(gO1);
   result += A0(MVZ)*CpUhhbargZgZ(gO1);
   result += A0(MVZp)*CpUhhbargZpgZp(gO1);
   result += 4*A0(MVWm)*CpUhhconjVWmVWm(gO1);
   result += 2*A0(MVZp)*CpUhhVZpVZp(gO1);
   result += 2*A0(MVZ)*CpUhhVZVZ(gO1);
   std::complex<double> tmp_4346;
   std::complex<double> tmp_4347;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_4347 += A0(MHpm(gI1))*CpUhhconjHpmHpm(gO1,gI1,gI1);
   }
   tmp_4346 += tmp_4347;
   result += (-1) * tmp_4346;
   std::complex<double> tmp_4348;
   std::complex<double> tmp_4349;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_4349 += A0(MSHp0(gI1))*CpUhhconjSHp0SHp0(gO1,gI1,gI1);
   }
   tmp_4348 += tmp_4349;
   result += (-1) * tmp_4348;
   std::complex<double> tmp_4350;
   std::complex<double> tmp_4351;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_4351 += A0(MSHpp(gI1))*CpUhhconjSHppSHpp(gO1,gI1,gI1);
   }
   tmp_4350 += tmp_4351;
   result += (-1) * tmp_4350;
   std::complex<double> tmp_4352;
   std::complex<double> tmp_4353;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_4353 += A0(MCha(gI1))*(CpUhhbarChaChaPL(gO1,gI1,gI1) +
         CpUhhbarChaChaPR(gO1,gI1,gI1))*MCha(gI1);
   }
   tmp_4352 += tmp_4353;
   result += (2) * tmp_4352;
   std::complex<double> tmp_4354;
   std::complex<double> tmp_4355;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_4355 += A0(MSv(gI1))*CpUhhconjSvSv(gO1,gI1,gI1);
   }
   tmp_4354 += tmp_4355;
   result += (-1) * tmp_4354;
   std::complex<double> tmp_4356;
   std::complex<double> tmp_4357;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_4357 += A0(MFd(gI1))*(CpUhhbarFdFdPL(gO1,gI1,gI1) + CpUhhbarFdFdPR
         (gO1,gI1,gI1))*MFd(gI1);
   }
   tmp_4356 += tmp_4357;
   result += (6) * tmp_4356;
   std::complex<double> tmp_4358;
   std::complex<double> tmp_4359;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_4359 += A0(MFDX(gI1))*(CpUhhbarFDXFDXPL(gO1,gI1,gI1) +
         CpUhhbarFDXFDXPR(gO1,gI1,gI1))*MFDX(gI1);
   }
   tmp_4358 += tmp_4359;
   result += (6) * tmp_4358;
   std::complex<double> tmp_4360;
   std::complex<double> tmp_4361;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_4361 += A0(MFe(gI1))*(CpUhhbarFeFePL(gO1,gI1,gI1) + CpUhhbarFeFePR
         (gO1,gI1,gI1))*MFe(gI1);
   }
   tmp_4360 += tmp_4361;
   result += (2) * tmp_4360;
   std::complex<double> tmp_4362;
   std::complex<double> tmp_4363;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_4363 += A0(MFu(gI1))*(CpUhhbarFuFuPL(gO1,gI1,gI1) + CpUhhbarFuFuPR
         (gO1,gI1,gI1))*MFu(gI1);
   }
   tmp_4362 += tmp_4363;
   result += (6) * tmp_4362;
   std::complex<double> tmp_4364;
   std::complex<double> tmp_4365;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_4365 += A0(MAh(gI1))*CpUhhAhAh(gO1,gI1,gI1);
   }
   tmp_4364 += tmp_4365;
   result += (-0.5) * tmp_4364;
   std::complex<double> tmp_4366;
   std::complex<double> tmp_4367;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_4367 += A0(Mhh(gI1))*CpUhhhhhh(gO1,gI1,gI1);
   }
   tmp_4366 += tmp_4367;
   result += (-0.5) * tmp_4366;
   std::complex<double> tmp_4368;
   std::complex<double> tmp_4369;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4369 += A0(MSd(gI1))*CpUhhconjSdSd(gO1,gI1,gI1);
   }
   tmp_4368 += tmp_4369;
   result += (-3) * tmp_4368;
   std::complex<double> tmp_4370;
   std::complex<double> tmp_4371;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4371 += A0(MSDX(gI1))*CpUhhconjSDXSDX(gO1,gI1,gI1);
   }
   tmp_4370 += tmp_4371;
   result += (-3) * tmp_4370;
   std::complex<double> tmp_4372;
   std::complex<double> tmp_4373;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4373 += A0(MSe(gI1))*CpUhhconjSeSe(gO1,gI1,gI1);
   }
   tmp_4372 += tmp_4373;
   result += (-1) * tmp_4372;
   std::complex<double> tmp_4374;
   std::complex<double> tmp_4375;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_4375 += A0(MSu(gI1))*CpUhhconjSuSu(gO1,gI1,gI1);
   }
   tmp_4374 += tmp_4375;
   result += (-3) * tmp_4374;
   std::complex<double> tmp_4376;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      tmp_4376 += A0(MChi(gI1))*(CpUhhChiChiPL(gO1,gI1,gI1) + CpUhhChiChiPR(
         gO1,gI1,gI1))*MChi(gI1);
   }
   result += tmp_4376;

   return result * oneOver16PiSqr;

}








void CLASSNAME::calculate_MGlu_pole()
{
   // diagonalization with medium precision
   const double p = MGlu;
   const double self_energy_1  = Re(self_energy_Glu_1(p));
   const double self_energy_PL = Re(self_energy_Glu_PL(p));
   const double self_energy_PR = Re(self_energy_Glu_PR(p));
   PHYSICAL(MGlu) = MGlu - self_energy_1 - MGlu * (self_energy_PL +
      self_energy_PR);
}

void CLASSNAME::calculate_MFv_pole()
{
   // diagonalization with medium precision
   PHYSICAL(MFv).setConstant(0.);
}

void CLASSNAME::calculate_MChaP_pole()
{
   // diagonalization with medium precision
   const double p = MChaP;
   const double self_energy_1  = Re(self_energy_ChaP_1(p));
   const double self_energy_PL = Re(self_energy_ChaP_PL(p));
   const double self_energy_PR = Re(self_energy_ChaP_PR(p));
   PHYSICAL(MChaP) = MChaP - self_energy_1 - MChaP * (self_energy_PL +
      self_energy_PR);
}

void CLASSNAME::calculate_MVZ_pole()
{
   if (problems.is_tachyon(VZ))
      return;
   // diagonalization with medium precision
   const double p = MVZ;
   const double self_energy = Re(self_energy_VZ(p));
   const double mass_sqr = Sqr(MVZ) - self_energy;

   if (mass_sqr < 0.)
      problems.flag_tachyon(VZ);

   PHYSICAL(MVZ) = AbsSqrt(mass_sqr);
}

void CLASSNAME::calculate_MVZp_pole()
{
   if (problems.is_tachyon(VZp))
      return;
   // diagonalization with medium precision
   const double p = MVZp;
   const double self_energy = Re(self_energy_VZp(p));
   const double mass_sqr = Sqr(MVZp) - self_energy;

   if (mass_sqr < 0.)
      problems.flag_tachyon(VZp);

   PHYSICAL(MVZp) = AbsSqrt(mass_sqr);
}

void CLASSNAME::calculate_MSd_pole()
{
   if (problems.is_tachyon(Sd))
      return;
   // diagonalization with medium precision
   Eigen::Matrix<double,6,6> self_energy;
   const Eigen::Matrix<double,6,6> M_tree(get_mass_matrix_Sd());

   for (unsigned es = 0; es < 6; ++es) {
      const double p = Abs(MSd(es));
      for (unsigned i1 = 0; i1 < 6; ++i1) {
         for (unsigned i2 = i1; i2 < 6; ++i2) {
            self_energy(i1,i2) = Re(self_energy_Sd(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,6,6> M_1loop(M_tree - self_energy);
      Eigen::Array<double,6,1> eigen_values;
      Eigen::Matrix<double,6,6> mix_ZD;
      fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZD);

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(Sd);

      PHYSICAL(MSd(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(ZD) = mix_ZD;
   }
}

void CLASSNAME::calculate_MSv_pole()
{
   if (problems.is_tachyon(Sv))
      return;
   // diagonalization with medium precision
   Eigen::Matrix<double,3,3> self_energy;
   const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_Sv());

   for (unsigned es = 0; es < 3; ++es) {
      const double p = Abs(MSv(es));
      for (unsigned i1 = 0; i1 < 3; ++i1) {
         for (unsigned i2 = i1; i2 < 3; ++i2) {
            self_energy(i1,i2) = Re(self_energy_Sv(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,3,3> M_1loop(M_tree - self_energy);
      Eigen::Array<double,3,1> eigen_values;
      Eigen::Matrix<double,3,3> mix_ZV;
      fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZV);

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(Sv);

      PHYSICAL(MSv(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(ZV) = mix_ZV;
   }
}

void CLASSNAME::calculate_MSu_pole()
{
   if (problems.is_tachyon(Su))
      return;
   // diagonalization with medium precision
   Eigen::Matrix<double,6,6> self_energy;
   const Eigen::Matrix<double,6,6> M_tree(get_mass_matrix_Su());

   for (unsigned es = 0; es < 6; ++es) {
      const double p = Abs(MSu(es));
      for (unsigned i1 = 0; i1 < 6; ++i1) {
         for (unsigned i2 = i1; i2 < 6; ++i2) {
            self_energy(i1,i2) = Re(self_energy_Su(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,6,6> M_1loop(M_tree - self_energy);
      Eigen::Array<double,6,1> eigen_values;
      Eigen::Matrix<double,6,6> mix_ZU;
      fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZU);

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(Su);

      PHYSICAL(MSu(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(ZU) = mix_ZU;
   }
}

void CLASSNAME::calculate_MSe_pole()
{
   if (problems.is_tachyon(Se))
      return;
   // diagonalization with medium precision
   Eigen::Matrix<double,6,6> self_energy;
   const Eigen::Matrix<double,6,6> M_tree(get_mass_matrix_Se());

   for (unsigned es = 0; es < 6; ++es) {
      const double p = Abs(MSe(es));
      for (unsigned i1 = 0; i1 < 6; ++i1) {
         for (unsigned i2 = i1; i2 < 6; ++i2) {
            self_energy(i1,i2) = Re(self_energy_Se(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,6,6> M_1loop(M_tree - self_energy);
      Eigen::Array<double,6,1> eigen_values;
      Eigen::Matrix<double,6,6> mix_ZE;
      fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZE);

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(Se);

      PHYSICAL(MSe(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(ZE) = mix_ZE;
   }
}

void CLASSNAME::calculate_MSDX_pole()
{
   if (problems.is_tachyon(SDX))
      return;
   // diagonalization with medium precision
   Eigen::Matrix<double,6,6> self_energy;
   const Eigen::Matrix<double,6,6> M_tree(get_mass_matrix_SDX());

   for (unsigned es = 0; es < 6; ++es) {
      const double p = Abs(MSDX(es));
      for (unsigned i1 = 0; i1 < 6; ++i1) {
         for (unsigned i2 = i1; i2 < 6; ++i2) {
            self_energy(i1,i2) = Re(self_energy_SDX(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,6,6> M_1loop(M_tree - self_energy);
      Eigen::Array<double,6,1> eigen_values;
      Eigen::Matrix<double,6,6> mix_ZDX;
      fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZDX);

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(SDX);

      PHYSICAL(MSDX(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(ZDX) = mix_ZDX;
   }
}


void CLASSNAME::calculate_MSFu_3rd_generation(double& msf1, double& msf2, double& theta) const {
   sfermions::Mass_data sf_data;
   sf_data.ml2 = mq2(2,2);
   sf_data.mr2 = mu2(2,2);
   sf_data.yf  = Yu(2,2);
   sf_data.vd  = vd;
   sf_data.vu  = vu;
   sf_data.gY  = 0.7745966692414834*g1;
   sf_data.g2  = g2;
   sf_data.Tyf = TYu(2,2);
   sf_data.mu  = 0.7071067811865475*vs*Lambdax;
   sf_data.T3  = sfermions::Isospin[sfermions::up];
   sf_data.Yl  = sfermions::Hypercharge_left[sfermions::up];
   sf_data.Yr  = sfermions::Hypercharge_right[sfermions::up];

   Eigen::Array<double,2,1> msf;

   theta = sfermions::diagonalize_sfermions_2x2(sf_data, msf);
   msf1  = msf(0);
   msf2  = msf(1);
}

void CLASSNAME::calculate_MSFd_3rd_generation(double& msf1, double& msf2, double& theta) const {
   sfermions::Mass_data sf_data;
   sf_data.ml2 = mq2(2,2);
   sf_data.mr2 = md2(2,2);
   sf_data.yf  = Yd(2,2);
   sf_data.vd  = vd;
   sf_data.vu  = vu;
   sf_data.gY  = 0.7745966692414834*g1;
   sf_data.g2  = g2;
   sf_data.Tyf = TYd(2,2);
   sf_data.mu  = 0.7071067811865475*vs*Lambdax;
   sf_data.T3  = sfermions::Isospin[sfermions::down];
   sf_data.Yl  = sfermions::Hypercharge_left[sfermions::down];
   sf_data.Yr  = sfermions::Hypercharge_right[sfermions::down];

   Eigen::Array<double,2,1> msf;

   theta = sfermions::diagonalize_sfermions_2x2(sf_data, msf);
   msf1  = msf(0);
   msf2  = msf(1);
}

void CLASSNAME::calculate_MSFv_3rd_generation(double& msf1, double& msf2, double& theta) const {
   sfermions::Mass_data sf_data;
   sf_data.ml2 = ml2(2,2);
   sf_data.mr2 = 0.;
   sf_data.yf  = 0.;
   sf_data.vd  = vd;
   sf_data.vu  = vu;
   sf_data.gY  = 0.7745966692414834*g1;
   sf_data.g2  = g2;
   sf_data.Tyf = 0.;
   sf_data.mu  = 0.7071067811865475*vs*Lambdax;
   sf_data.T3  = sfermions::Isospin[sfermions::neutrino];
   sf_data.Yl  = sfermions::Hypercharge_left[sfermions::neutrino];
   sf_data.Yr  = sfermions::Hypercharge_right[sfermions::neutrino];

   Eigen::Array<double,2,1> msf;

   theta = sfermions::diagonalize_sfermions_2x2(sf_data, msf);
   msf1  = msf(0);
   msf2  = msf(1);
}

void CLASSNAME::calculate_MSFe_3rd_generation(double& msf1, double& msf2, double& theta) const {
   sfermions::Mass_data sf_data;
   sf_data.ml2 = ml2(2,2);
   sf_data.mr2 = me2(2,2);
   sf_data.yf  = Ye(2,2);
   sf_data.vd  = vd;
   sf_data.vu  = vu;
   sf_data.gY  = 0.7745966692414834*g1;
   sf_data.g2  = g2;
   sf_data.Tyf = TYe(2,2);
   sf_data.mu  = 0.7071067811865475*vs*Lambdax;
   sf_data.T3  = sfermions::Isospin[sfermions::electron];
   sf_data.Yl  = sfermions::Hypercharge_left[sfermions::electron];
   sf_data.Yr  = sfermions::Hypercharge_right[sfermions::electron];

   Eigen::Array<double,2,1> msf;

   theta = sfermions::diagonalize_sfermions_2x2(sf_data, msf);
   msf1  = msf(0);
   msf2  = msf(1);
}


void CLASSNAME::self_energy_hh_2loop(double result[6]) const
{
   // calculate 3rd generation sfermion masses and mixing angles
   double mst_1, mst_2, theta_t;
   double msb_1, msb_2, theta_b;
   double mstau_1, mstau_2, theta_tau;
   double msnu_1, msnu_2, theta_nu;

   calculate_MSFu_3rd_generation(mst_1, mst_2, theta_t);
   calculate_MSFd_3rd_generation(msb_1, msb_2, theta_b);
   calculate_MSFe_3rd_generation(mstau_1, mstau_2, theta_tau);
   calculate_MSFv_3rd_generation(msnu_1, msnu_2, theta_nu);

   double mst1sq = Sqr(mst_1), mst2sq = Sqr(mst_2);
   double msb1sq = Sqr(msb_1), msb2sq = Sqr(msb_2);
   double mstau1sq = Sqr(mstau_1), mstau2sq = Sqr(mstau_2);
   double msnusq = Sqr(msnu_2);
   double sxt = Sin(theta_t), cxt = Cos(theta_t);
   double sxb = Sin(theta_b), cxb = Cos(theta_b);
   double sintau = Sin(theta_tau), costau = Cos(theta_tau);

   double gs = g3;
   double as = Sqr(gs) / (4.0 * Pi);
   double rmt = MFu(2);
   double rmtsq = Sqr(rmt);
   double scalesq = Sqr(get_scale());
   double vev2 = Sqr(vd) + Sqr(vu);
   double vev = Sqrt(Sqr(vd) + Sqr(vu));
   double tanb = vu/vd;
   const double tanb2 = Sqr(tanb);
   const double sinb = tanb / Sqrt(1. + tanb2);
   const double cosb = 1. / Sqrt(1. + tanb2);
   double amu = -0.7071067811865475*vs*Lambdax;
   double mg = MGlu;
   double mAsq = Sqr(MAh(1));
   double cotb = 1.0 / tanb;
   double rmb = MFd(2);
   double rmbsq = Sqr(rmb);
   double rmtausq = Sqr(MFe(2));
   double fmasq = Abs(mAsq);
   double lamS = Lambdax;
   static const double root2 = Sqrt(2.0);
   double vevs =  vev / root2;
   double svevs = vs / root2;
   int loop = 2;
   int scheme = 0; // selects DR-bar scheme

   double s11w = 0., s12w = 0., s22w = 0.;
   double s11tau = 0., s12tau = 0., s22tau = 0.;
   double p2w = 0., p2tau = 0.;

   double DMS[3][3] = {{ 0. }}, DMP[3][3] = {{ 0. }};
   double DMSB[3][3] = {{ 0. }}, DMPB[3][3] = {{ 0. }};

   LOCK_MUTEX();

   // get alpha_s alpha_t pieces
   effpot_(&loop, &rmt, &mg, &mst1sq, &mst2sq, &sxt, &cxt,
           &scalesq, &tanb, &vevs, &lamS, &svevs, &as, &DMS, &DMP);

   // get alpha_s alpha_b pieces
   effpot_(&loop, &rmb, &mg, &msb1sq, &msb2sq, &sxb, &cxb,
           &scalesq, &cotb, &vevs, &lamS, &svevs, &as, &DMSB, &DMPB);

   // Corrections as in MSSM, not corrected for NMSSM,
   // should be OK for MSSM states when S state is close to decoupled
   ddshiggs_(&rmtsq, &rmbsq, &fmasq, &mst1sq, &mst2sq, &msb1sq,
             &msb2sq, &sxt, &cxt, &sxb, &cxb, &scalesq, &amu, &tanb,
             &vev2, &s11w, &s12w, &s22w);
   ddsodd_(&rmtsq, &rmbsq, &fmasq, &mst1sq, &mst2sq, &msb1sq, &msb2sq,
           &sxt, &cxt, &sxb, &cxb, &scalesq, &amu, &tanb, &vev2, &p2w);
   tausqhiggs_(&rmtausq, &fmasq, &msnusq, &mstau1sq, &mstau2sq, &sintau,
               &costau, &scalesq, &amu, &tanb, &vev2, &scheme, &s11tau,
               &s22tau, &s12tau);
   tausqodd_(&rmtausq, &fmasq, &msnusq, &mstau1sq, &mstau2sq, &sintau,
             &costau, &scalesq, &amu, &tanb, &vev2, &p2tau);

   UNLOCK_MUTEX();

   // Make appropriate substitutions for elements following 0907.4682
   // bottom of page 9
   std::swap(DMSB[0][0], DMSB[1][1]);
   std::swap(DMSB[0][2], DMSB[1][2]);

   for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
         DMS[i][j] += DMSB[i][j];
      }
   }

   const double dMA = p2w + p2tau;

   // subtract two-loop tadpoles
   double tadpole[3];
   tadpole_hh_2loop(tadpole);

   DMS[0][0] += s11w + s11tau + dMA * Sqr(sinb) - tadpole[0] / vd;
   DMS[0][1] += s12w + s12tau - dMA * sinb * cosb;
   DMS[1][1] += s22w + s22tau + dMA * Sqr(cosb) - tadpole[1] / vu;
   DMS[2][2] += - tadpole[2] / vs;

   result[0] = - DMS[0][0]; // 1,1 element
   result[1] = - DMS[0][1]; // 1,2 element
   result[2] = - DMS[0][2]; // 1,3 element
   result[3] = - DMS[1][1]; // 2,2 element
   result[4] = - DMS[1][2]; // 2,3 element
   result[5] = - DMS[2][2]; // 3,3 element

}

void CLASSNAME::self_energy_Ah_2loop(double result[6]) const
{
   // calculate 3rd generation sfermion masses and mixing angles
   double mst_1, mst_2, theta_t;
   double msb_1, msb_2, theta_b;
   double mstau_1, mstau_2, theta_tau;
   double msnu_1, msnu_2, theta_nu;

   calculate_MSFu_3rd_generation(mst_1, mst_2, theta_t);
   calculate_MSFd_3rd_generation(msb_1, msb_2, theta_b);
   calculate_MSFe_3rd_generation(mstau_1, mstau_2, theta_tau);
   calculate_MSFv_3rd_generation(msnu_1, msnu_2, theta_nu);

   double mst1sq = Sqr(mst_1), mst2sq = Sqr(mst_2);
   double msb1sq = Sqr(msb_1), msb2sq = Sqr(msb_2);
   double mstau1sq = Sqr(mstau_1), mstau2sq = Sqr(mstau_2);
   double msnusq = Sqr(msnu_2);
   double sxt = Sin(theta_t), cxt = Cos(theta_t);
   double sxb = Sin(theta_b), cxb = Cos(theta_b);
   double sintau = Sin(theta_tau), costau = Cos(theta_tau);

   double gs = g3;
   double as = Sqr(gs) / (4.0 * Pi);
   double rmt = MFu(2);
   double rmtsq = Sqr(rmt);
   double scalesq = Sqr(get_scale());
   double vev2 = Sqr(vd) + Sqr(vu);
   double vev = Sqrt(Sqr(vd) + Sqr(vu));
   double tanb = vu/vd;
   const double tanb2 = Sqr(tanb);
   const double sinb = tanb / Sqrt(1. + tanb2);
   const double cosb = 1. / Sqrt(1. + tanb2);
   const double sinb2 = Sqr(sinb);
   const double cosb2 = Sqr(cosb);
   double amu = -0.7071067811865475*vs*Lambdax;
   double mg = MGlu;
   double mAsq = Sqr(MAh(1));
   double cotb = 1.0 / tanb;
   double rmb = MFd(2);
   double rmbsq = Sqr(rmb);
   double rmtausq = Sqr(MFe(2));
   double fmasq = Abs(mAsq);
   double lamS = Lambdax;
   static const double root2 = Sqrt(2.0);
   double vevs =  vev / root2;
   double svevs = vs / root2;
   int loop = 2;

   double p2w = 0., p2tau = 0.;

   double DMS[3][3] = {{ 0. }}, DMP[3][3] = {{ 0. }};
   double DMSB[3][3] = {{ 0. }}, DMPB[3][3] = {{ 0. }};

   LOCK_MUTEX();

   // get alpha_s alpha_t pieces
   effpot_(&loop, &rmt, &mg, &mst1sq, &mst2sq, &sxt, &cxt,
           &scalesq, &tanb, &vevs, &lamS, &svevs, &as, &DMS, &DMP);

   // get alpha_s alpha_b pieces
   effpot_(&loop, &rmb, &mg, &msb1sq, &msb2sq, &sxb, &cxb,
           &scalesq, &cotb, &vevs, &lamS, &svevs, &as, &DMSB, &DMPB);

   // Corrections as in MSSM, not corrected for NMSSM,
   // should be OK for MSSM states when S state is close to decoupled
   ddsodd_(&rmtsq, &rmbsq, &fmasq, &mst1sq, &mst2sq, &msb1sq, &msb2sq,
           &sxt, &cxt, &sxb, &cxb, &scalesq, &amu, &tanb, &vev2, &p2w);
   tausqodd_(&rmtausq, &fmasq, &msnusq, &mstau1sq, &mstau2sq, &sintau,
             &costau, &scalesq, &amu, &tanb, &vev2, &p2tau);

   UNLOCK_MUTEX();

   // Make appropriate substitutions for elements following 0907.4682
   // bottom of page 9
   std::swap(DMPB[0][0], DMPB[1][1]);
   std::swap(DMPB[0][2], DMPB[1][2]);

   for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
         DMP[i][j] += DMPB[i][j];
      }
   }

   const double dMA = p2w + p2tau;

   DMP[0][0] += dMA * sinb2;
   DMP[0][1] += dMA * sinb * cosb;
   DMP[1][1] += dMA * cosb2;

   // subtract two-loop tadpoles
   double tadpole[3];
   tadpole_hh_2loop(tadpole);

   DMP[0][0] += - tadpole[0] / vd;
   DMP[1][1] += - tadpole[1] / vu;
   DMP[2][2] += - tadpole[2] / vs;

   result[0] = - DMP[0][0]; // 1,1 element
   result[1] = - DMP[0][1]; // 1,2 element
   result[2] = - DMP[0][2]; // 1,3 element
   result[3] = - DMP[1][1]; // 2,2 element
   result[4] = - DMP[1][2]; // 2,3 element
   result[5] = - DMP[2][2]; // 3,3 element

}



void CLASSNAME::tadpole_hh_2loop(double result[3]) const
{
   // calculate 3rd generation sfermion masses and mixing angles
   double mst_1, mst_2, theta_t;
   double msb_1, msb_2, theta_b;
   double mstau_1, mstau_2, theta_tau;
   double msnu_1, msnu_2, theta_nu;

   calculate_MSFu_3rd_generation(mst_1, mst_2, theta_t);
   calculate_MSFd_3rd_generation(msb_1, msb_2, theta_b);
   calculate_MSFe_3rd_generation(mstau_1, mstau_2, theta_tau);
   calculate_MSFv_3rd_generation(msnu_1, msnu_2, theta_nu);

   double mst1sq = Sqr(mst_1), mst2sq = Sqr(mst_2);
   double msb1sq = Sqr(msb_1), msb2sq = Sqr(msb_2);
   double mstau1sq = Sqr(mstau_1), mstau2sq = Sqr(mstau_2);
   double msnusq = Sqr(msnu_2);
   double sxt = Sin(theta_t), cxt = Cos(theta_t);
   double sxb = Sin(theta_b), cxb = Cos(theta_b);
   double sintau = Sin(theta_tau), costau = Cos(theta_tau);

   double gs = g3;
   double rmtsq = Sqr(MFu(2));
   double scalesq = Sqr(get_scale());
   double vev2 = Sqr(vd) + Sqr(vu);
   const double vev = Sqrt(vev2);
   double tanb = vu/vd;
   const double tanb2 = Sqr(tanb);
   const double sinb = tanb / Sqrt(1. + tanb2);
   const double cosb = 1. / Sqrt(1. + tanb2);
   double amu = -0.7071067811865475*vs*Lambdax;
   double mg = MGlu;
   double mAsq = Sqr(MAh(1));
   double cotbeta = 1.0 / tanb;
   double rmbsq = Sqr(MFd(2));
   double rmtausq = Sqr(MFe(2));

   double s1s = 0., s2s = 0., s1t = 0., s2t = 0.;
   double s1b = 0., s2b = 0., s1tau = 0., s2tau = 0.;

   LOCK_MUTEX();

   ewsb2loop_(&rmtsq, &mg, &mst1sq, &mst2sq, &sxt, &cxt, &scalesq,
              &amu, &tanb, &vev2, &gs, &s1s, &s2s);
   ddstad_(&rmtsq, &rmbsq, &mAsq, &mst1sq, &mst2sq, &msb1sq, &msb2sq,
           &sxt, &cxt, &sxb, &cxb, &scalesq, &amu, &tanb, &vev2, &s1t,
           &s2t);
   ewsb2loop_(&rmbsq, &mg, &msb1sq, &msb2sq, &sxb, &cxb, &scalesq,
              &amu, &cotbeta, &vev2, &gs, &s2b, &s1b);
   tausqtad_(&rmtausq, &mAsq, &msnusq, &mstau1sq, &mstau2sq, &sintau,
             &costau, &scalesq, &amu, &tanb, &vev2, &s1tau, &s2tau);

   UNLOCK_MUTEX();

   // rescale T1 to get TS
   const double sss = s1s * vev * cosb / vs;
   const double ssb = s1b * vev * sinb / vs;

   if (!std::isnan(s1s * s1t * s1b * s1tau * s2s * s2t * s2b * s2tau
                   * sss * ssb)) {
      result[0] = (- s1s - s1t - s1b - s1tau) * vd;
      result[1] = (- s2s - s2t - s2b - s2tau) * vu;
      result[2] = (- sss - ssb) * vs;
      
   } else {
      result[0] = 0.;
      result[1] = 0.;
      result[2] = 0.;
   }

}


void CLASSNAME::calculate_Mhh_pole()
{ 
   if (problems.is_tachyon(hh))
      return;
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(Mhh) old_Mhh(Mhh), new_Mhh(Mhh);

   do {
      Eigen::Matrix<double,5,5> self_energy;
      const Eigen::Matrix<double,5,5> M_tree(get_mass_matrix_hh());

      // two-loop Higgs self-energy contributions
      double two_loop[6] = { 0. };
      if (pole_mass_loop_order > 1)
         self_energy_hh_2loop(two_loop);

      for (unsigned es = 0; es < 5; ++es) {
         const double p = Abs(old_Mhh(es));
         for (unsigned i1 = 0; i1 < 5; ++i1) {
            for (unsigned i2 = i1; i2 < 5; ++i2) {
               self_energy(i1,i2) = Re(self_energy_hh(p,i1,i2
                  ));
            }
         }

          if (pole_mass_loop_order > 1) {
            self_energy(0, 0) += two_loop[0];
            self_energy(0, 1) += two_loop[1];
            self_energy(0, 2) += two_loop[2];
            self_energy(1, 1) += two_loop[3];
            self_energy(1, 2) += two_loop[4];
            self_energy(2, 2) += two_loop[5];
         }


         Symmetrize(self_energy);
         const Eigen::Matrix<double,5,5> M_1loop(M_tree -
            self_energy);
         Eigen::Array<double,5,1> eigen_values;
         Eigen::Matrix<double,5,5> mix_ZH;
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZH);

         if (eigen_values(es) < 0.)
            problems.flag_tachyon(hh);

         PHYSICAL(Mhh(es)) = AbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(ZH) = mix_ZH;
      }

      new_Mhh = PHYSICAL(Mhh);
      diff = MaxRelDiff(new_Mhh, old_Mhh);
      old_Mhh = new_Mhh;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);
}

void CLASSNAME::calculate_MAh_pole()
{
   if (problems.is_tachyon(Ah))
      return;
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MAh) old_MAh(MAh), new_MAh(MAh);

    // two-loop Higgs self-energy contributions
      double two_loop[6] = { 0. };
      if (pole_mass_loop_order > 1)
         self_energy_Ah_2loop(two_loop);

   do {
      Eigen::Matrix<double,5,5> self_energy;
      const Eigen::Matrix<double,5,5> M_tree(get_mass_matrix_Ah());

      for (unsigned es = 0; es < 5; ++es) {
         const double p = Abs(old_MAh(es));
         for (unsigned i1 = 0; i1 < 5; ++i1) {
            for (unsigned i2 = i1; i2 < 5; ++i2) {
               self_energy(i1,i2) = Re(self_energy_Ah(p,i1,i2
                  ));
            }
         }

         if (pole_mass_loop_order > 1) {
            self_energy(0, 0) += two_loop[0];
            self_energy(0, 1) += two_loop[1];
            self_energy(0, 2) += two_loop[2];
            self_energy(1, 1) += two_loop[3];
            self_energy(1, 2) += two_loop[4];
            self_energy(2, 2) += two_loop[5];
         }
         

         Symmetrize(self_energy);
         const Eigen::Matrix<double,5,5> M_1loop(M_tree -
            self_energy);
         Eigen::Array<double,5,1> eigen_values;
         Eigen::Matrix<double,5,5> mix_ZA;
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZA);

         if (eigen_values(es) < 0.)
            problems.flag_tachyon(Ah);

         PHYSICAL(MAh(es)) = AbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(ZA) = mix_ZA;
      }

      new_MAh = PHYSICAL(MAh);
      diff = MaxRelDiff(new_MAh, old_MAh);
      old_MAh = new_MAh;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);
}

void CLASSNAME::calculate_MHpm_pole()
{
   const auto old_mHd2 = mHd2;
   const auto old_mHu2 = mHu2;
   const auto old_ms2 = ms2;
   const auto old_msbar2 = msbar2;
   const auto old_mphi2 = mphi2;
   solve_ewsb_one_loop();
   
   if (problems.is_tachyon(Hpm))
      return;
   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MHpm) old_MHpm(MHpm), new_MHpm(MHpm);

   do {
      Eigen::Matrix<double,2,2> self_energy;
      const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_Hpm());
      
      for (unsigned es = 0; es < 2; ++es) {
         const double p = Abs(old_MHpm(es));
         for (unsigned i1 = 0; i1 < 2; ++i1) {
            for (unsigned i2 = i1; i2 < 2; ++i2) {
               self_energy(i1,i2) = Re(self_energy_Hpm(p,i1,
                  i2));
            }
         }

         Symmetrize(self_energy);
         const Eigen::Matrix<double,2,2> M_1loop(M_tree -
            self_energy);
         Eigen::Array<double,2,1> eigen_values;
         Eigen::Matrix<double,2,2> mix_ZP;
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZP);
         if (eigen_values(es) < 0.)
            problems.flag_tachyon(Hpm);
         PHYSICAL(MHpm(es)) = AbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(ZP) = mix_ZP;
      }
      
      new_MHpm = PHYSICAL(MHpm);
      
      diff = MaxRelDiff(new_MHpm, old_MHpm);
      old_MHpm = new_MHpm;
      iteration++;
   } while (diff > precision
            && iteration < number_of_mass_iterations);
   
   mHd2 = old_mHd2;
   mHu2 = old_mHu2;
   ms2 = old_ms2;
   msbar2 = old_msbar2;
   mphi2 = old_mphi2;

}

void CLASSNAME::calculate_MChi_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,8,8> self_energy_1;
   Eigen::Matrix<double,8,8> self_energy_PL;
   Eigen::Matrix<double,8,8> self_energy_PR;
   const Eigen::Matrix<double,8,8> M_tree(get_mass_matrix_Chi());
   for (unsigned es = 0; es < 8; ++es) {
      const double p = Abs(MChi(es));
      for (unsigned i1 = 0; i1 < 8; ++i1) {
         for (unsigned i2 = 0; i2 < 8; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_Chi_1(p,i1,i2
               ));
            self_energy_PL(i1,i2) = Re(self_energy_Chi_PL(p,i1,
               i2));
            self_energy_PR(i1,i2) = Re(self_energy_Chi_PR(p,i1,
               i2));
         }
      }
      const Eigen::Matrix<double,8,8> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,8,8> M_1loop(M_tree + 0.5 * (delta_M
         + delta_M.transpose()));
      Eigen::Array<double,8,1> eigen_values;
      decltype(ZN) mix_ZN;
      fs_diagonalize_symmetric(M_1loop, eigen_values, mix_ZN);
      if (es == 0)
         PHYSICAL(ZN) = mix_ZN;
      PHYSICAL(MChi(es)) = Abs(eigen_values(es));
   }
}

void CLASSNAME::calculate_MCha_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,2,2> self_energy_1;
   Eigen::Matrix<double,2,2> self_energy_PL;
   Eigen::Matrix<double,2,2> self_energy_PR;
   const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_Cha());
   for (unsigned es = 0; es < 2; ++es) {
      const double p = Abs(MCha(es));
      for (unsigned i1 = 0; i1 < 2; ++i1) {
         for (unsigned i2 = 0; i2 < 2; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_Cha_1(p,i1,i2
               ));
            self_energy_PL(i1,i2) = Re(self_energy_Cha_PL(p,i1,
               i2));
            self_energy_PR(i1,i2) = Re(self_energy_Cha_PR(p,i1,
               i2));
         }
      }
      const Eigen::Matrix<double,2,2> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,2,2> M_1loop(M_tree + delta_M);
      Eigen::Array<double,2,1> eigen_values;
      decltype(UM) mix_UM;
      decltype(UP) mix_UP;
      fs_svd(M_1loop, eigen_values, mix_UM, mix_UP);
      if (es == 0) {
         PHYSICAL(UM) = mix_UM;
         PHYSICAL(UP) = mix_UP;
      }
      PHYSICAL(MCha(es)) = Abs(eigen_values(es));
   }
}

void CLASSNAME::calculate_MFe_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,3,3> self_energy_1;
   Eigen::Matrix<double,3,3> self_energy_PL;
   Eigen::Matrix<double,3,3> self_energy_PR;
   const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_Fe());
   for (unsigned es = 0; es < 3; ++es) {
      const double p = Abs(MFe(es));
      for (unsigned i1 = 0; i1 < 3; ++i1) {
         for (unsigned i2 = 0; i2 < 3; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_Fe_1(p,i1,i2)
               );
            self_energy_PL(i1,i2) = Re(self_energy_Fe_PL(p,i1,i2
               ));
            self_energy_PR(i1,i2) = Re(self_energy_Fe_PR(p,i1,i2
               ));
         }
      }
      const Eigen::Matrix<double,3,3> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,3,3> M_1loop(M_tree + delta_M);
      Eigen::Array<double,3,1> eigen_values;
      decltype(ZEL) mix_ZEL;
      decltype(ZER) mix_ZER;
      fs_svd(M_1loop, eigen_values, mix_ZEL, mix_ZER);
      if (es == 0) {
         PHYSICAL(ZEL) = mix_ZEL;
         PHYSICAL(ZER) = mix_ZER;
      }
      PHYSICAL(MFe(es)) = Abs(eigen_values(es));
   }
}

void CLASSNAME::calculate_MFd_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,3,3> self_energy_1;
   Eigen::Matrix<double,3,3> self_energy_PL;
   Eigen::Matrix<double,3,3> self_energy_PR;
   const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_Fd());
   for (unsigned es = 0; es < 3; ++es) {
      const double p = Abs(MFd(es));
      for (unsigned i1 = 0; i1 < 3; ++i1) {
         for (unsigned i2 = 0; i2 < 3; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_Fd_1(p,i1,i2)
               );
            self_energy_PL(i1,i2) = Re(self_energy_Fd_PL(p,i1,i2
               ));
            self_energy_PR(i1,i2) = Re(self_energy_Fd_PR(p,i1,i2
               ));
         }
      }
      const Eigen::Matrix<double,3,3> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,3,3> M_1loop(M_tree + delta_M);
      Eigen::Array<double,3,1> eigen_values;
      decltype(ZDL) mix_ZDL;
      decltype(ZDR) mix_ZDR;
      fs_svd(M_1loop, eigen_values, mix_ZDL, mix_ZDR);
      if (es == 0) {
         PHYSICAL(ZDL) = mix_ZDL;
         PHYSICAL(ZDR) = mix_ZDR;
      }
      PHYSICAL(MFd(es)) = Abs(eigen_values(es));
   }
}

void CLASSNAME::calculate_MFu_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,3,3> self_energy_1;
   Eigen::Matrix<double,3,3> self_energy_PL;
   Eigen::Matrix<double,3,3> self_energy_PR;
   const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_Fu());
   for (unsigned es = 0; es < 3; ++es) {
      const double p = Abs(MFu(es));
      for (unsigned i1 = 0; i1 < 3; ++i1) {
         for (unsigned i2 = 0; i2 < 3; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_Fu_1(p,i1,i2)
               );
            self_energy_PL(i1,i2) = Re(self_energy_Fu_PL(p,i1,i2
               ));
            self_energy_PR(i1,i2) = Re(self_energy_Fu_PR(p,i1,i2
               ));
         }
      }
      const Eigen::Matrix<double,3,3> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,3,3> M_1loop(M_tree + delta_M);
      Eigen::Array<double,3,1> eigen_values;
      decltype(ZUL) mix_ZUL;
      decltype(ZUR) mix_ZUR;
      fs_svd(M_1loop, eigen_values, mix_ZUL, mix_ZUR);
      if (es == 0) {
         PHYSICAL(ZUL) = mix_ZUL;
         PHYSICAL(ZUR) = mix_ZUR;
      }
      PHYSICAL(MFu(es)) = Abs(eigen_values(es));
   }
}

void CLASSNAME::calculate_MFDX_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,3,3> self_energy_1;
   Eigen::Matrix<double,3,3> self_energy_PL;
   Eigen::Matrix<double,3,3> self_energy_PR;
   const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_FDX());
   for (unsigned es = 0; es < 3; ++es) {
      const double p = Abs(MFDX(es));
      for (unsigned i1 = 0; i1 < 3; ++i1) {
         for (unsigned i2 = 0; i2 < 3; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_FDX_1(p,i1,i2
               ));
            self_energy_PL(i1,i2) = Re(self_energy_FDX_PL(p,i1,
               i2));
            self_energy_PR(i1,i2) = Re(self_energy_FDX_PR(p,i1,
               i2));
         }
      }
      const Eigen::Matrix<double,3,3> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,3,3> M_1loop(M_tree + delta_M);
      Eigen::Array<double,3,1> eigen_values;
      decltype(ZDXL) mix_ZDXL;
      decltype(ZDXR) mix_ZDXR;
      fs_svd(M_1loop, eigen_values, mix_ZDXL, mix_ZDXR);
      if (es == 0) {
         PHYSICAL(ZDXL) = mix_ZDXL;
         PHYSICAL(ZDXR) = mix_ZDXR;
      }
      PHYSICAL(MFDX(es)) = Abs(eigen_values(es));
   }
}

void CLASSNAME::calculate_MSHp0_pole()
{
   if (problems.is_tachyon(SHp0))
      return;
   // diagonalization with medium precision
   Eigen::Matrix<double,2,2> self_energy;
   const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_SHp0());

   for (unsigned es = 0; es < 2; ++es) {
      const double p = Abs(MSHp0(es));
      for (unsigned i1 = 0; i1 < 2; ++i1) {
         for (unsigned i2 = i1; i2 < 2; ++i2) {
            self_energy(i1,i2) = Re(self_energy_SHp0(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,2,2> M_1loop(M_tree - self_energy);
      Eigen::Array<double,2,1> eigen_values;
      Eigen::Matrix<double,2,2> mix_UHp0;
      fs_diagonalize_hermitian(M_1loop, eigen_values, mix_UHp0);

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(SHp0);

      PHYSICAL(MSHp0(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(UHp0) = mix_UHp0;
   }
}

void CLASSNAME::calculate_MSHpp_pole()
{
   if (problems.is_tachyon(SHpp))
      return;
   // diagonalization with medium precision
   Eigen::Matrix<double,2,2> self_energy;
   const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_SHpp());

   for (unsigned es = 0; es < 2; ++es) {
      const double p = Abs(MSHpp(es));
      for (unsigned i1 = 0; i1 < 2; ++i1) {
         for (unsigned i2 = i1; i2 < 2; ++i2) {
            self_energy(i1,i2) = Re(self_energy_SHpp(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,2,2> M_1loop(M_tree - self_energy);
      Eigen::Array<double,2,1> eigen_values;
      Eigen::Matrix<double,2,2> mix_UHpp;
      fs_diagonalize_hermitian(M_1loop, eigen_values, mix_UHpp);

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(SHpp);

      PHYSICAL(MSHpp(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(UHpp) = mix_UHpp;
   }
}

void CLASSNAME::calculate_MChiP_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,2,2> self_energy_1;
   Eigen::Matrix<double,2,2> self_energy_PL;
   Eigen::Matrix<double,2,2> self_energy_PR;
   const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_ChiP());
   for (unsigned es = 0; es < 2; ++es) {
      const double p = Abs(MChiP(es));
      for (unsigned i1 = 0; i1 < 2; ++i1) {
         for (unsigned i2 = 0; i2 < 2; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_ChiP_1(p,i1,
               i2));
            self_energy_PL(i1,i2) = Re(self_energy_ChiP_PL(p,i1,
               i2));
            self_energy_PR(i1,i2) = Re(self_energy_ChiP_PR(p,i1,
               i2));
         }
      }
      const Eigen::Matrix<double,2,2> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,2,2> M_1loop(M_tree + 0.5 * (delta_M
         + delta_M.transpose()));
      Eigen::Array<double,2,1> eigen_values;
      decltype(ZNp) mix_ZNp;
      fs_diagonalize_symmetric(M_1loop, eigen_values, mix_ZNp);
      if (es == 0)
         PHYSICAL(ZNp) = mix_ZNp;
      PHYSICAL(MChiP(es)) = Abs(eigen_values(es));
   }
}

void CLASSNAME::calculate_MVG_pole()
{
   // diagonalization with medium precision
   PHYSICAL(MVG) = 0.;
}

void CLASSNAME::calculate_MVP_pole()
{
   // diagonalization with medium precision
   PHYSICAL(MVP) = 0.;
}

void CLASSNAME::calculate_MVWm_pole()
{
   if (problems.is_tachyon(VWm))
      return;
   // diagonalization with medium precision
   const double p = MVWm;
   const double self_energy = Re(self_energy_VWm(p));
   const double mass_sqr = Sqr(MVWm) - self_energy;

   if (mass_sqr < 0.)
      problems.flag_tachyon(VWm);

   PHYSICAL(MVWm) = AbsSqrt(mass_sqr);
}


double CLASSNAME::calculate_MFu_DRbar(double m_pole, int idx) const
{
   const double p = m_pole;
   const double self_energy_1  = Re(self_energy_Fu_1_heavy_rotated(p, idx
      , idx));
   const double self_energy_PL = Re(self_energy_Fu_PL_heavy_rotated(p,
      idx, idx));
   const double self_energy_PR = Re(self_energy_Fu_PR_heavy_rotated(p,
      idx, idx));

   const double currentScale = get_scale();
   const double qcd_1l = -0.008443431970194815*(5. - 3.*Log(Sqr(MFu(2))
      /Sqr(currentScale)))*Sqr(g3);
   const double qcd_2l = -0.003408916029785599*Power(g3,4) +
      0.0011495761378943394*Power(g3,4)*Log(Sqr(MFu(2))/Sqr(currentScale)) -
      0.00024060895909416413*Power(g3,4)*Sqr(Log(Power(MFu(2),2)/Sqr(
      currentScale)));

   const double m_susy_drbar = m_pole + self_energy_1 + m_pole * (
      self_energy_PL + self_energy_PR + qcd_1l + qcd_2l);

   return m_susy_drbar;
}

double CLASSNAME::calculate_MFd_DRbar(double m_sm_msbar, int idx) const
{
   const double p = m_sm_msbar;
   const double self_energy_1  = Re(self_energy_Fd_1_heavy_rotated(p, idx
      , idx));
   const double self_energy_PL = Re(self_energy_Fd_PL_heavy_rotated(p,
      idx, idx));
   const double self_energy_PR = Re(self_energy_Fd_PR_heavy_rotated(p,
      idx, idx));
   const double m_tree = MFd(2);
   const double m_sm_drbar = m_sm_msbar * (1 - 0.00020496318737651018*
      Power(g3,4) + 0.0006860288475783287*Sqr(g1) + 0.0023747152416172916*Sqr(
      g2) - 0.008443431970194815*Sqr(g3));

   const double m_susy_drbar = m_sm_drbar / (1.0 - self_energy_1/m_tree -
      self_energy_PL - self_energy_PR);

   return m_susy_drbar;
}

double CLASSNAME::calculate_MFe_DRbar(double m_sm_msbar, int idx) const
{
   const double p = m_sm_msbar;
   const double self_energy_1  = Re(self_energy_Fe_1_heavy_rotated(p, idx
      , idx));
   const double self_energy_PL = Re(self_energy_Fe_PL_heavy_rotated(p,
      idx, idx));
   const double self_energy_PR = Re(self_energy_Fe_PR_heavy_rotated(p,
      idx, idx));
   const double m_sm_drbar = m_sm_msbar * (1 - 0.0023747152416172916*(0.6
      *Sqr(g1) - Sqr(g2)));

   const double m_susy_drbar = m_sm_drbar + self_energy_1 + m_sm_drbar *
      (self_energy_PL + self_energy_PR);

   return m_susy_drbar;
}

double CLASSNAME::calculate_MFv_DRbar(double, int) const
{
   return 0.0;
}

double CLASSNAME::calculate_MVP_DRbar(double)
{
   return 0.0;
}

double CLASSNAME::calculate_MVZ_DRbar(double m_pole)
{
   const double p = m_pole;
   const double self_energy = Re(self_energy_VZ(p));
   const double mass_sqr = Sqr(m_pole) + self_energy;

   if (mass_sqr < 0.) {
      problems.flag_tachyon(VZ);
      return m_pole;
   }

   return AbsSqrt(mass_sqr);
}

double CLASSNAME::calculate_MVWm_DRbar(double m_pole)
{
   const double p = m_pole;
   const double self_energy = Re(self_energy_VWm(p));
   const double mass_sqr = Sqr(m_pole) + self_energy;

   if (mass_sqr < 0.) {
      problems.flag_tachyon(VWm);
      return m_pole;
   }

   return AbsSqrt(mass_sqr);
}


double CLASSNAME::ThetaW() const
{
   return ArcTan((0.7745966692414834*g1)/g2);
}

double CLASSNAME::v() const
{
   return 2*Sqrt(Sqr(MVWm)/Sqr(g2));
}

double CLASSNAME::ThetaWp() const
{
   return 0.5*ArcTan((2*g1p*Sqrt(6*Sqr(g1) + 10*Sqr(g2))*(3*Sqr(vd) - 2*
      Sqr(vu)))/(6*Sqr(g1)*(Sqr(vd) + Sqr(vu)) + 10*Sqr(g2)*(Sqr(vd) + Sqr(vu))
      - Sqr(g1p)*(9*Sqr(vd) + 25*Sqr(vs) + 4*Sqr(vu))));
}


std::ostream& operator<<(std::ostream& ostr, const NE6SSM<Two_scale>& model)
{
   model.print(ostr);
   return ostr;
}

} // namespace flexiblesusy
